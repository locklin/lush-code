;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; LUSH Lisp Universal Shell
;;;   Copyright (C) 2009 Leon Bottou, Yann Le Cun, Ralf Juengling.
;;;   Copyright (C) 2002 Leon Bottou, Yann Le Cun, AT&T Corp, NECI.
;;; Includes parts of TL3:
;;;   Copyright (C) 1987-1999 Leon Bottou and Neuristique.
;;; Includes selected parts of SN3.2:
;;;   Copyright (C) 1991-2001 AT&T Corp.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the Lesser GNU General Public License as 
;;; published by the Free Software Foundation; either version 2 of the
;;; License, or (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with this program; if not, write to the Free Software
;;; Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111, USA
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(libload "datatypes/iterable-datatype")

#? *** Small Integer Sets
;; This set implementation is more efficient than the general
;; <IntSet>. It requires that the possible values are in a
;; fixed range [0..<n>-1], where <n> must be specified at object
;; creation time. A <SmallIntSet> requires memory linear in <n>.
;; Another difference to an <IntSet> is that iterating over an
;; <SmallIntSet> does not yield the set elements in order.

(defclass SmallIntSet IterableDatatype
  ((-idx1- (-int-)) sparse)
  ((-idx1- (-int-)) dense)
  ((-int-) nelems) )           ; number of items in set

(in-namespace (class SmallIntSet)
 
(defmacro check-nonempty ()
  `(when (= nelems 0)
     (error "Set is empty") )
  )

(defmacro set-member (i)
  (when (not (symbolp i))
    (error "not a symbol" i))
  `(and (< ,i (length sparse)) 
        (< (sparse ,i) nelems) 
        (= (dense (sparse ,i)) ,i) )
  )

)

(defclass SmallIntSetIterator DatatypeIterator
  ((-idx1- (-int-)) dense)
  ((-int-) n)
  ((-int-) next-item) )

(defmethod SmallIntSetIterator SmallIntSetIterator (obj d)
  (declare (-obj- (IterableDatatype)) obj)
  (declare (-idx1- (-int-)) d)
  (==> this DatatypeIterator obj)
  (setq dense d  n 0) )

(defmethod SmallIntSetIterator -make-next ()
  (when (< n (length dense))
    (setq next-item-valid t)
    (setq next-item (dense n))
    (incr n)
    ()))

#? (new <SmallIntSet> <n>)
;; Create a <SmallIntSet> object with possible values in the
;; range [0..<n>-1].
(defmethod SmallIntSet SmallIntSet (n)
  (declare (-int-) n)
  (setq sparse (int-array n))
  (setq dense (int-array n))
  (setq nelems 0))

(defmethod SmallIntSet -emptyp ()
  (= nelems 0) )

#? (==> <SmallIntSet> number-of-items)
;; Number of items in set.
(defmethod SmallIntSet number-of-items ()
  nelems)

#? (==> <SmallIntSet> clear)
;; Clear set and return self.
;; After invoking this method the set object is empty.
(defmethod SmallIntSet clear ()
  (setq nelems 0)
  this)

#? (==> <SmallIntSet> insert <i>)
;; Insert item <i> into set, return <t> on success and <()> when
;; <i> was already in set.
(defmethod SmallIntSet insert (i)
  (declare (-int-) i)
  (check-mutability)
  (if (set-member i)
      ()
    (sparse i nelems)
    (dense nelems i)
    (incr nelems)
    t))

#? (==> <SmallIntSet> insert-all <is>)
;; Insert all items in vector <is> and return <()>.
(defmethod SmallIntSet insert-all (items)
  (declare (-idx1- (-int-)) items)
  (check-mutability)
  (for* (i 0 (length items))
    (declare (-int-) i)
    (let ((item (items i)))
      (when (not (set-member item))
        (sparse item nelems)
        (dense nelems item)
        (incr nelems) )))
  ())

#? (==> <SmallIntSet> remove <i>)
;; Remove item <i> from set, return <t> on success and <()> when
;; <i> was not in set.
(defmethod SmallIntSet remove (i)
  (declare (-int-) i)
  (check-mutability)
  (if (set-member i)
      (progn
        (decr nelems)
        (when (>= nelems 0)
          (dense (sparse i) (dense nelems))
          (sparse (dense nelems) (sparse i))
          t))
    ()))

#? (==> <SmallIntSet> member <i>)
;; True if item <i> is in the set.
(defmethod SmallIntSet member (i)
  (declare (-int-) i)
  (set-member i) )

#? (==> <SmallIntSet> minimum)
;; Minimum item in set.
(defmethod SmallIntSet minimum ()
  (check-nonempty)
  (let ((mini (length sparse)))
    (declare (-int-) mini)
    (for* (i 0 nelems)
      (when (< (dense i) mini)
        (setq mini (dense i)) ))
    mini))

#? (==> <SmallIntSet> maximum)
;; Maximum item in set.
(defmethod SmallIntSet maximum ()
  (check-nonempty)
  (let ((maxi -1))
    (declare (-int-) maxi)
    (for* (i 0 nelems)
      (when (> (dense i) maxi)
        (setq maxi (dense i)) ))
    maxi))

#? (==> <SmallIntSet> complement)
;; Turn set into its complement and return <()>.
(defmethod SmallIntSet complement ()
  (let ((new-dense (int-array (length dense)))
        (n 0) )
    (for* (i nelems (length dense))
      (declare (-int-) i)
      (dense i -1) )
    (for* (i 0 (length sparse))
      (declare (-int-) i n)
      (when (<> (dense (sparse i)) i)
        (new-dense n i)
        (sparse i n)
        (incr n) ))
    (setq dense new-dense  nelems n)
    ()))

#? (==> <SmallIntSet> to-array)
;; Return all elements as a vector.
(defmethod SmallIntSet to-array ()
  (copy-array (idx-trim dense 0 0 nelems)) )

(defmethod SmallIntSet -iterate ()
  (new SmallIntSetIterator this (idx-trim dense 0 0 nelems)) )

(dhc-make-class () SmallIntSetIterator SmallIntSet)

(defmethod SmallIntSet pretty ()
  (==> (idx-trim dense 0 0 nelems) pretty) )

  
    
