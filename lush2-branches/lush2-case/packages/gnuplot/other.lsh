
;; All the other things you want to control to make a good plot.

(in-namespace gnuplot-other-

(defmacro process-range-args ()
  `(setq from (if (= from *) "*" (sprintf "%f" from))
         to (if (= to *) "*" (sprintf "%f" to)))
  )

#? ** Other Graph Properties
;; These functions add elements to or modify aspects of a plot.

#? (title <str>)
;; Add title to the plot.
(defun title (s)
  (sprintf "set title \"%s\"" s) )

#? (xlabel <str>)
;; Add label <srt> to the x-axis.
(defun xlabel (s)
  (sprintf "set xlabel \"%s\"" s) )

#? (xrange <from> <to>)
;; Set range of x-axis. Either <from> or <to> may be <*>, which
;; indicates auto-scaling for the respective end.
(defun xrange (from to)
  (process-range-args)
  (sprintf "set xrange [%s:%s]" from to) )

#? (x2label <str>)
;; Add label <str> to the alternate (upper) x-axis.
(defun x2label (s)
  (sprintf "set x2label \"%s\"" s) )

#? (x2range <from> <to>)
;; Set range of alternate (upper) x-axis.
(defun x2range (from to)
  (process-range-args)
  (sprintf "set x2range [%s:%s]" from to) )

#? (ylabel <str>)
;; Add an axis label to the y-axis.
(defun ylabel (s)
  (sprintf "set ylabel \"%s\"" s) )

#? (yrange <from> <to>)
;; Set range of y-axis.
(defun yrange (from to)
  (process-range-args)
  (sprintf "set yrange [%s:%s]" from to) )

#? (y2label <str>)
;; Add label <str> to the alternate (right-hand) y-axis.
(defun y2label (s)
  (sprintf "set y2label \"%s\"" s) )

#? (y2range <from> <to>)
;; Set range of alternate (right-hand) y-axis.
(defun y2range (from to)
  (process-range-args)
  (sprintf "set y2range [%s:%s]" from to) )

#? (margin <which> <f>)
;; Set margin to fraction <f> of canvas size.
;;
;; Gnuplot chooses margins automatically be default. If this
;; is not a good choice then each margin (<left>, <right>, <top>, <bottom>)
;; may be set explicitly to <f>, which is a fraction of the horizontal
;; or vertical extent of the plotting canvas, respectively.
;;
;; Example:
;; {<code> (margin 'left 0.2) (margin 'right 0.9) }
(defun margin (which f)
  (when (stringp which)
    (setq which (named which)) )
  (when (not (numberp f))
    (error "invalid argument" f) )
  (selectq which
    ('left   (sprintf "set lmargin at screen %f" f))
    ('right  (sprintf "set rmargin at screen %f" f))
    ('top    (sprintf "set tmargin at screen %f" f))
    ('bottom (sprintf "set bmargin at screen %f" f))
    (t
     (error "invalid argument" which) )))

) ; namespace gnuplot-other-


