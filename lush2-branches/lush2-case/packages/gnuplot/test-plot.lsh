
;; Partial translation of gnuplot/demo/finance.dem

(libload "gnuplot/plot")
(libload "color-tools")

(defparameter +dtd2000+     (date-to-day (string-to-date "2000-1-1" 'year 'day)))
(defparameter +spd+         (* 24 3600))
(defparameter +finance.dat+ 
  (concat-fname (dirname file-being-loaded) "finance.dat") )

;; read data in finance.dat
(defun read-data ()
  (let ((m (double-array 500 12))
        (n 0) )
    (do ((line (iter-lines +finance.dat+)))
      (let* ((ds (str-split "\t" line))
             ((mon day yr) (str-split "/" (car ds)))
             (date (string-to-date (sprintf "%s-%s-%s" yr mon day) 'year 'day))
             (row (idx-select m 0 n))
             (d0 (* (- (date-to-day date) +dtd2000+) +spd+)) )
        (row () (cons n (cons d0 (mapcar val (cdr ds)))))
        (incr n)))
    (idx-trim! m 0 0 n)
    m))

(defun finance-demo ()
  (let* ((gp (new Gnuplot 'interactive ()))
         (m  (read-data))
         (-lc (short-array (length m) 3))
         (-ps (+ 1 (cos (/ (arange (length m)) 20))))
         (c05 (array-take m 1 [i 0 5]))
         (c02345 (array-take m 1 [i 0 2 3 4 5]))
         (g ()) )

    ;; generate some fun colors
    (dolist (i (range* (length m)))
      (-lc i () (-genrgb (+ 10131 i))) )
    
    (setq g (plot-graph (title "Demo for plotting financial data")
                        (xrange 50 253)
                        (yrange 75 105)
                        "set ytics (105, 100, 95, 90, 85, 80)"
                        (margin 'left 0.15  'right 0.95)
                        (linespoints c05 (ps -ps) (pt 7) (lc -lc))
                        ))
    (==> gp do-graph g)

    (pause "Turn on grid")
    (==> g add-preamble "set grid")
    (==> g add-preamble "set title 'Turn on grid'")
    (==> gp do-graph g)
    
    gp))
