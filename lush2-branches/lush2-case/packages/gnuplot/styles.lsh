
(defvar *gnuplot-linetypes*   (.cl -1))
(defvar *gnuplot-linecolors*  (.cl 'blue 'red 'green 'orange 'cyan 'brown 'black))
(defvar *gnuplot-linewidths*  (.cl 1))
(defvar *gnuplot-pointtypes*  (.cl 1     2    3      4       5     6      7))
(defvar *gnuplot-pointsizes*  (.cl 2))

(defclass GnuplotLinestyles iterator
  linetype  linecolor  linewidth  pointtype  pointsize 
  linetypes linecolors linewidths pointtypes pointsizes)

(defmethod GnuplotLinestyles -make-next ()
  (setq linetype  (car linetypes)  linetypes  (cdr linetypes))
  (setq linecolor (car linecolors) linecolors (cdr linecolors))
  (setq linewidth (car linewidths) linewidths (cdr linewidths))
  (setq pointtype (car pointtypes) pointtypes (cdr pointtypes))
  (setq pointsize (car pointsizes) pointsizes (cdr pointsizes))
  () )

(defmethod GnuplotLinestyles GnuplotLinestyles ()
  (setq linetypes  *gnuplot-linetypes*)
  (setq linecolors *gnuplot-linecolors*)
  (setq linewidths *gnuplot-linewidths*)
  (setq pointtypes *gnuplot-pointtypes*)
  (setq pointsizes *gnuplot-pointsizes*)
  (==> this -make-next) )

(defmethod GnuplotLinestyles peeknext ()
  (sprintf "lt %d lc rgb \"%l\" lw %f pt %d ps %f"
           linetype linecolor linewidth pointtype pointsize) )

(defmethod GnuplotLinestyles next ()
  (prog1 (==> this peeknext)
    (==> this -make-next) ))

(defmethod GnuplotLinestyles -emptyp ()
  ())

(defmethod GnuplotLinestyles selfcheck ()
  (when (not (integerp linetype))
    (error "invalid line type" linetype) )
  (when (not (*gnuplot-colors* linecolor))
    (error "invalid line color" linecolor) )
  (when (not (integerp pointtype))
    (error "invalid  linestyle point type" pointtype) )
  (when (not (numberp pointsize))
    (error "invalid linestyle point size" pointsize) )
  ())

(defmacro chk-linestyles ()
  `(when (not (isa linestyles GnuplotLinestyles))
     (error "linestyles undefined") )
  )


;; (defvar *gnuplot-filldensities* (.cl 0))
;; (defvar *gnuplot-fillbordercolors*  *gnuplot-fillcolors*) ; (.cl ()) for no borders

;; ;; fillpatterns currently not supported (need filltype)
;; ; (defvar *gnuplot-fillpatterns* (.cl 1))

;; (defclass GnuplotFillstyles object
;;   filldensity   fillbordercolor
;;   filldensities fillbordercolors)

;; (defmethod GnuplotFillstyles -make-next ()
;;   (setq filldensity (car filldensities) filldensities (cdr filldensities))
;;   (setq fillbordercolor (car fillbordercolors)  fillbordercolors (cdr fillbordercolors))
;;   () )

;; (defmethod GnuplotFillstyles GnuplotFillstyles ()
;;   (setq filldensities    *gnuplot-filldensities*)
;;   (setq fillbordercolors *gnuplot-fillbordercolors*)
;;   (==> this -make-next) )

;; (defmethod GnuplotFillstyles peeknext ()
;;   (if fillbordercolor
;;       (sprintf "transparent solid %f border rgb %s" filldensity fillbordercolor)
;;     (sprintf "transparent solid %f %s noborder" filldensity) ))

;; (defmethod GnuplotFillstyles next ()
;;   (prog1 (==> this peeknext)
;;     (==> this -make-next) ))

;; (defmethod GnuplotFillstyles -emptyp ()
;;   ())

;; (defmethod GnuplotFillstyles selfcheck ()
;;   (when (not (numberp filldensity))
;;     (error "invalid fill density" filldensity) )
;;   (when (or (< filldensity 0) (> filldensity 1))
;;     (error "invalid fill density" filldensity) )
;;   (when fillbordercolor
;;     (when (not (*gnuplot-colors* fillbordercolor))
;;       (error "invalid fill-border color" fillbordercolor) ))
;;   ())

;; (defmacro chk-fillstyles ()
;;   `(when (not (isa fillstyles GnuplotFillstyles))
;;      (error "fillstyles undefined") )
;;   )



(in-namespace gnuplot-other- 

#? (linestyle [<color> <width> <type> <pointtype> <pointsize>])
;; Modify next linestyle and return its index.
(defun linestyle args
  (chk-linestyles)
  (when args  (setq :linestyles:linecolor (car args)  args (cdr args)))
  (when args  (setq :linestyles:linewidth (car args)  args (cdr args)))
  (when args  (setq :linestyles:linetype  (car args)  args (cdr args)))
  (when args  (setq :linestyles:pointtype (car args)  args (cdr args)))
  (when args  (setq :linestyles:pointsize (car args)  args (cdr args)))
  (when args
    (error "too many arguments" args) )
  (==> linestyles selfcheck)
  :linestyles:index)


#? (linecolor [<color> <color2> <color3> ...])
;; {<see> linestyle}
;; Set/query line color.
;;
;; With no arguments return color for next plot line.
(defun linecolor colors
  (chk-linestyles)
  (when colors
    (setq :linestyles:linecolors (apply .cl colors))
    (setq :linestyles:linecolor (car :linestyles:linecolors)) )
  :linestyles:linecolor)


#? (linewidth [<width> <width2> <width3> ...])
;; {<see> linestyle}
;; Set/query line width.
;;
;; With no arguments return line width for next plot line.
(defun linewidths widths
  (chk-linestyles)
  (when widths
    (setq :linestyles:linewidths (apply .cl widths))
    (setq :linestyles:linewidth (car :linestyles:linewidths)) )
  :linestyles:linewidth)


#? (linetype [<type> <type2> <type3> ...])
;; {<see> linestyle}
;; Set/query line type.
;;
;; With no arguments return line type for next plot line.
(defun linetype types
  (chk-linestyles)
  (when types
    (setq :linestyles:linetypes (apply .cl types))
    (setq :linestyles:linetype (car :linestyles:linestypes)) )
  :linestyles:linetype)


#? (pointtypes [<pt> <pt2> <pt3> ...])
;; {<see> linestyle}
;; Set/query linestyle point type.
;;
;; With no arguments return point type for next plot line.
(defun pointtype pts
  (chk-linestyles)
  (when pts
    (setq :linestyles:pointtypes (apply .cl pts))
    (setq :linestyles:pointtype (car :linestyles:pointtypes)) )
  :linestyles:pointtype)


#? (pointsize [<ps> <ps2> <ps3> ...])
;; {<see> linestyle}
;; Set/query linestyle point size.
;;
;; With no arguments return point size for next plot line.
(defun pointsize pss
  (chk-linestyles)
  (when pss
    (setq :linestyles:pointsizes (apply .cl pss))
    (setq :linestyles:pointsize (car :linestyles:pointsizes)) )
  :linestyles:pointsize)

) ; namespace gnuplot-other-
