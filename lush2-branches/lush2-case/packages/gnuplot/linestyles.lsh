
(defvar *gnuplot-linetypes*   (.cl -1))
(defvar *gnuplot-linecolors*  (.cl "black" "blue" "red" "green" "yellow" "cyan"))
(defvar *gnuplot-linewidths*  (.cl 1))
(defvar *gnuplot-pointtypes*  (.cl 1))
(defvar *gnuplot-pointsizes*  (.cl 2))

(defclass GnuplotLinestyles iterator
  next-item
  linetype  linecolor  linewidth  pointtype  pointsize 
  linetypes linecolors linewidths pointtypes pointsizes)

(defmethod GnuplotLinestyles -make-next ()
  (setq linetype  (next linetypes))
  (setq linecolor (next linecolors))
  (setq linewidth (next linewidths))
  (setq pointtype (next pointtypes))
  (setq pointsize (next pointsizes))
  (incr next-item)
  (setq next-item-valid t)
  () )

(defmethod GnuplotLinestyles GnuplotLinestyles ()
  (setq next-item 0)
  (setq linetypes  (iterate *gnuplot-linetypes*))
  (setq linecolors (iterate *gnuplot-linecolors*))
  (setq linewidths (iterate *gnuplot-linewidths*))
  (setq pointtypes (iterate *gnuplot-pointtypes*))
  (setq pointsizes (iterate *gnuplot-pointsizes*))
  (==> this -make-next) )

(defmethod GnuplotLinestyles selfcheck ()
  (when (not (integerp linetype))
    (error "invalid line type" linetype) )
  (when (not (*gnuplot-colors* linecolor))
    (error "invalid line color" linecolor) )
  (when (not (integerp pointtype))
    (error "invalid  linestyle point type" pointtype) )
  (when (not (numberp pointsize))
    (error "invalid linestyle point size" pointsize) )
  ())

(defmacro chk-linestyles ()
  `(when (not (isa linestyles GnuplotLinestyles))
     (error "linestyles undefined") )
  )

(in-namespace plot- 

#? (linestyle [<color> <width> <type> <pointtype> <pointsize>])
;; Modify next linestyle and return its index.
(defun linestyle args
  (chk-linestyles)
  (peeknext linestyles)
  (when args  (setq :linestyles:linecolor (car args)  args (cdr args)))
  (when args  (setq :linestyles:linewidth (car args)  args (cdr args)))
  (when args  (setq :linestyles:linetype  (car args)  args (cdr args)))
  (when args  (setq :linestyles:pointtype (car args)  args (cdr args)))
  (when args  (setq :linestyles:pointsize (car args)  args (cdr args)))
  (when args
    (error "too many arguments" args) )
  (==> linestyles selfcheck)
  (peeknext linestyles) )


#? (linecolor [<color> <color2> <color3> ...])
;; {<see> linestyle}
;; Set/query line color.
;;
;; With no arguments return color for next plot line.
(defun linecolor colors
  (chk-linestyles)
  (when colors
    (setq :linestyles:linecolors (iterate (apply .cl colors)))
    (setq :linestyles:linecolor (next :linestyles:color)) )
  :linestyles:linecolor)


#? (linewidth [<width> <width2> <width3> ...])
;; {<see> linestyle}
;; Set/query line width.
;;
;; With no arguments return line width for next plot line.
(defun linewidths widths
  (chk-linestyles)
  (when widths
    (setq :linestyles:linewidths (iterate (apply .cl widths)))
    (setq :linestyles:linewidth (next :linestyles:linewidths)) )
  :linestyles:linewidth)


#? (linetype [<type> <type2> <type3> ...])
;; {<see> linestyle}
;; Set/query line type.
;;
;; With no arguments return line type for next plot line.
(defun linetype types
  (chk-linestyles)
  (when types
    (setq :linestyles:linetypes (iterate (apply .cl types)))
    (setq :linestyles:linetype (next :linestyles:linestypes)) )
  :linestyles:linetype)


#? (pointtypes [<pt> <pt2> <pt3> ...])
;; {<see> linestyle}
;; Set/query linestyle point type.
;;
;; With no arguments return point type for next plot line.
(defun pointtype pts
  (chk-linestyles)
  (when pts
    (setq :linestyles:pointtypes (iterate (apply .cl pts)))
    (setq :linestyles:pointtype (next :linestyles:pointtypes)) )
  :linestyles:pointtype)


#? (pointsize [<ps> <ps2> <ps3> ...])
;; {<see> linestyle}
;; Set/query linestyle point size.
;;
;; With no arguments return point size for next plot line.
(defun pointsize pss
  (chk-linestyles)
  (when pss
    (setq :linestyles:pointsizes (iterate (apply .cl pss)))
    (setq :linestyles:pointsize (next :linestyles:pointsizes)) )
  :linestyles:pointsize)

) ; namespace plot-
