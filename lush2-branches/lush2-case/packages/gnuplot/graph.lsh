
(defclass GnuplotGraph object
  command    ; plot command
  preamble   ; list of preamble instructions
  lines      ; list of plot instructions and data
  objects    ; list of other plot elements (with data)
  i-ls       ; next unused linestyle index
  )

#? (new GnuplotGraph <cmd>)
(defmethod GnuplotGraph GnuplotGraph (cmd)
  (when (not (member cmd (list "plot" "splot")))
    (error "not a valid gnuplot plot command" cmd) )
  (setq command cmd)
  (setq preamble ())
  (setq lines ())
  (setq objects ())
  (setq i-ls 1)
  () )

;; add a new line with plotting style <ps>, title <tl>, and <extra>
;; instructions for data <data>. Return the linestyle index of the line.
(defmethod GnuplotGraph add-line (ps title extra data)
  (declare (-str-) ps title extra)
  (assert (numericp data))
  (let ((text (sprintf "'-' title \"%s\" with %s ls %d %s" title ps i-ls extra)))
    (setq lines (nconc1 lines (cons text data))) )
  (when linestyles
    (==> this add-preamble (sprintf "set style line %d %s" i-ls (next linestyles))) )
  (incr i-ls)
  (- i-ls 1) )

;; add pair of command-text and data to objects
(defmethod GnuplotGraph add-object (textf data)
  (assert (stringp textf))
  (assert (vectorp data))
  ;; check that textf and data are compatible
  (sprintf textf (data ()))
  (setq objects (nconc1 objects (cons textf data)))
  ())

;; add a command string to preamble
(defmethod GnuplotGraph add-preamble (text)
  (setq preamble (nconc1 preamble text))
  ())

;; create sequence of commands for gnuplot
(defmethod GnuplotGraph serialize ()
  (append preamble
          (when objects
            (domapcar ((textf . data) objects)
              (sprintf textf (data ())) ))
          (when lines
            (cons (sprintf "%s %s" command (str-join "," (mapcar car lines)))
                  (mapcar cdr lines) ))
          ))

(defmethod GnuplotGraph dump ()
  (let ((stringify #\(if (stringp $1) $1 (sprintf "%l" $1))))
    (printf (str-join "\n" (mapcar stringify (==> this serialize))))
    (printf "\n") ))


(defmacro chk-graph ()
  `(when (not (isa graph GnuplotGraph))
     (error "not in plotting scope (graph undefined)") )
  )


;; --------------------------------------------

(defun plot-cmd-p (s)
  (and (stringp s) (member (left s 5) '("plot " "splot"))) )

(defmethod Gnuplot do-graph (g)
  (if interactive
      (dolist (s (==> g serialize)) (this s))
    
    ;; check for errors in non-interactive mode 
    (this "reset errors")
    (dolist (s (==> g serialize))
      (cond
       ((not (stringp s)) (this s))
       ((plot-cmd-p s)    (this s))
       (t (this s)
          (let ((errmsg (gp "print GPVAL_ERRMSG")))
            (when (> (length errmsg) 1)
              (printf "\n")
              (printf "*** gnuplot command : %s\n" s)
              (printf "*** gnuplot error   : %s\n" errmsg)
              (error "gnuplot script " g)))))
      ())))



