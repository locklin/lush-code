
(libload "gnuplot/gnuplot")
(libload "gnuplot/styles")
(libload "gnuplot/graph")
(libload "gnuplot/other")


(defun validate-plot-args (args valid-ncols)
  (let (((data &optional (title "") &rest extra) args))
    (when (not (numericp data))
      (error "not valid plot data (not a numeric array)" data) )
    (when (= (rank data) 1)
      (setq data ($> data)) )
    (when (<> (rank data) 2)
      (error "not valid plot data (not a matrix)" data) )
    (when (not (member (shape data 1) valid-ncols))
      (error "invalid number of data columns" (shape data 1)) )
    (when (not (stringp title))
      (error "not a valid title (not a string)" title) )
    (cons data (cons title extra)) ))

;;  where <style> is one of

;;       lines        dots       steps     errorbars     xerrorbar    xyerrorlines
;;       points       impulses   fsteps    errorlines    xerrorlines  yerrorbars
;;       linespoints  labels     histeps   financebars   xyerrorbars  yerrorlines
;;                                         vectors
;;  or
;;        boxes            candlesticks   image      circles
;;        boxerrorbars     filledcurves   rgbimage
;;        boxxyerrorbars   histograms     rgbalpha   pm3d

;;  The first group of styles have associated line, point, and text properties.
;;  The second group of styles also have fill properties.  See `fillstyle`.  Some
;;  styles have further sub-styles.  See `plotting styles` for details of each.

(df def-plot (style valid-ncols)
  (assert (symbolp style))
  (assert (listp valid-ncols))
  (eval `(defun ,style args
           (chk-graph)
           (let (((data title . extra) (validate-plot-args args ',valid-ncols)))
             (let (((extra data) (process-line-args extra data)))
               (==> graph add-line ,(nameof style) title extra data) ))
           ())
        ))

#? (plot-graph <l1> .. <ln>)
;; Make a graph object from gnuplot plot instructions <l1> .. <ln>.
(df plot-graph forms
  (with-namespace gnuplot-plot-
    (let ((graph (new GnuplotGraph "plot")))
      (dolist (f forms)
        (setq f (eval f))
        (when (hasmethod f '-plot)
          (==> f -plot) ))
      graph)))

#? (plot <l1> .. <ln>) 
;; Make a new <Gnuplot> object, execute plot instructions <l1> .. <ln>
;; and return the <Gnuplot> object.
(df plot forms
  (let ((linestyles (new GnuplotLinestyles))
        (gp (new Gnuplot 'interactive ())) )
    (let ((g (eval `(plot-graph ,@forms))))
      (==> gp do-graph g) )
    gp))


(in-namespace gnuplot-plot-

(defun process-line-args (extra data)
  (list (apply concat (domapcar ((x extra))
                        (cond
                         ((stringp x) x)
                         
                         ((and (consp x) (= (car x) 'pointsize))
                          (let ((ps (cadr x)))
                            (when (<> (length data) (length ps))
                              (error "length of pointsize vector does not match length of data" ps) )
                            (setq data (mat-catrows data ($> ps))) )
                          "pointsize variable")
                         
                         ((and (consp x) (= (car x) 'linecolor))
                          (let ((rgbs (cadr x)))
                            (when (<> (length data) (length rgbs))
                              (error "length of linecolor matrix does not match length of data" rgbs) )
                            (let ((lcc ##(idx-select data 1 0)))
                              ;; translate into gnuplot's data format
                              (idx-bloop ((rgb rgbs) (lc lcc))
                                (lc (+ (* 65536 (rgb 2)) (* 256 (rgb 1)) (rgb 0))) )
                              (setq data (mat-catrows data ($> lcc))) ))
                          "lc rgb variable")
                         
                         (t (error "invalid plot-line argument" x)) )))
        data))

#? ** Plot-line generating functions 

#? (boxes <data> [<key> ...])
;; Plot data with boxes.
(def-plot boxes (2 3))


#? (circles <data> [<key> ...])
;; Plot data with circles.
(def-plot circles (3))


#? (dots <data> [<key> ...])
;; Plot data with dots.
(def-plot dots (1 2))


#? (lines <data> [<key> ...])
;; Plot data with lines.
(def-plot lines (1 2))


#? (linespoints <data> [<key> ...])
;; Plot data with lines and points.
(def-plot linespoints (1 2))


#? (xerrorbars <data> [<key> ...])
;; Plot data with dots and x-error bars.
(def-plot xerrorbars (3 4))


#? (yerrorbars <data> [<key> ...])
;; Plot data with dots and y-error bars.
(def-plot yerrorbars (3 4))


#? (xyerrorbars <data> [<key> ...])
;; Plot data with dots and x/y-error bars.
(def-plot xyerrorbars (4 6))


#? ** Plot-line modifiers
;; The functions in this category modify an individual plot line and
;; may appear as optional argument in a plot-line generating function.
;;
;; Example:
;; {<code> (linespoints xy "temperature" (axes 'x1y2) (pointsize p)))

#? (axes <a>)
;; Select axes for which the plot-line should be scaled.
(defun axes (arg)
  (if (member arg '(x1y1 x1y2 x2y1 x2y2))
      (sprintf "axes %l" arg)
    (error "invalid axes argument" arg) ))

#? (pointsize <ps>)
;; Make point size variable and use the relative sizes in <ps> to
;; scale the line points (<ps> is a vector with same length as <data>).
(defun pointsize (arg)
  ;; more processing is done in process-line-args
  (when (not (vectorp arg))
    (error "invalid argument (not a vector)" arg) )
  `(pointsize ,arg) )

#? (linecolor <lc>)
;; Make line color variable and use the rgb triplets in <lc> for color
;; per data point (<lc> is a <n>x<3> matrix with same length as <data>).
(defun linecolor (arg)
  ;; more processing is done in process-line-args
  (when (not (and (numeric arg) (= (rank arg) 2) (= (shape arg 1) 3)))
    (error "invalid argument (not a <n>x<3> matrix" arg) )
  `(linecolor ,arg) )

(import all from gnuplot-other-)

) ; namespace plot-


;; -plot method for some builtin types

(defmethod |STRING| -plot ()
  (==> graph add-preamble this) )

(defmethod |INDEX| -plot ()
  (selectq (rank this)
    (1 (line this))
    (2 (if (= (shape this 1) 2)
           (line this)
         (error "don't know how to plot" this) ))
    (t (error "don't know how to plot" this)) ))

     

