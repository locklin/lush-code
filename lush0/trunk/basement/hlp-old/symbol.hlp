$Id: symbol.hlp,v 0.1.1.1 2001-10-31 17:32:01 profshadoko Exp $
#? *** Symbols.

Symbols are the only named objects. Symbol names may be up to 40
characters long.

The evaluation of a symbol returns the ``value'' of the symbol.
Function <setq> changes the value of a symbol. The value of a new
symbol is always the empty list.

During a call to a Lush function, or during the execution of certain
special functions (e.g. function <let>) predefined symbols take a
temporary value. The previous values are then restored when the
function exits.

For instance, assume that we define a function <(de sqr(x) (* x x))>.
Evaluating list <(sqr 4)> will perform the following actions:
.IP
save the old values of symbol <x> which is the name of 
a function argument,
.IP
set the value of symbol <x> to <4>,
.IP
execute the function body <(* x x)> and save the result,
.IP
restore the previous value of symbol <x>,
.IP
and return the saved result.
.PP
This dynamical binding makes the interpreter getting faster, but
somewhat precludes the development of efficient compilers.

The textual representation of a symbol is composed by the characters
of its name. Symbol names are always converted to lower-case
characters, except when they are surrounded by vertical bars ``|''.
Such vertical bars are useful for defining symbols whose name contains
any character usually forbidden: parenthesis, spaces, semi- colon,
macro-characters, upper-case characters etc....

Examples :
.VP
  gasp GasP         ; are the same symbol named "gasp"
  |GasP|            ; is different symbol named "GasP"
  |);( '|           ; is a symbol named ");( '"
  "gasp"            ; is a string
  12                ; is a number
  |12|              ; is a symbol named "12"
.PP

Unlike several dialect of lisp, Lush does not provide other fields in
a symbol for storing a specific functional value or a property list.
The value of a symbol is the only storage provided by symbols.



#? (setq <v1> <a1> ... [<vn> <an>])	
Sets the value of symbols <v1>...<vn> to <a1>...<an>.

The <setq> function has a special behavior when the <vi> are not
symbols. This behavior is documented later, with the scope function.

Example:
.VP
? (setq a 3)
= 3
? (setq b 6)
= 6
? a b
= 3
= 6
? (setq a b b a)
= 3
? a b
= 6
= 3
.PP


#? (set <v> <a>)	
Sets the value of the symbol <v> to <a>. 
set is different from setq because <v> is evaluated first.

Example:
.VP
? (setq s 'a)
= a
? (set s 3)
= 3
? s
= a
? a
= 3
.PP

#? (incr <v> [<n>])	
Increments <v> by <n> (default 1). <v> is not evaluated, and must be a
symbol whose value is a number. Number <n> may be a positive or
negative.

Example:
.VP
? (setq s 0)
= 0
? (incr s)
= 1
? s
= 1
.PP

#? (named <s>)	
Returns a new symbol whose name is the string <s>.

Example:
.EX (named "a")

#? (lock-symbol <s1> ... <sn>)	
Locks symbols <s1> to <sn>.  Symbols may be locked. You can no longer
change the value of locked symbols, but you may still modify them
temporarily by using the let function. Some Lush functions and all C
functions are stored in locked symbols. This avoids the accidental
loss of a C function.


#? (unlock-symbol <s1> ... <sn>)
Unlocks symbols <s1> to <sn>.

#? (symblist)	
Returns the list of all the symbol names: i. e. a list of strings.

Example:
.EX (length (symblist))

#? (oblist)	
Returns the list of all the symbols: i. e. a list of symbols.

Example:
.EX (length (oblist))

#? (macrochp <s>)	
Returns <t> if <s> symbol defines a macro-character.

Example:
.EX (macrochp '|'|)


#? (constant <name> <val>)
.FILE miscenv.lsh
This function is similar to <setq> except it locks the symbol <name>.
.PP

#? (swap <s1> <s2>)
.FILE miscenv.lsh
Obsolete function for swapping the value of two symbols <s1> and <s2>.
You may use <(setq <s1> <s2> <s2> <s1>)> instead.

#? (putp <s> <v> <p>)
.SEE (assoc <key> <alist>)
.SEE Hashtables.
Obsolete function for managing associative lists.
We recommend using function <assoc> or using hash tables.

This function provides a simple substitute for property lists. It acts
like the usual <putprop> function, except that the property lists are
stored as symbol values.

#? (getp <s> <p>)	
.SEE (assoc <key> <alist>)
.SEE Hashtables.
Obsolete function for managing associative lists.

This function provides a simple substitute for property lists. It acts
like the usual <getprop> functions, except that property
lists are stored as symbol values.

