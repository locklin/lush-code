
#? hash
;; Hash table facility. Each element of the table contains
;; a key and a content. The key and content may be constrained
;; to certain types.
;;.SEE (make_hash_table <size> [<key-type> <content-type>])
;;.SEE (hash-table-p <object>)
;;.SEE (gethash <key> <hash-table> &optional <default>)
;;.SEE (sethash <key> <hash-table> <value>)
;;.SEE (hash-loop (<key-var> <content-var> <hash-table>) <body>)
;;.SEE (hashf <object> [<size>])
;;.SEE (str-hashf <string> [<size>])

#? (hashf <object> [<size>])
;; Computes a hash code (a non-negative integral number) for <object>.
;; i.e. if (= x y) then (= (hashf x)(hashf y)). If <size> is provided,
;; the result is modulo <size>.
;;.SEE hash

#? (str-hashf <string> [<size>])
;; Computes a hash code (a non-negative integral number) for <string>.
;; i.e. if (= x y) then (= (hashf x)(hashf y)). If <size> is provided,
;; the result is modulo <size>.
;;.SEE hash
 
#? (make_hash_table <size> [<key-type> <content-type>])
;; Makes a hash-table object. <size> is the size of the table.
;; For the key and content types, () means no constraints; 'int and 'string mean
;; a constraint to numbers (cast to INT internally), or strings, respectively.
;;.SEE hash

#? (hash-table-p <object>)
;; True if and only if <object> is a hash-table object.
;;.SEE hash

#? (gethash <key> <hash-table> &optional <default>)
;; Return the entry whose key is <key> in <hash-table>. Returns <default>
;; if not found (which is nil by default).
;;.SEE hash

#? (sethash <key> <hash-table> <value>)
;; Sets entry whose key is <key> to <value> in <hash-table>.
;;.SEE hash

;#? (remhash <key> <hash-table>)
;; Removes entry whose key is <key> in <hash-table>.
;;.SEE hash

;#? (clrhash <hash-table)
;; Clears all the entries in <hash-table>.
;;.SEE hash

;#? (hash-table-count <hash-table>)
;; Returns the number of entries in the <hash-table>.
;;.SEE hash

#? (hash-loop (<key-var> <content-var> <hash-table>) <body>)
;; Iterate over the elements of the <hash-table>, executing <body>
;; for each of them, with <key-var> and <content-var> bound to 
;; the key and content of each entry within the <body>.
;;.SEE hash

