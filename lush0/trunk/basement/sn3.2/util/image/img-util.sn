#? File "img-util"
;; basic macros and functions to manipulate
;; dimensions and internal formats of images

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; internal format conversions

#? (rgbaim2rgbafim <in>)
;; convert RGBA image of ubytes into RGBA image of floats.
(de rgbaim2rgbafim (in)
    ((-idx3- (-ubyte-)) in)
    (let ((rez (matrix-nc (idx-dim in 0) (idx-dim in 1) (idx-dim in 2))))
      (idx-copy in rez)))

#? (rgbafim2rgbaim <in>)
;; convert RGBA image of floats into RGBA image of ubytes.
(de rgbafim2rgbaim (in)
    ((-idx3- (-flt-)) in)
    (let ((rez (ubyte-matrix-nc (idx-dim in 0) (idx-dim in 1) (idx-dim in 2))))
      (idx-copy in rez)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; dynamic resizing

(dm anyim-resize(f out-im sz)
    '(when (or
           (< (idx-dim `out-im 0) ncol)
           (< (idx-dim `out-im 1) nlin)
           )
      (idx-u3resize `out-im nlin ncol `sz)
      ))

(dm ubim-resize(f out-im)
    '(when (or
           (< (idx-dim `out-im 0) ncol)
           (< (idx-dim `out-im 1) nlin)
           )
      (idx-u2resize `out-im nlin ncol)
      ))



(dm rgba-resize(f out-im)
    '(when (or
           (< (idx-dim `out-im 0) ncol)
           (< (idx-dim `out-im 1) nlin)
           )
      (idx-u3resize `out-im nlin ncol 4)
      ))

(dm rgb-resize(f out-im)
    '(when (or
           (< (idx-dim `out-im 0) ncol)
           (< (idx-dim `out-im 1) nlin)
           )
      (idx-u3resize `out-im nlin ncol 3)
      ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#? img-dim-C
;; class that holds the two dimensions of an image
;; d0: height
;; d1: width
(defclass img-dim-C object
  ((-int-) d0 d1))

(defmethod img-dim-C img-dim-C (ad0 ad1)
  ((-int-) ad0 ad1)
  (setq d0  ad0 )
  (setq d1  ad1 ))

#? (equal-dim <dimA> <dimB>)
;;.VP
;; ((-obj- (img-dim-C)) dimA dimB):
;;
;; CREATED: Oct 97
;; DESCRIPTION:
;; t if dimA and dimB are equal
(de equal-dim(dimA dimB)
    ((-obj- (img-dim-C)) dimA dimB)
    (and (= :dimA:d0 :dimB:d0)
         (= :dimA:d1 :dimB:d1)))

#? (align-dimensions <img-dim> <align-block>)
;;.VP
;; ((-obj- (img-dim-C)) img-dim):
;; (-int- align-block):
;;
;; CREATED: Oct 97
;; DESCRIPTION:
;; return new dimension object
;; - dimensions larger than img-dim
;; - multiple of align-block
(de align-dimensions (img-dim align-block)
    ((-obj- (img-dim-C)) img-dim)
    (-int- align-block)
    (new img-dim-C
         (* align-block (1+ (div (1- :img-dim:d0) align-block)))
         (* align-block (1+ (div (1- :img-dim:d1) align-block)))))

________________________________________________________________

(dhc-make () 
          rgbaim2rgbafim rgbafim2rgbaim
          (img-dim-C img-dim-C) 
          equal-dim align-dimensions)
