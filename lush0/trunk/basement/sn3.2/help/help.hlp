#? ---- HELP ----
This is the help system.
You can enter the help system by typing:
.VP
    ^A<keyword>
.PP
You are then offered a list of matching topics. 
Each topic can be selected by its number. 
Help information then is displayed.

When you select a topic, a list of related topics
sometimes is added to the matching list. You can
then select either one of the related topics, or
any previously selected topics.


.SEE Adding Help.
.SEE Environment.
.SEE Lists.
.SEE Predicates.
.SEE Booleans Operators.
.SEE Symbols.
.SEE Control structures.
.SEE Functions.
.SEE Numbers.
.SEE Strings.
.SEE Input / Output.
.SEE Miscellaneous.
.SEE Objects.
.SEE Graphics.

#? Environment.
.SEE Startup.
.SEE Interruptions.
.SEE Errors.
.SEE Leaving.
.SEE Memory Management.

#? Startup.

At startup time, TLisp scans its search path for the file
``sysenv.sn'' in its search path. The initial path includes the the
current directory and a library directory specified by an environment
variable ( <SNDIR> for SN2 and SN2.2, <SN25DIR> for SN2.5, <SN26DIR>
for SN2.6, etc... ).  If the adequate environment variable is not
defined, a compile time default is assumed.

TLisp looks then for the files given as arguments when you have called
it. If no argument is provided, it searches for the file
``stdenv.sn'', which loads the default libraries for this TLisp based
program.

Example: Starting SN
.VP
% sn2.6att

SN2.6ATT = SN2.5 + ATT Extensions + Bernhardt's RPC + Patrice's Speedup
based on SN, (C) Copyright L. Bottou & Y. Le Cun 87,88,89,90
with AT&T extensions, (C) Copyright AT&T 89,91
Version 'sn2.6att'

... loading system file "/home/leonb/sn2.6/lib/sysenv.sn".
... loading file "/home/leonb/sn2.6/lib/stdenv.sn".
 [netenv]
 [special-connect]
 [graphenv]
 [attenv]

?  
.PP 
TLisp then calls the <toplevel> function, which is currently
defined in TLisp language by the ``sysenv.sn'' file. This function
sets up some debugging code, and waits for user commands.

The toplevel function continuously prints a question mark prompt,
reads a list, evaluates it, then prints the result on the standard
output. This process is repeated until you enter an end of file
character. The global variable result always contains the last result
printed by toplevel.

If the outermost list has not been completed when you enter a carriage
return, toplevel prompts you for rest of the list, by displaying a few
spaces instead of displaying a question mark prompt.


#? Errors.
.SEE Interruptions.
.SEE (on-error <p> <l_1> ... <l_n>)
.SEE (print-error)
.SEE (debug-hook)

The evaluation of the lists sometimes leads to an error.  When an
error occurs, TLisp then executes the <debug-hook> function, which
typically has been set up by the <toplevel> function.

This function prints an error message, followed by the top elements of
the evaluation stack (i.e. the list whose evaluation has caused the
error, the list whose evaluation has caused the evaluation of the list
that causes the error, etc... ), and prompts you for a ``Debug
toplevel''.

If you answer <n>, or simply type a carriage return, TLisp aborts any
current evaluation, resets the stack, and restarts the toplevel
function.
	
If you answer <y>, a ``[Debug] ?''  prompt is displayed, and you are
able to examine the current variables, examine the current evaluation
task with the <where> function, and perform any useful debugging
tasks.  You can leave this debugging toplevel by entering a <Ctrl-D>
character, or using the function <exit>.

#? Interruptions.
.SEE Errors.
.SEE (on-break <p> <l_1> ... <l_n>)
.SEE (print-error)
.SEE (break-hook)

TLisp can be interrupted at any time by typing <Ctrl-C>. 
Such interruptions are somewhat handled like errors.

First, TLisp runs the <break-hook> function which typically has been
set up by the <toplevel> function.

This function prints an error message, and prompts you for a "Break
toplevel", which is basically a special kind of debug toplevel.

When you leave the break toplevel by entering an <Ctrl-D> character or
by using the <exit> function, you get a chance to resume the execution
at the interruption point.

Example: 
.VP
? (for (i 1 100)
     (for (j 1 100)
        (if (= i j) (print (* i j))))))
1
4
^C9

*** Break
** in:   (if (= i j) (print (* i j)))
** from: (for (j 1 100) (if (= i j) (print (* i j))))
** from: (for (i 1 100) (for (j 1 100) (if (= i j) (print (* i j))))) ...
** from: (load "$stdin" "$stdout")
** from: (let ((break-hook (lambda () (beep) (if (not (ask "Break top ...
Break toplevel [y/n] ?y
[Break] ? i
= 3
[Break] ? j
= 4
[Break] ? (* i j)
= 12
[Break] ? (where)
Current eval stack:
** in:   (where)
** from: (load "$stdin" "$stdout" "[Break] ? ")
** from: (if (not (ask "Break toplevel")) (error "Stopped") (load "$s ...
** from: (if (= i j) (print (* i j)))
** from: (for (j 1 100) (if (= i j) (print (* i j))))
** from: (for (i 1 100) (for (j 1 100) (if (= i j) (print (* i j))))) ...
** from: (load "$stdin" "$stdout")
** from: (let ((break-hook (lambda () (beep) (if (not (ask "Break top ...
= ()
[Break] ? (exit)
= ()

Resume execution [y/n] ?y
Resuming execution
16
25
36
49
64....
.PP
Break toplevels and debug toplevels cannot be nested. If an error or
an interruption occurs when you are working in a break or debug
toplevel, TLisp will clean up the evaluation stack, and restart the
toplevel function.

On Unix systems, TLisp may also be inconditionnally interrupted by
typing <Ctrl-\>. This method however may leave TLisp with inconsistent
internal states. Use it only when <Ctrl-C> does not work for some
reason.


#? Leaving.  For leaving TLisp, you have just to type an
<Ctrl-D>character or use the <exit> function. You have to answer <y>
to the the confirmation question.  

Example: 
.VP
? (exit)
= ()

Really quit [y/n] ?y 
Bye
%
.PP

#? Memory Management.  

Under normal use, SNLisp uses a fast reference counting garbage
collector. Cells are allocated and deallocated on the fly. Each cell
has a counter which contains the number of pointers that can access
it, when the counter is equal to 0, the cell is free; when it is
greater than 0, the cell is left for later use. This counter is
currently limited to 65535 references.  The free cells are linked in a
free list.  Careful use of these counters and of the free list allow
the current TLisp to be two to three times faster than the previous
versions. You will probably notice the lack of bothersome pauses while
the garbage collector takes effect.

If an error occurs, these counters are no longer right, and a
classical garbage collector rebuilds the free-list and recomputes the
counter values.  Cells are allocated in the core memory by chunks.
Once all allocated cells are used, TLisp gets a new chunk from the
system, and appends them in its free-list. This allocation scheme is
used by all objects in TLisp.


