
#? Input / Output.
.SEE Input.
.SEE Output.
.SEE Files.

#? Output.
.SEE (prin <l_1> ... <l_n>)
.SEE (print <l_1> ... <l_n>)
.SEE (pprin <l_1> ... <l_n>)
.SEE (pprint <l_1> ... <l_n>)
.SEE (save <f> <s_1> ... <s_n>)
.SEE (write-binary <file> <l_1> <l_n>)
.SEE (printf  <format> ... <args> ... )
.SEE (tab  [<n>])
.SEE (flush [<f>])

#? Input.
.SEE (read)
.SEE (read-binary <file>)
.SEE (load  <in> [<out> [<prompt1> [<prompt2>]]])
.SEE (read-string [<spec>])
.SEE (skip-char [<spec>])
.SEE (flush [<f>])
.SEE (ask <s>)


#? Files.
.SEE (path  <s_1>...<s_n>)
.SEE (addpath <s>)
.SEE (load  <in> [<out> [<prompt1> [<prompt2>]]])
.SEE (expand-filename <filename_1> [<filename_2>])
.SEE (open-read <s> [<suffix>])
.SEE (open-write <s> [<suffix>])
.SEE (open-append <s> [<suffix>])
.SEE (writing <f> <l_1> ... <l_n>)
.SEE (reading <f> <l_1>... <l_n>)
.SEE (filter <cmd> <fin> <fout>)
.SEE (pipe <fin> <fout>)
.SEE (socketopen <host> <port> <fin> <fout>)
.SEE (remoteopen <host> <cmd> <fin> <fout>)
.SEE (fcopy <fin> <fout>)
.SEE (script  [<s>])
.SEE (read8 <f>)
.SEE (write8 <f> <b>)
.SEE (flush [<f>])

#? (prin <l_1> ... <l_n>)
Prints the evaluations of <l_1> to <l_n> separated by spaces.  Unlike
<print>, the function <prin> does not terminates the line with a
linefeed.  Returns the result of the last evaluation.  
.SEE (print <l_1> ... <l_n>)

#? (print <l_1> ... <l_n>)
Prints the evaluations of <l_1> to <l_n>separated by spaces. 
<print> terminates the line with a linefeed.
Returns the result of the last evaluation.

Example:
.EX (print "hello" (+ 3 4) '(a b c d))
"hello" 7 ( a b c d )

#? (pprin <l_1> ... <l_n>)
.SEE (pprint <l_1> ... <l_n>)
.TYPE DE
.FILE sysenv.sn

Prints the evaluations of <l_1> to <l_n> with a nice indentation.  The
indentation is defined according many heuristics suitable for printing
nicely function definitions. Unlike <pprint>, <pprin> does not
terminates the line with a linefeed.

#? (pprint <l_1> ... <l_n>)
.TYPE DE
.FILE sysenv.sn
Prints the evaluations of <l_1> to <l_n> with a nice indentation.  The
indentation is defined according many heuristics suitable for printing
nicely function definitions. <pprint> terminates the line
with a linefeed.

Although the current implementation of <pretty> is a more complicated, a
simple implementation of <pretty> would be :
.VP
 (df pretty(f) (pprint (funcdef f)))
.PP

#? (printf  <format> ... <args> ... )
This function is similar to the <printf> function in C language. 
String <format> will be printed as is, except for the following escape sequences, 
which refer to <args>.
.IP ``%%''
is replaced by a single \%.
.IP ``%l''
is replaced by a representation of a lisp object.
.IP ``%[-][<n>]s''
is replaced by a string, right justified in a field of length <n>
if <n> is specified.  When the optional minus sign is present,
the string is left justified.
.IP ``%[-][<n>]d''
is replaced by an integer, right justified in a field of <n>
characters, if <n> is specified.  When the optional minus sign is
present, the string is left justified.
.IP ``%[-][<n>]x''
is replaced by an hexadecimal integer, right justified in a field of <n>
characters, if <n> is specified.  When the optional minus sign is
present, the string is left justified.
.IP ``%[-][<n>[.<m>]]<c>''
where <c> is one of the characters <e>, <f> or <g>, is replaced by a
floating point number in a <n> character field, with <m> digits after
the decimal point. <e> specifies a format with an exponent, <f>
specifies a format without an exponent, and <g> uses whichever format
is more compact.  When the optional minus sign is present, the string
is left justified.
.PP
Example:
.EX (printf "%5s%3d is equal to %6.3f\n" "sqrt" 2 (sqrt 2))

#? (tab  [<n>])
When <n> is given, <tab> outputs blanks until the <n>th column on 
the current line. Returns the current position.


#? (write-binary <file> <l_1> <l_n>)
.SEE (read-binary <file>)
.SEE (open-write <s> [<suffix>])
.SEE (open-append <s> [<suffix>])
.SEE (to-ascii <f_1> <f_2>)
.SEE (to-binary <f_1> <f_2>)
Writes lisp objects <l_1> to <l_n> into <file>, under Bernhardt
Boser's binary format.  Argument <file> may be a filename or a file
descriptor obtained by <open-write> or <open-append>.

#? (to-binary <f_1> <f_2>)
.TYPE DE
.FILE sysenv.sn
.SEE (write-binary <file> <l_1> <l_n>)
.SEE (to-ascii <f_1> <f_2>)
Converts a TLisp source file <f_1> into a Bernhardt Boser's binary
file <f_2>. This compilation process does not produce smaller files or
provide faster execution. The loading time however is significantly
reduced.


#? (read) 
Calls the Lisp reader, and returns the next list or Lisp object
available on the current input. <read> is able to read both
text and binary TLisp files.

TLisp input is composed of words separated by blanks (space, tab
linefeed) by parentheses, or macro-characters. Any character between a
``;'' and an end-of-line is considered as a comment and ignored by the
interpreter.

When the reader reaches a left parenthesis, it starts reading a list,
until it reaches a right parenthesis.  When the TLisp reader reaches a
macro-character, it executes immediately the DMC function associated
with it. This function often calls the Lisp reader itself.
.IP
A numerical word (e.g. <234>, <+23.34E-2>, <0x1ffc2>) is interpreted as 
a number.
.IP
Words surrounded by double quotes (e.g. <"hello folks">) are considered 
as strings.  
.IP
All other inputs are interpreted as symbol names.

#? (read-binary <file>)
.SEE (write-binary <file> <l_1> <l_n>)
.SEE (open-read <s> [<suffix>])
.SEE (read)
.SEE (to-ascii <f_1> <f_2>)
.SEE (to-binary <f_1> <f_2>)
Reads a lisp object from the binary file <file>. This function reads
files written with Bernhardt Boser's binary format.  Argument <file>
may be a filename or a file descriptor obtained by <open-write> or
<open-append>.

The usual <read> function may also be used for reading binary files.

#? (read-binary <rtable>)
.SEE (read-binary <file>)
.SEE (remote <fin> <fout> [<rtable>])
.SEE Remote.
This form of the <read-binary> function reads binary objects
over a connection <rtable> to the remote process. It uses the 
<rtable> information for handling references to remote objects
and assigning them the correct remote class.

This function is mostly used for debugging purposes. Communication
with remote processes usually is automatically handled by the 
remote classes.

#? (to-ascii <f_1> <f_2>)
.TYPE DE
.FILE sysenv.sn
.SEE (read-binary <file>)
.SEE (to-binary <f_1> <f_2>)
Converts a Bernhardt Boser's binary file <f_1> into a TLisp source
file <f_2>. 

#? (read-string [<spec>])
.SEE (skip-char [<spec>])
.SEE (flush [<f>])
Reads a string on the current input. <spec> may be the number of
characters to read, or a string specifying which characters are to be
read. 

<spec> strings define the characters to be read. For example, <"0-9">
matches any number, <"~0-9"> matches anything but a number, 
<"~\t\n\r\f\e"> anything but a blank character or end of file, <"yYnN">
reads only one of these characters.

The default <spec> for read-string is "~\n\r\f\e" and means ``read
anything until the end of line''.

#? (skip-char [<spec>])
.SEE (read-string [<spec>])
.SEE (flush [<f>])
Skips the characters matching spec, then returns the next available
character.  Default <spec> is " \t\n\r\f" and means ``skip any blank
characters''.

Example:
.VP
 ;;; This function reads the input stream and builds a list
 ;;; with each line, until it reaches an end-of-file character
 
 (de read-lines()
  (let ((ans ()))
   (while (<> (skip-char "\n\r\f") "\e")
    (setq ans (nconc1 ans (read-string))) ) ) )

 ;;; This function reads the input stream and builds a list
 ;;; with each word, until it reaches an end-of-file character
 
 (de read-words()
  (let ((ans ()))
   (while (<> (skip-char) "\e")
     (setq ans (nconc1 ans (read-string "~ \t\n\r\f\e"))) ) ) )
.PP

#? (flush [<f>])
Flushes the file descriptor <f>.

When no arguments are provided, both the current input and current
output are flushed: All characters pending on the current input are
removed until a newline is encountered, all characters buffered on the
current output are printed out.

Example:
.VP
 ;;; This function ask a question and returns a string.
 (de input(question)
	(printf "%s" question)
	(flush)
	(read-string) )
.PP

#? (ask  <s>)
Prints the string <s> on the console and waits for a yes or no answer,
regardless of any current input- and output-files. <ask> is used, for
example, when you leave TLisp.

#? (path  <s_1>...<s_n>)
.SEE (addpath <s>)
When TLisp is looking for a file, it searches for it among a list of
directories. The function path allows you to get and set this list.
Without arguments, <path> returns the current path. Otherwise, the
strings <s_1> to <s_n> become the current path.  

The initial path is implementation dependent. On Unix systems, it is
usually given by the SN26DIR environment variable. If this variable
doesn't exist, a default value is assumed.

.EX (progn (printf "--> The current path is:\n") (path))

#? (addpath <s>)
.TYPE DE
.FILE sysenv.sn
.SEE (path  <s_1>...<s_n>)
The function <addpath> adds the directory <s> to the file search path.
Directory <s> is added at the head of the search path. Other occurrences
of this directory in the path are removed, in order to keep the search path
small and non redundant.

Example:
.VP
? (addpath (concat (getenv "HOME") "/mysnlib"))
.PP

#? ^L <filename>
.SEE (load  <in> [<out> [<prompt1> [<prompt2>]]])
Macro-character for function <load>.

#? (load  <in> [<out> [<prompt1> [<prompt2>]]])
.TYPE DMC
.FILE sysenv.sn
.SEE file-being-loaded
.SEE (open-write <s> [<suffix>])
.SEE (open-read <s> [<suffix>])
.SEE (autoload <f> <s_1> ... <s_n>)
.SEE ^L <filename>
This function is used for loading an TLisp source or binary file. This
function starts a new toplevel with in as input file, and out as the
output file. <load> adds the suffix ``.sn'' to the filename in if
needed.  

The <in> and <out> filenames follow the general filename conventions
explained in the <open-read> and <open-write> functions description.
If no <out> filename is given, this new toplevel will not display the
evaluation results, unless explicit print function are called. 

If a <prompt1> string is given, <load> uses it as a prompt string when
it is waiting for a new list.  If a <prompt2> string is given, <load>
uses it as a prompt string when it is waiting for additional lines.

<load> always returns the full filename of the file just read.

#? file-being-loaded
.SEE (load  <in> [<out> [<prompt1> [<prompt2>]]])
During a <load>, this variable is set to the name of the file being 
loaded.

#? (save <f> <s_1> ... <s_n>)
.TYPE DM
.FILE sysenv.sn
.SEE (load  <in> [<out> [<prompt1> [<prompt2>]]])
This function just saves indented definitions of the symbols <s_1> to
<s_n>, into the file named <f>. A suffix ``.sn'' is automatically
added to <_f> if it has no suffix and does not end with a dot.

This function allows for saving functions definitions into a file.
These definition then may be loaded using the <load> function.

#? (autoload <f> <s_1> ... <s_n>)
.TYPE DM
.FILE sysenv.sn
Defines functions <s_1> to <s_n> with a code that first loads file
<f>, and then restart the evaluation.  

The first time one of these functions is called, its definition is
loaded from file <f>, and the execution continues.  Such autoloading
functions often are defined by ``stdenv.sn''. They avoid loading many
files, but allow the user to call those functions at any time.

#? (script  [<s>])
Creates a file named <s> and records all the input/output operations
on that file. The suffix ``.script'' is added to the name <s>. This
function is handy for keeping a trace of the TLisp session. If it is
called without an argument, it closes the current script file.


#? (expand-filename [<filename_1>] <filename_2>)

Returns an absolute filename equivalent to <filename_2> parsed from
current directory <filename_1>.  Argument <filename_1> defaults to the
current directory.

If the resulting filename refers to a directory, a directory separator
</> is appended to the returned filename.

Example:
.EX (expand-filename "..")
.EX (expand-filename "~/myfile.sn")

#? (open-read <s> [<suffix>])
This function returns a read file descriptor of the file named <s>.
If string <suffix> is provided, it is possibly concatenated to the
file name.  If the functions fails, it retuirns the empty list.

The file descriptor is closed when the garbage collector detects that
the file is no longer necessary. So you usually don't need to worry
about closing the file, unless you store it in a global variable. File
descriptors however can be manually closed with the <delete> function.

Filenames have the following form:
.IP
A legal OS filename will be searched along the current path.
.IP
<"$stdin"> stands for the TLisp standard input.
.IP
On Unix systems, <"| shell command"> may be used to open a pipe to
another process.
.PP


#? (open-write <s> [<suffix>])
This function returns a write file descriptor of the file named <s>.
If string <suffix> is provided, it is possibly concatenated to the
file name.  If the functions fails, it retuirns the empty list.

The file descriptor is closed when the garbage collector detects that
the file is no longer necessary. So you usually don't need to worry
about closing the file, unless you store it in a global variable. File
descriptors however can be manually closed with the <delete> function.

Filenames have the following form:
.IP
A legal OS filename.
.IP
<"$stdout"> stands for the TLisp standard output stream.
.IP
<"$stderr"> stands for the TLisp standard error stream.
.IP
On Unix systems, <"| shell command"> may be used to open a pipe to
another process.
.PP

#? (open-append <s> [<suffix>])
.SEE (open-write <s> [<suffix>])
This function returns a ``append'' file descriptor of the file named
<s>.  All output on this file descriptor shall be appended to the
file.  If string <suffix> is provided, it is possibly concatenated to
the file name.  If the functions fails, it retuirns the empty list.


#? (filteropen <cmd> <fin> <fout>)
.SEE (filter <cmd> <fin> <fout>)
An old-fashioned synonym for <filter>.

#? (filter <cmd> <fin> <fout>)
.SEE (pipe <fin> <fout>)
.SEE (remote <fin> <fout> [<rtable>])
.SEE (socketopen <host> <port> <fin> <fout>)
.SEE (remoteopen <host> <cmd> <fin> <fout>)
On Unix systems only, this function runs the shell command <cmd> in the
background, and stores a file descriptor to its standard input into
symbol <fin> and a file descriptor to its standard output into symbol
<fout>.

This commands allows for launching another program, sending commands
and receiving the results. Some care is needed to avoid deadlocks.

Arguments <fin> and <fout> are evaluated: Symbols must be quoted.


#? (pipe <fin> <fout>)
.SEE (filter <cmd> <fin> <fout>)
On Unix systems only, this function creates to connected file
descriptors. Everything written on the file descriptor stored into
symbol <fin> can be read on the file descriptor stored into symbol
<fout>.

Because the pipe buffers are limited, writing too much data to <fin>
(more than 4096 bytes) may result in a deadlock.

Arguments <fin> and <fout> are evaluated: Symbols must be quoted.


#? (socketopen <host> <port> <fin> <fout>)
.SEE (filter <cmd> <fin> <fout>)
.SEE (remoteopen <host> <cmd> <fin> <fout>)
.SEE (remote <fin> <fout> [<rtable>])

This function is present only when sn2.6 has been compiled with the
-DSOCK option. It connects a server process listening on port number <port>
on the remote computer named <host>. 

Two files descriptors are created, for writing to or reading from the
TCP socket connection. These file descriptors are stored in symbols
<fin> and <fout>.

Example: We assume port 13 is the daytime service. (cf. /etc/service)
.EX (let ((fi ())(fo ())) (socketopen "localhost" 13 'fi 'fo) (reading fi (read-string)))


#? (remoteopen <host> <cmd> <fin> <fout>)
.SEE (filter <cmd> <fin> <fout>)
.SEE (socketopen <host> <port> <fin> <fout>)
.SEE (remote <fin> <fout> [<rtable>])

This function is present only when sn2.6 has been compiled with the
-DSOCK option. It launchs command <cmd> on the remote computer <host>.
During this operation, the user is prompted for a password.

Two files descriptors are created, connected to the standard input and
standard output of the command. The standard error is redirected on
the console. These file descriptors are stored in symbols <fin> and
<fout>.

Example:
.VP
? (remoteopen "stuart" "uptime" 'fi 'fo)
Password (stuart:leonb):
= (::FILE_WO:75978 . ::FILE_RO:75964)
? (reading fi (read-string)))
= "  4:12pm  up 12 days, 23:40,  6 users,  load average: 0.03, 0.00, 0.00"

#? (fcopy <fin> <fout>)
.SEE (open-write <s> [<suffix>])
.SEE (open-read <s> [<suffix>])
This function copies file <fin> to <fout>.  Arguments <fin> and <fout>
may be filename of file descriptors returned by <open-read> or
<open-write>.


#? (writing <f> <l_1> ... <l_n>)
.SEE (reading <f> <l_1>... <l_n>)
.SEE (open-write <s> [<suffix>])
.SEE (open-append <s> [<suffix>])
Calls <progn> on <l_1> to <l_n>, while redirecting the current output
to <f>. Argument <f> may be a filename or a file descriptor obtained 
by <open-write> or <open-append>.
append file descriptor.

#? (reading <f> <l_1>... <l_n>)
.SEE (writing <f> <l_1>... <l_n>)
.SEE (open-read <s> [<suffix>])
Calls <progn> on <l_1> to <l_n>, while redirecting the current input to
<f>.  Argument <f> may be a filename or a read file descriptor
obtained by <open-read>.

Example:
.VP
 ;;; this function returns the list of the files in directory s
 (de directory(s)
	(let ((ans ()))
		(reading (concat "|/bin/ls " s)
			(while (<> (skip-char) "\e")
				(setq ans (nconc1 ans (read-string))) ) )
		ans ) )
.PP

#? (read8 <f>)
.SEE (write8 <f> <b>)
Reads a byte on file descriptor <f>. 
This function returns a number in the 0...255 range.

#? (write8 <f> <b>)
.SEE (flush [<f>])
.SEE (read8 <f>)
Writes a byte <b> on file descriptor <f>. Argument <b> must be a
number in the 0...255 range. This function does not flush the file <f>.
The function <flush> must be used in order to write out all remaining
data.

