#? *** Matrices, Vectors, Tensors, Indexes and IDX

Lush has a powerful mechanism for manipulating
tabular data such as scalars, vectors, matrices,
and tensors up to 8 dimensions.

.IP
The basic Lush type for tabular data is called
an INDEX or an IDX. The IDX is merely an access
structure, the actual data is stored in a STORAGE 
associated with the IDX.

#? ** IDX Structure

An IDX is a structure that contains a pointer to 
the STORAGE where the data resides, and offset
indicating where the IDX data starts in the storage,
a number of dimensions (between 0 and 8), a size
for each dimension, and a modulo for each dimension.
The modulo determines by how much a pointer would
have to be incremented to go from one element
of the IDX to the next element in the given dimension.
.PP
Multiple IDXs can point to the same STORAGE and
provide access to the same data in multiple ways.
.PP
an IDX wis 0 dimension is called a scalar, and
can be seen as a pointer to a number.
.pp


#? ** IDX Creation and Allocation

2486:  dx_define("new_index", xnew_index);
2487:  dx_define("sub_index", xsubindex);
2489:  dx_define("at_matrix", xATmatrix);
2490:  dx_define("p_matrix", xPmatrix);
2491:  dx_define("f_matrix", xFmatrix);
2492:  dx_define("d_matrix", xDmatrix);
2493:  dx_define("i32_matrix", xI32matrix);
2494:  dx_define("i16_matrix", xI16matrix);
2495:  dx_define("i8_matrix", xI8matrix);
2496:  dx_define("u8_matrix", xU8matrix);
2497:  dx_define("gptr_matrix", xGPTRmatrix);
2501:  dx_define("nrvectorp", xnrvectorp);
2502:  dx_define("nrmatrixp", xnrmatrixp);

2475:  dx_define("idx-storage", xindex_storage);
2476:  dx_define("idx-size", xindex_size);
2477:  dx_define("idx-nelements", xindex_nelements);
2478:  dx_define("idx-ndim", xindex_ndim);
2479:  dx_define("idx-offset", xindex_offset);
2480:  dx_define("idx-bound", xindex_bound);
2481:  dx_define("idx-dim", xindex_dim);
2482:  dx_define("idx-modulo", xindex_mod);

2471:  dx_define("indexp", xindexp);
2472:  dx_define("matrixp", xmatrixp);
2473:  dx_define("arrayp", xarrayp);


2506:  dx_define("copy_matrix", xcopy_matrix);
2510:  dx_define("save_flt_matrix", xsave_flt_matrix);
2511:  dx_define("save_packed_matrix", xsave_packed_matrix);
2512:  dx_define("save_ascii_matrix", xsave_ascii_matrix);
2513:  dx_define("load_matrix", xload_matrix);
2517:  dx_define("idx-redim", xindex_redim);
2518:  dx_define("idx-undim", xindex_undim);
2519:  dx_define("idx-unfold", xindex_unfold);
2520:  dx_define("idx-diagonal", xindex_diagonal);
2521:  dx_define("idx-narrow", xindex_narrow);
2522:  dx_define("idx-select", xindex_select);
2523:  dx_define("idx-transpose", xindex_transpose);
2524:  dx_define("idx-transpose2", xindex_transpose2);
2526:  dx_define("idx-clone", xindex_clone);
2527:  dx_define("idx-transclone", xindex_transclone);
2529:  dx_define("idx-changedim",xindex_change_dim);
2530:  dx_define("idx-changemod",xindex_change_mod);
2531:  dx_define("idx-changeoffset",xindex_change_offset);
2540:  dx_define("matrix",xFmatrix);
2541:  dx_define("array",xATmatrix);
2542:  dx_define("submatrix",xsubindex);
2543:  dx_define("bound",xoldbound);
2535:  dy_define("idx-eloop", yeloop);
2536:  dy_define("idx-bloop", ybloop);



#? ** Storage Creation and Allocation

#? (new_at_storage [<n>])
.TYPE DE
.FILE storage.c
Creates a storage of class <|ATSTORAGE|> whose elements are 
Lisp objects. If <n> is present, <n> elements are allocated in 
memory and initialized to 0 (or NIL). If <n> is not present,
an unsized storage is returned that can be subsequently
allocated in memory with storage_malloc, storage_malloc_nc,
or memory-mapped from a file with storage_mmap.

#? (new_p_storage [<n>])
.TYPE DE
.FILE storage.c
Creates a storage of class <|PSTORAGE|> whose elements are 
packed fixed point numbers (one-byte signed numbers with 
4 bit integer part and 4 bit fractional part). 
If <n> is present, <n> elements are allocated in 
memory and initialized to 0 (or NIL). If <n> is not present,
an unsized storage is returned that can be subsequently
allocated in memory with storage_malloc, storage_malloc_nc,
or memory-mapped from a file with storage_mmap.

#? (new_f_storage [<n>])
.TYPE DE
.FILE storage.c
Creates a storage of class <|FSTORAGE|> whose elements are 
4-byte floats. If <n> is present, <n> elements are allocated in 
memory and initialized to 0 (or NIL). If <n> is not present,
an unsized storage is returned that can be subsequently
allocated in memory with storage_malloc, storage_malloc_nc,
or memory-mapped from a file with storage_mmap.

#? (new_d_storage [<n>])
.TYPE DE
.FILE storage.c
Creates a storage of class <|DSTORAGE|> whose elements are 
double precision floats (8 bytes). If <n> is present, <n> elements 
are allocated in 
memory and initialized to 0 (or NIL). If <n> is not present,
an unsized storage is returned that can be subsequently
allocated in memory with storage_malloc, storage_malloc_nc,
or memory-mapped from a file with storage_mmap.

#? (new_i32_storage [<n>])
.TYPE DE
.FILE storage.c
Creates a storage of class <|I32STORAGE|> whose elements are 
4 byte siged integers. If <n> is present, <n> elements are allocated in 
memory and initialized to 0 (or NIL). If <n> is not present,
an unsized storage is returned that can be subsequently
allocated in memory with storage_malloc, storage_malloc_nc,
or memory-mapped from a file with storage_mmap.

#? (new_i16_storage [<n>])
.TYPE DE
.FILE storage.c
Creates a storage of class <|I16STORAGE|> whose elements are 
2 byte siged integers. If <n> is present, <n> elements are allocated in 
memory and initialized to 0 (or NIL). If <n> is not present,
an unsized storage is returned that can be subsequently
allocated in memory with storage_malloc, storage_malloc_nc,
or memory-mapped from a file with storage_mmap.

#? (new_i8_storage [<n>])
.TYPE DE
.FILE storage.c
Creates a storage of class <|I8STORAGE|> whose elements are 
single-byte singed integers. If <n> is present, <n> elements are 
allocated in 
memory and initialized to 0 (or NIL). If <n> is not present,
an unsized storage is returned that can be subsequently
allocated in memory with storage_malloc, storage_malloc_nc,
or memory-mapped from a file with storage_mmap.

#? (new_u8_storage [<n>])
.TYPE DE
.FILE storage.c
Creates a storage of class <|U8STORAGE|> whose elements are 
single-byte unsinged integers. If <n> is present, <n> elements are 
allocated in 
memory and initialized to 0 (or NIL). If <n> is not present,
an unsized storage is returned that can be subsequently
allocated in memory with storage_malloc, storage_malloc_nc,
or memory-mapped from a file with storage_mmap.

#? (new_gptr_storage [<n>])
.TYPE DE
.FILE storage.c
Creates a storage of class <|GPTRSTORAGE|> whose elements are 
generic memory pointers. If <n> is present, <n> elements are allocated in 
memory and initialized to 0 (or NIL). If <n> is not present,
an unsized storage is returned that can be subsequently
allocated in memory with storage_malloc, storage_malloc_nc,
or memory-mapped from a file with storage_mmap.

#? (storage-malloc <srg> <n>)
.TYPE DE
.FILE storage.c
Set the size of storage <srg> to <n>, allocate
<n> elements in memory, and clear the content (to 0 or NIL
depending on the type of storage). Storage <srg>
must be unsized (as returned by <new-xxx-storage>).

#? (storage-malloc-nc <srg> <n>)
.TYPE DE
.FILE storage.c
Set the size of storage <srg> to <n>, allocate
<n> elements in memory. The elements are not cleared
to save time. Storage <srg> must be unsized 
(as returned by <new-xxx-storage>).

#? (storage-realloc <srg> <n>)
.TYPE DE
.FILE storage.c
Change the size of storage <srg> to <n>, and reallocate
<n> elements in memory. IDXs that points to <srg> are unaffected
(i.e. they point to the right place and their content 
data is unchanged). The newly allocated data segment
is initialize to 0 or NIL.

#? (storage-realloc-nc <srg> <n>)
.TYPE DE
.FILE storage.c
Change the size of storage <srg> to <n>, and reallocate
<n> elements in memory. IDXs that points to <srg> are unaffected
(i.e. they point to the right place and their content 
data is unchanged). The newly allocated data segment
is NOT initialized.

#? (storage-mmap <srg> <file> <offset>)
.TYPE DE
.FILE storage.c
maps the content of file <file> into memory. <file>
can be either a file descriptor or a string containing
a filename. Each element
of the file starting at byte <offset> is made accessible through 
the corresponding element of the storage <srg>. 
Storage of Lisp objects (<|ATSTORAGE|> cannot be memory mapped.
Mapped storages are read-only.
Whether a storage is read-only can be determined
with the function <writablep>.

#? ** Storage access

Storage elements can be read and set similarly to IDX
elements. In other words <(s 3)> returns the value
of element 3 of storage <s>. <(s 3 5)> sets it to 5.

#? ** Miscellaneous storage functions

#? (storage-save <srg> <file>)
save the content of storage <srg> into file <file>.
<file> may be a string containing a filename or a file descriptor.
Data is written raw, without a header, and in the native
format of the machine (multibyte elements will not be portable
between big and small-endian machines).

#? (storage-load <srg> <file>)
load storage <srg> with the content of file <file>.
<file> may be a string containing a filename or a file descriptor.

#? (storagep <srg>)
return true is <srg> is a storage, and nil otherwise.

#? (writablep <srg>)
return true if <srg> is writable, and nile otherwise.
Memory mapped storages are generally not writable.

#? (storage-read-only <srg>)
marks storage <srg> as being read-only.
No Lisp function can write into it after this.

#? (storage-size <srg>)
return the number of element in storage <srg>.
Return 0 if the storage is unsized.

#? (storage-clear <srg>)
Fills up all the element of storage <srg>
with 0 or NIL.


==============================================================
(from tutorial)
#? *** Vectors, Matrices, and Tensors

Lush's piece de resistance is its matrix engine. Lush can operate
on scalars, vectors, matrices, or high-dimensional tensors from
0 to 8 dimensions. creating a tensor of <float> is done simply with:
.VP
  ? (setq m (matrix 10 8 4))   ; create 3D matrix
  = ::INDEX3:<10x8x4>
  ? (m 3 4 2 45.6)       ; set value of element (3,4,2) to 45.6
  = ::INDEX3:<10x8x4>
  ? (m 3 4 2)            ; get value of element (3,4,2).
  = 45.6
.PP
Tensors of various basic types can be created with the functions
listed below. Each function has two versions, the regular version 
initializes all the elements to zero, while the version with <-nc> 
at the end do not (no clear) and are a bit faster. All of these 
functions take 0 to 8 integer arguments that are the sizes in 
each dimension:
.IP
<double-matrix, double-matrix-nc, real-matrix, real-matrix-nc>: doubles
.IP
<float-matrix, float-matrix-nc, flt-matrix, flt-matrix-nc>: floats
.IP
<int-matrix, int-matrix-nc>: 32-bit ints
.IP
<short-matrix, short-matrix-nc>: 16-bit shorts
.IP
<byte-matrix, byte-matrix-nc>: 8-bit bytes
.IP
<ubyte-matrix, ubyte-matrix-nc>: 8-bit unsigned bytes
.IP
<gptr-matrix, gptr-matrix-nc>: generic pointers (void*)
.PP

Matrices are really composed of two data structures: 
.IP
the <storage> or <srg> which contains the actual data,
an element type identifier (and the size thereof), and flags that indicate 
if the data is writable or not, if it is in RAM or memory-mapped from 
a file, etc.
.IP
the <index> or <idx> which contains a pointer to the 
<storage>, together with the number of dimensions of the tensor,
the size in each dimension, the address increment from one element to
the next in each dimension (called <modulo>), and the offset
of the first tensor element in the storage.
.PP

#? ** Storages

Storages and idx can be created independently of each other.
So for example <(setq s (double-storage 8))> creates a new storage
of doubles with 8 elements. The call <(double-storage)> returns
an unsized storage. Creating an idx on a particular storage
can be done with <(new-index s '(3 4))>. This resizes the storage
<s> to 12 elements (if it has less than that), and creates an idx
of size (3,4) on this storage. Creating other idxes on the same
storage allows to access the same piece of data in multiple ways.
Below are the functions to allocate storages.
None of them can be called in compiled code.
Calling them without argument <(new-xxx-storage)>
will return an unsized storage, which can subsequently
be sized, or mapped to a file with <(storage-mmap>.
Calling them with one integer argument will allocate the 
corresponding number of elements in memory:

.IP
<double-storage, real-storage>: doubles
.IP
<float-storage, flt-storage>: floats
.IP
<int-storage>: 32-bit ints
.IP
<short-storage>: 16-bit shorts
.IP
<byte-storage>: 8-bit bytes
.IP
<ubyte-storage>: 8-bit unsinged bytes
.IP
<gptr-storage>: generic pointers (void *)
.IP
<at-storage>: lisp objects
.PP
Storage elements can be accessed as with vectors.
Storages can be sized, resized, cleared, loaded from a file, 
memory-mapped from a file, and saved with the following functions 
(none of which can be called in compiled code):

.IP
<(storage-malloc s n)> allocates <n> elements. 
  Storage <s> must be unsized
.IP
<storage-malloc-nc> same as above, but does not clear the memory
.IP
<(storage-realloc s n)> resizes an already allocated storage. The new size
  can be smaller or larger than the original size. The data will be copied, and the
  new area cleared.
.IP
<storage-realloc-nc> same, but new area is not cleared
.IP
<(storage-mmap s f [o])> memory-maps file <f> into storage <s>.
  Optional argument <o> is the byte offset in the file at which the
  storage is mapped.
.IP
<(storage-clear s)> clears storage s
.IP
<(storage-load s f)> loads storage file <f> into storage <s>.
  Storage <s> will be resized to the apropriate size.
.IP
<(storage-save s f)> save storage <s> into file <f>
.IP
<(storage-read-only s)> marks <s> as read only. Attempts to write
  into it will cause and error.
.IP
<(storage-size s)> returns the size of storage <s>
.IP
<(storagep s)> returns <t> (true) iff <s> is a storage.
.PP

#? ** Manipulating Tensors and IDX

Several functions are provided to create and 
manipulate the "idx" structures.

<h4><a name="creating, cloning, and copying idx">creating, cloning, and copying idx</a></h4>

.IP
<(new-index s dimlist> creates a new idx on storage <s>. The
dimensions of the idx are given in <dimlist>. The storage is resized
if needed.
.IP
<(idx-storage m)> returns storage of idx <m>
.IP
<(idx-clone m)> make a clone of idx <m> (a copy of <m>
  that points to the same storage).
.IP
<(copy-matrix m [r])> returns a fresh copy of tensor <m>.
 if <r> is present, <m> is copied into <r> with apropriate
 type conversion if necessary.
.IP
<(copy-any-matrix m [r])> copy a tensor of any structure and type into
a tensor of a possibly different structure an type, as long as it has the
same number of elements.
.IP
<submatrix> obsolete way of defining a submatrix, 
  use <narrow> instead.
.IP
<clone-matrix> obsolete function for making a copy of a matrix of floats.
.PP

#? ** tensor iterators

Lush provides efficient iterators to cycle over dimensions of a tensor.
It is almost always better to use those iterators, rather than a regular
loop with regular access to array elements because the latter method causes
an array bound checking at each access, while the former doesn't.

.IP
< (idx-bloop ((s1 idx1) [ (s2 idx2) [...(sn idxn) ]]) body)> 
  make each <si> be an idx with one less dimension than the
  corresponding <idxi>, and which simulataneously loops over the
  successive "slices" of <idxi> for each possible value of the
  first index. Execute <body> for each value.  
.IP
< (idx-eloop ((s1 idx1) [ (s2 idx2) [...(sn idxn) ]]) body)> 
  same as above, but loops over the last dimension.
.IP
<(cidx-bloop (i_1 [i_2...i_n] (c_1 l_1) [(c_1 l_1)...(c_m l_m)) p_1 [p_2...])>
  This is a idx-bloop which will loop over the n first dimensions of idxs <l_1>
  to <l_m>.  The loop counters are strings (such as "i" "j") and are specified
  by <i_1> to <i_n>.  During each iteration, the C variables provided 
  in <c_1> to <c_m> will point to the appropriate values in the 
  idxs <l_1> to <l_m>.  For example, the following function will 
  fill matrix a with cos(i+j).
.VP
    (de foo (a)
       ((-idx2- (-flt-)) a)
       (cidx-bloop ("i" "j" ("a" a)) #{ *a = cos(i+j); #}) a)
.PP
  The return value is (like in idx-bloop) the last idx specified in the
  declaration (in the example above, the return value is superfluous).  
  Here is another (ugly) example for using cidx-bloop (note that absence of typing):
.VP
    (dmd idx-m1fill (a v)
      '(cidx-bloop ("i" ("a" `a)) (cinline "*a = %s;" `v)))
.PP
  The return value can be used directly as in:
.VP
     (let ((a (idx-m1fill (matrix-nc n) value)))
           [...]
     )
.PP
  Note that each idx <l_1> to <lm> should have at least <n> 
  dimensions, but can have more (only the first <n> dimensions will be looped on).
.PP

#? ** reading the parameters of an idx

.IP
<(idx-ndim m)> return number of dimensions.
.IP
<(idx-dim m n)> return size of n-th dimension.
.IP
<(idx-modulo m n)> return number of elements that separate two 
  successive elements in the n-th dimension.
.IP
<(idx-offset m)> return offset of first element of <m> in storage.
.IP
<(idx-size m)> return size of memory are used by idx data in bytes.
.IP
<(idx-storage m)> return storage pointed t by <m>.
.IP
<(contiguep m)> returns true if the elements of <m> are
  contiguous in memory.
.PP

<h4><a name="idx manipulations">idx manipulations</a></h4>

.IP
<(narrow m n s [o])> make a clone of idx <m>, and reduce it
  size in the n-th dimension to <s> elements, offset by <o>.
.IP
<(select m n s)>  return a clone of <m>, with the n-th
  dimension removed, and which is the s-th "slice" of <m>, 
  in the n-th dimension.
.IP
<(unfold m n ksize step)>  Return an idx with an added dimension 
 at the end of m obtained by "unfolding" n-th dimension.  The size of the new 
 dimension is ksize.  A subsampled convolution of kernel size ksize and stride 
 step can be done by calling <(idx-m2dotm1 this-unfolded-idx kernel)>:
.VP
   ? (unfold [3 4 5 6 7] 0 5 1)
   = [[ 3.00  4.00  5.00  6.00  7.00 ]]
   ? (unfold [3 4] 0 1 1)      
   = [[ 3.00 ]
      [ 4.00 ]]
.PP
.IP
<(idx-transclone m dimlist)> return a clone of idx <m> where
  the dimensions have been permuted according to the list of dimension indices
  <dimlist>. For example <(idx-transclone m '(0 2 1))> permutes
  the second and third dimensions.
.IP
<transpose> obsolete transpose function superseded by idx-transclone.
.IP
<(diagonal m d)>  return a clone of <m> where the modulos
  and dimensions have been hacked  so as to grab the diagonal of the last 
  d dimensions.  The result has d-1 less dimensions than the original idx.
.IP
<(idx-narrow m n s [o])> like narrow, but hack <m> "in place"
  instead of returning a hacked clone.
.IP
<(idx-changedim m n v)> change size of n-th dimension of <m> 
  to <v>
.IP
<(idx-changemod m n v)> change modulo of n-th dimension of <m> 
  to <v>
.IP
<(idx-changeoffset m n)> change offset of <m> in its storage
  to <n>
.PP

#? ** non-compilable idx functions

.IP
<idx-bound 	>
.IP
<bound    	>
.IP
<idx-nelements 	>
.IP
<idx-redim 	>
.IP
<idx-same-size 	>
.IP
<idx-select 	>
.IP
<idx-size-or-check >
.IP
<idx-transpose	>
.IP
<idx-transpose2 	>
.IP
<idx-undim 	>
.IP
<idx-unfold	>
.IP
<idx-inv		>
.IP
<>
.PP

#? ** built-in tensor operations

These are the tensor operation that are available at startup.
These functions operate on tensors of all types with up to
3 dimensions. They all take either <n> or <n+1>
arguments (with n from 1 to 3). With <n> arguments,
the result is computed and returned. With <n+1> arguments
the result is written in the last argument (which must have the
right type and size). Many more tensor operators are available 
in the various libraries.

#? ** component-wise unary operations

.IP
<(idx-abs m [r])> absolute value
.IP
<(idx-atan m [r])> arctangent
.IP
<(idx-clear m [r])> set to 0
.IP
<(idx-copy m [r])> copy elements
.IP
<(idx-cos m [r])> cosine
.IP
<(idx-dexpmx m [r])> fast approximation of derivative of <exp(-x)> 
  using ratio of polynomials
.IP
<(idx-dstdsigmoid m [r])> fast approximation of the derivative of Lush's 
  standard sigmoid function using ratios of polynomials
.IP
<(idx-exp m [r])> exponential
.IP
<(idx-expmx m [r])> fast approximation of <exp(-x)> using ratio 
  of polynomials
.IP
<(idx-log m [r])> natural logarithm
.IP
<(idx-minus m [r])> change sign
.IP
<(idx-qdtanh m [r])> fast approximation of derivative of hyperbolic 
  tangent using ratios of polynomial
.IP
<(idx-qtanh m [r])>  fast approximation of hyperbolic tangent using ratios 
  of polynomial
.IP
<(idx-sin m [r])> sine
.IP
<(idx-sqrt m [r])>
.IP
<(idx-stdsigmoid m [r])> fast approximation of Lush's standard sigmoid
  function using ratios of polynomials
.PP

#? ** component wise dyadic operations

.IP
<(idx-add m1 m2 [r])> add two tensors
.IP
<(idx-addm0 m s [r])> add scalar <s> to each element of tensor <m>
.IP
<(idx-addm0acc m s r)> add scalar <s> to tensor <m>,
  and accumulate result in <r>
.IP
<(idx-div m1 m2 [r])> divide elements of <m1> by those of <m2>
.IP
<(idx-dotm0 m1 s [r])> multiply scalar <s> by each element of 
  tensor <m>
.IP
<(idx-dotm0acc m1 s r)> multiply scalar <s> by each element of 
  tensor <m> and accumulate result in <r>
.IP
<(idx-mul m1 m2 [r])> compoenet-wise multiply 
.IP
<idx-sub > subtract two tensors
.PP

#? ** contracting operations with scalar result

The following functions include dot products, distances, sums of terms, etc
and return scalars. These operations "contract" all the dimensions, i.e. the
generalized dot product of two tensors is the sum of all the products of 
corresponding terms in the two tensors.

.IP
<(idx-dot m1 m2 [r])> generalized dot product: computes sum of products of 
  terms of <m1> and <m2>
.IP
<(idx-dotaccm1 m2 r)> same as above, but accumulates result into <r>
.IP
<(idx-inf m [r])> smallest element of <m>
.IP
<(idx-infacc m r)> accumulate smallest element of <m>
.IP
<(idx-sqrdist m1 m2 [r])> sum of squared differences between terms of
  <m1> and terms of <m2>
.IP
<(idx-sqrdistacc m1 m2 r)> same as above, but result is accumulated 
  in <r>
.IP
<(idx-sum m [r])> sum of all terms of <m>
.IP
<(idx-sumacc m r)> accumulating version of the above 
.IP
<(idx-sumsqr m [r])> sum of squares of terms of <m>
.IP
<(idx-sumsqracc m r)> accumulating version of the above 
.IP
<(idx-sup m [r])> largest value in <m>
.IP
<(idx-supacc m r)> accumulating version of the above  
.PP

#? special inner and outer products

The following functions are available only for tensors of floats.

.IP
<(idx-m1extm1 m1 m2 [r])> outer product of vectors <m1> and 
  <m2>. Rij = M1i x M2j
.IP
<(idx-m1extm1acc m1 m2 r)> accumulating version of the above  
.IP
<(idx-m2dotm1 m v [r])> matrix-vector multiply. Rij = sum_k Mik x Vk
.IP
<(idx-m2dotm1acc m v r)> accumulating version of the above  
.IP
<(idx-m2extm2 m1 m2 [r])> outer product of matrices <m1> and 
  <m2>. result is a 4D tensor. Rijkl = M1ij x M2kl
.IP
<(idx-m2extm2acc m1 m2 r)> accumulating version of the above  
.IP
<(idx-m4dotm2 m v [r])> 4D-tensor by matrix multiply. result
  is a 2D matrix. Rij = sum_kl Mijkl x Vkl
.IP
<(idx-m4dotm2acc m v r)> accumulating version of the above  
.PP

#? ** backward compatibility ops

these are only provided for backward compatibility 
with previous versions of Lush and SN.

.IP
<(m*m m1 m2)> matrix multiplication
.IP
<(m+m m1 m2)> matrix addition
.IP
<(mxm m1 m2)> term by term multiplication
.IP
<(m-m m1 m2)> matrix subtraction
.IP
<(m*c m1 c)> multiplication by a constant
.IP
<(m+c m1 c)> addition of a constant
.IP
<transpose> matrix transpose
.PP
