$Id: htable.hlp,v 0.1 2001-10-31 17:31:39 profshadoko Exp $
#? ** Hash Tables.

Hash tables provide a powerful way to 
maintain associations between lisp objects. 
Hash tables behave like arrays except that any lisp object
is an acceptable subscript. This simplicity makes hash tables
extremely convenient.

Hash tables are so convenient that you will be quickly tempted
to use them everywhere. You must remember however that a simple
array requires less memory (about five times) and
less processor cycles.


#? * Representing Associations with Hash Tables.

.SEE (= <n1> <n2>)
.SEE (== <n1> <n2>)

A hash table is an instance of class <|HTABLE|>.
Like most lisp objects, hash tables can be compared using 
function <=> and saved using function <bwrite>.

A hash table maintains a set of associations between
two lisp objects, namely a key and a value. This set
is organized in a way that allows fast retrieval of 
the value associated to a given key. 

Hash table queries search an association whose key
is equal to the queried key. Since there are two ways
to test equality (i.e. functions <=> and <==>), 
there are two kinds of hash tables.
.IP
The most useful hash tables use the logical equality
represented by function <=>. Two objects are logically 
equal if the convey the same useful information. 
These hash table work properly as long as you do not
modify the objects used as keys by the hash table.
This can happen if you used arrays or custom objects
as keys in your hash table. See the description of 
function <htable-rehash> for more information about this point.
.IP
Hash table relying on pointer equality are occasionally useful.
Pointer equality occurs when two objects share the same
memory location. See the description of function <==>
for more information.


#? (htable [<nelem> [<flag>]])

Function <htable> returns a new empty hash table.
Optional arguments <nelem> and <flag> are seldom useful:
.IP
Argument <nelem> specifies an estimate of the number
of elements in the hash table. This estimate is useful
for saving a few processor cycles when filling the table.
.IP
Argument <flag> is a boolean value specifying whether
the hash table will use logical equality (the default) 
or pointer equality (when argument <flag> is not nil.)


#? (<htable> <key>)

This expression returns the value associated with key <key> 
in hash table <htable>. Expression <key> can be any lisp object.
If no association is defined for key <key>, the empty list
is returned.


#? (<htable> <key> <value>)

This expression associates value <value> to key <key> in the hash 
table <htable>. The value can be subsequently retrieved by
expression <(htable key)>.

This operation is performed in two logical steps:
(a) any existing association matching key <key> is first deleted,
and (b) a new association is created if argument <value> is not 
the empty list.

Example:
.VP
? (setq a (htable))
= ::HTABLE:6f3cac
? (a 'hello "hi")
= ::HTABLE:6f3cac
? (a '(3 4) "ho")
= ::HTABLE:6f3cac
? (a 'hello)
= "hi"
? (a '(3 4 5))
= ()
? (a '(3 4))
= "ho"


#? (htable-size <htable>)

Function <htable-size> returns the number of associations 
managed by the hash table. 


#? (htable-keys <htable>)

Function <htable-keys> returns a list of the keys of all the
associations managed by the hash table. It is guaranteed that
querying these keys will return a non nil result. 
.VP
? (setq a (htable))
= ::HTABLE:6f43c
? (for (i 0 10) (a i (sqrt i))
= ::HTABLE:6f43c
? (htable-keys a)
= (7 6 3 10 5 9 8 4 2 0 1)

#? (htable-alist <htable>)
.SEE (assoc <key> <alist>)
Function <htable-alist> returns an alist representing all 
associations managed by the hash table. This function also
provide a way to iterate over all associations:
.VP
? (setq a (htable))
= ::HTABLE:6f43c
? (for (i 0 10) (a i (sqrt i))
= ::HTABLE:6f43c
?  (each (((key . value) (htable-alist a))) 
     (printf "%4d %6.4f\n" key value))))
   7 2.6458
   6 2.4495
   3 1.7321
  10 3.1623
   5 2.2361
   9 3.0000
   8 2.8284
   4 2.0000
   2 1.4142
   0 0.0000
   1 1.0000
= ()


#? (htable-rehash <htable>)

Each association managed by a hash table contains a pointer
to the key object and a pointer to the value object. 
Functions that modify the values of these objects
also modify the state of the hash table.

Hash table queries search an association whose key
is logically equal to the queried key (unless pointer
equality was specified when creating the hash table).
The hash table works by storing each association in 
locations depending on the information conveyed by the key objects.

Modifying the object used as a key creates a lot of problems.
The corresponding association is no longer stored in a location
corresponding to the new information conveyed by the key objects.
The hash table state is no longer consistent. 

Function <htable-rehash> triggers the relocation
of all associations of the hash table <htable> 
to the location corresponding to the new values 
of the key objects.  You can then reliably use the hash table again.

.VP
? (setq a (htable))
= ::HTABLE:6f32c
? (setq m [1 2])
= [1 2]
? (a m 3)
= ::HTABLE:6f32c
? (a [1 2])
= 3
? (m 0 0)
= [ 0.00 2.00 ]
? (a [1 2])
= ()			;; we lost it
? (a [0 2])
= ()			;; result is undefined
? (htable-rehash a)
= 1
? (a [0 2])
= 3			;; entry is no longer lost
? (a [1 2])
= ()                    ;; this key no longer exists
.PP
The relocation of the hash table entries actually happens 
when you first access the hash table after calling 
<htable-rehash>. You can call function <htable-rehash> several
times in a row. The cost of relocating all the hash table
entries will be only incurred once when you will access the hash
table again.


#? (htable-info <htable>)

Function <htable-info> returns a list containing statistical
information about the hash table. This list is an alist
with the following form:
.VP
((size . 1294) (buckets . 3841) (hits 1132 145 14 3))
.PP
In this example, the hash table contains 1294 associations.
Associations are stored into 3841 buckets. Out of the 1294 associations,
1132 canbe retrieved directly, 145 require one extra search iteration,
14 require two extra search iteration, etc...


#? * Representing Sets with Hash Tables.

Sets are easily represented by creating a hash table and
defining associations whose keys are the set elements and whose
value is non nil.  
.IP
Expression <(htable element)> returns a non nil result
if element <element> belongs to the set represented by <htable>.
.IP
Expression <(htable element t)> adds element <element>
to the set represented by <htable>.
.IP
Expression <(htable element ())> removes element <element>
from the set represented by <htable>.
.IP
Expression <(htable-keys htable)> returns a list of
all the elements of the set represented by <htable>.
.PP
The following functions perform 
additional operations on sets represented by hash tables.


#? (hset <eltlist>)
.TYPE DE
.FILE sysenv.lsh

Function <hset> returns a hash table representing the
set of all elements of list <eltlist>.


#? (hset-and <htable1> <htable2>)
.TYPE DE
.FILE sysenv.lsh

Function <hset-and> returns a new hash table representing
the intersection of the sets represented by htables
<htable1> and <htable2>.

.EX (htable-keys (hset-and (hset '(1 2 3 4)) (hset '(2 4 5 6))))))



#? (hset-or <htable1> <htable2>)
.TYPE DE
.FILE sysenv.lsh

Function <hset-or> returns a new hash table representing
the intersection of the sets represented by htables
<htable1> and <htable2>.

.EX (htable-keys (hset-or (hset '(1 2 3 4)) (hset '(2 4 5 6))))))
