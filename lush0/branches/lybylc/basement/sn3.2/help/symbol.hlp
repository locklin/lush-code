#? Symbols.

Symbols are the only named objects. Their names may be up to 40
characters long.

The evaluation of a symbol returns its value. The value of a new
symbol always is the empty list, and may be modified with the setq
function. It is important to notice that its value is the only storage
provided by symbols. There is currently no other field for storing a
specific functional value, or a property list.

During a function call, or during the execution of certain special
functions, like the let function, the values of certain symbols are
"stacked". These symbols may have a different value until the function
returns. Their old value is then restored. This dynamical binding
makes the interpreter getting faster, but somewhat precludes the
development of efficient compilers.

Symbol names always are converted to lower-case characters, except when they are 
surrounded by vertical bars ``|''. Such vertical bars are useful for defining symbols 
whose name contains any character usually forbidden: parenthesis, spaces, semi-
colon, macro-characters, upper-case characters etc.... 

Examples :
.VP
  gasp GasP         ; are the same symbol named "gasp"
  |GasP|            ; is different one named "GasP"
  |);( '|           ; is a symbol named ");( '"
  "gasp"            ; is a string
  12                ; is a number
  |12|              ; is a symbol named "12"
.PP

.SEE (setq <v_1> <a_1> ... [<v_n> <a_n>])
.SEE (set <v> <a>)
.SEE (incr <v> [<n>])
.SEE (named <s>)
.SEE (uniq_symbol)
.SEE (lock-symbol <s_1> ... <s_n>)
.SEE (unlock-symbol <s_1> ... <s_n>)
.SEE (putp <s> <v> <p>)
.SEE (getp <s> <p>)
.SEE (symblist)
.SEE (oblist)
.SEE (macrochp <s>)



#? (setq <v_1> <a_1> ... [<v_n> <a_n>])	
Sets the value of symbols <v_1>...<v_n> to <a_1>...<a_n>.

The <setq> function has a special behavior when the <v_i> are not
symbols. This behavior is documented later, with the scope function.

Example:
.VP
? (setq a 3)
= 3
? (setq b 6)
= 6
? a b
= 3
= 6
? (setq a b b a)
= 3
? a b
= 6
= 3
.PP


#? (set <v> <a>)	
.SEE (setq <v_1> <a_1> ... [<v_n> <a_n>])	
Sets the value of the symbol <v> to <a>. 
set is different from setq because <v> is evaluated first.

Example:
.VP
? (setq s 'a)
= a
? (set s 3)
= 3
? s
= a
? a
= 3
.PP

#? (incr <v> [<n>])	
Increments <v> by <n> (default 1). <v> is not evaluated, and must be a
symbol whose value is a number. <n> may be a positive or negative
number.


#? (uniq_symbol)
Returns a unique symbol.
.EX (uniq-symbol)


#? (named <s>)	
Returns a new symbol whose name is the string <s>.


#? (lock-symbol <s_1> ... <s_n>)	
.SEE (unlock-symbol <s_1> ... <s_n>)	

Locks symbols <s_1> to <s_n>.

Symbols may be locked. You can no longer change the value of locked
symbols, but you may still modify them temporarily by using the let
function. Some TLisp functions and all C functions are stored in
locked symbols. This avoids the accidental loss of a C function.


#? (unlock-symbol <s_1> ... <s_n>)
.SEE (lock-symbol <s_1> ... <s_n>)	
Unlocks symbols <s_1> to <s_n>.


#? (putp <s> <v> <p>)	
.SEE (getp <s> <p>)	
This function provides a simple substitute for property lists. It acts
like the usual <putprop> function, except that the property lists are
stored as symbol values.


#? (getp <s> <p>)	
.SEE (putp <s> <v> <p>)
This function provides a simple substitute for property lists. It acts
like the usual <getprop> functions, except that property
lists are stored as symbol values.


#? (symblist)	
.SEE (oblist)
Returns the list of all the symbol names: i. e. a list of strings.

#? (oblist)	
.SEE (symblist)
Returns the list of all the symbols: i. e. a list of symbols.

#? (macrochp <s>)	
.SEE (dmc < <symb> . <body>
Returns <t> if <s> symbol defines a macro-character.

