#? Strings.

Character strings are sequence of characters.

Strings are enclosed between double-quotes. They may contain
macro-characters, parentheses, semi-colons, as well as any other
character. A line terminating backslash indicates a multi-line string.

The following ``C style'' escape sequences are recognized inside 
a string:
.IP
\\ for a single backslash,
.IP
\" for a double quote, 
.IP
\n, \r, \t, \b, \f respectively for a linefeed character (Ascii LF), a
carriage return (Ascii CR), a tab character (Ascii TAB), a backspace
character (Ascii BS), and a formfeed character (Ascii FF),
.IP
\e for a ``End-Of-File'' character  (C stdio's EOF), 
.IP
\<ooo> where <ooo> are octal digits for any ascii character, 
.IP
\x<hh> where <hh> are hexadecimal digits for any ascii character. 
.PP

.SEE (stringp <s>)
.SEE (concat  <s_1> ... <s_n>)
.SEE (len  <s>)
.SEE (mid  <s> <n> [<l>])
.SEE (right  <s> <n>)
.SEE (left  <s> <n>)
.SEE (strins <s_1> <n> <s_2>)
.SEE (strdel <s_1> <n> <l>)
.SEE (index <s> <r> [<n>])
.SEE (downcase <s>)
.SEE (upcase <s>)
.SEE (asc <s>)
.SEE (chr <n>)
.SEE (val <s>)
.SEE (str <n>)
.SEE (pname <l>)
.SEE (max <l_1> ... <l_n>)
.SEE (min <l_1> ... <l_n>)
.SEE (sprintf <format> ... <args> ... )
.SEE (regex-match <r> <s>)
.SEE (regex-seek <r> <s> [<start>])
.SEE (regex-subst <r> <s> <str>)



#? (concat  <s_1> ... <s_n>)
Concatenates strings <s_1> to <s_n>. 

Example:
.EX (concat "hello" " my friends")

#? (len  <s>)
Returns the length of the string <s>.

#? (mid  <s> <n> [<l>])
Returns <l> characters of <s> starting at the nth position. The
position, <n>, is a number between 1 and the length of the string
minus 1. When <l> is ommitted, a huge value is assumed: <mid> thus
returns characters until the end of the string <s>.

#? (right  <s> <n>)
Returns the <n> rightmost characters of <s>.

#? (left  <s> <n>)
Returns the <n> leftmost characters of <s>.

#? (strins <s_1> <n> <s_2>)
Insert string <s_2> at position <n> into the string <s_1>, and returns
the result. When <n> is equal to 0, the <strins> function actually
concatenates <s_2> and <s_1>.

#? (strdel <s_1> <n> <l>)
Removes <l> character at position <n> from the string <s_1>.

#? (index <s> <r> [<n>]) 
Searches the first occurrence of the string <s> in the string <r>,
starting at the <n>th position.  <index> returns the position of the
first match. If such an occurrence cannot be found, it returns the 
empty list.

#? (upcase <s>)
Returns string <s> with all letters converted to uppercase.

#? (downcase <s>)
Returns string <s> with all letters converted to lowercase.


#? (val <s>)
Returns the numerical value of <s> considered as a decimal number.
Returns the empty list if <s> does not contain a decimal number.

#? (str <n>)
Returns the decimal string representation of the number <n>.

#? (asc <s>)
.SEE (chr <n>)
Returns the numeric ASCII code of the first character of string <s>.
Cause an error if <s> is an empty string.

Example
.EX (asc "abcd")

#? (chr <n>)
.SEE (asc <s>)
Returns a one character string containing the ASCII character of
code <n>. Integer <n> must be strictly positive, and smaller than 255.

Example
.EX (chr 48)

#? (pname <l>)
Returns a string representation for the lisp object <l>. 
<pname> is able to give a string representation 
for numbers, strings, symbols, lists, etc...

#? (sprintf <format> ... <args> ... )

Like the C language function <sprintf>, this function returns a string similar to 
<format>. The following escape sequences, however are replaced by a representation of 
the corresponding arguments of <sprintf>:
.IP ``%%''
is replaced by a single \%.
.IP ``%l''
is replaced by a representation of a lisp object.
.IP ``%[-][<n>]s''
is replaced by a string, right justified in a field of length <n>
if <n> is specified.  When the optional minus sign is present,
the string is left justified.
.IP ``%[-][<n>]d''
is replaced by an integer, right justified in a field of <n>
characters, if <n> is specified.  When the optional minus sign is
present, the string is left justified.
.IP ``%[-][<n>]x''
is replaced by an hexadecimal integer, right justified in a field of <n>
characters, if <n> is specified.  When the optional minus sign is
present, the string is left justified.
.IP ``%[-][<n>[.<m>]]<c>''
where <c> is one of the characters <e>, <f> or <g>, is replaced by a
floating point number in a <n> character field, with <m> digits after
the decimal point. <e> specifies a format with an exponent, <f>
specifies a format without an exponent, and <g> uses whichever format
is more compact.  When the optional minus sign is present, the string
is left justified.
.PP
Example:
.EX (sprintf "%5s(%3d) is equal to %6.3f\n" "sqrt" 2 (sqrt 2))

#? (regex-match <r> <s>)
Returns <t> if regular expression <r> exactly matches the entire
string <s>. 

Regular expressions are quite similar to those used by
the <egrep> unix utility:
.IP
An ordinary character matches itself. Some characters, <(> <)> <\> <[>
<]> <|> <.> <?> <*> and <\> have a special meaning, and should be
quoted by prepending a backslash <\>.  The string <"\\\\"> actually is
composed of two backslashes (because backslashes in strings should be
escaped!), and thus matches a single backslash.
.IP
A dot <.> matches any character.
.IP
A caret <^> matches the beginning of the string.
.IP
A dollar sign <$> matches the end of the string.
.IP
A range specification matches any specified character.  For example,
``[YyNn]'' matches <Y> <y> <N> or <n>, ``[0-9]'' matches any number,
``[^0-9]'' matches any character except a number, ``[]A-Za-z]''
matches a closing bracket, or any uppercase or lowercase letter.
.IP
The concatenation of two regular expressions matches the concatenation
of two strings matches regular expression. Regular expressions can be
grouped with parenthesis, and modified by the <?> <+> and <*> characters.
.IP
A regular expression followed by a question mark <?> matches 0
or 1 instance of the single regular expression.
.IP
A regular expression followed by a plus sign <+> matches 1 or more
instances of the single regular expression.
.IP
A regular expression followed by a star <*> matches 0 or more
instances of the single regular expression.
.IP
Finally, two regular expressions separated by a bar | match any string
matching the first or the second regular expression.
.PP
For example, the regular expression ``(+|-)?[0-9]+(\.[0-9]*)?''
matches a signed number with an optional fractional part.
.EX (regex-match "(+|-)?[0-9]+(\\.[0-9]*)?" "-56")


#? (regex-seek <r> <s> [<start>])
.SEE (regex-match <r> <s>)
Searchs the first substring in <s> that matches the regular expression
<r>, starting at position <start> in <s>.  Regular expressions are
described with the <regex-match> function.  If the argument <start> is
not provided, string <s> is searched from the beginning.

If such a substring is found, <regex-seek> returns a list <(begin
length)>, where	<begin> is the index of the first character of the
substring, and <length> is the length of the subscript.  The
instruction <(mid s begin length)> may be used to extract this
substring.

If no such substring exists, <regex-seek> returns the empty list.

Example:
.EX (regex-seek "(+|-)?[0-9]+(\\.[0-9]*)?," "a=56.2, b=57,")


#? (regex-subst <r> <s> <str>)
.SEE (regex-match <r> <s>)

Replaces all substring matching regular expression <r> in string <str>
by string <s>.  Regular expressions are described with the
<regex-match> function.

A register is associated to each piece of the regular expression <r>
enclosed within parenthesis. Registers are numbered from <%0> to <%9>.
During each match, the substring of <str> matching each piece of the
regular expression is stored into the corresponding register.

During the replacement process, characters <%0> to <%9> in the
replacement string <s> are substited the content of the corresponding
register. (A single <%> is denoted as <%%>).

For example, the following expression reverses all the coordinates
of a chess game...
.EX (regex-subst "([a-h])([1-8])" "%1%0" "e2-e4, d7-d5, d2-d4, d5xd4?")
