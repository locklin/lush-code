#? Miscellaneous.
.SEE Debug.
.SEE System.


#? Debug.
A few function provides debugging support and statistical informations
about the resources used by TLisp.

.SEE (symbols  <str>)
.SEE (used)
.SEE (error  [<symb>] <string> [<l>])
.SEE (debug  <l_1> ... <l_n>)
.SEE (where)
.SEE result
.SEE version
.SEE (xref< <l>)
.SEE (xref- <l>)

.SEE (exit)
.SEE (discard  <l_1> ... <l_n>)
.SEE (toplevel)
.SEE (on-break <p> <l_1> ... <l_n>)
.SEE (on-error <p> <l_1> ... <l_n>)
.SEE (debug-hook)
.SEE (break-hook)
.SEE (mem-size)

#? System.

A few functions are strongly related to the operating system.  They
are of course highly implementation dependent.  You should check their
implementation and try them before using them.

.SEE (filter <cmd> <fin> <fout>)
.SEE (pipe <fin> <fout>)
.SEE (fcopy <fin> <fout>)
.SEE (beep)
.SEE (sleep <n>)
.SEE (sys <shellcmd>)
.SEE (sysio <infile> <outfile> <shellcmd>)
.SEE (chdir [<s>])
.SEE (tmpnam)
.SEE (getpid)
.SEE (edit  <file>)
.SEE (fedit <func>)
.SEE (getenv <s>)
.SEE (time <l_1> ... <l_n>)
.SEE (ctime)
.SEE (localtime)
.SEE (bground  <s> <l_1> ... <l_n>)
.SEE (trap-hangup <s>)
.SEE (blort <s>)




#? (beep)
Function <beep> is self explanatory.

#? (sleep <n>)
The <sleep> function waits <n> seconds, and returns

#? ! <shellcmd>
.TYPE DMC
.FILE  	sysenv.sn
.SEE (sys <shellcmd>)
.EX !ls
Macor character for function <sys>.

#? (sys <shellcmd>)
Executes the shell command defined in string <shellcmd>.

#? (sysio <infile> <outfile> <shellcmd>)
Executes the shell command defined in string <shellcmd>
after redirecting stdin and stdout to the files descriptors
<infile> and <outfile>.  Either <infile> or <outfile> may
be <()> specifying stdin and stdout.


#? (chdir [<s>])
If the string <s> is provided, sets the current working directory to
directory <s>. Returns the current working directory name.

#? (tmpnam)
Returns a unique name for a temporary file.

#? (getpid)
Returns the process ID of this sn process.

#? (edit  <file>)
.TYPE DE
.FILE sysenv.sn
.SEE ^E <file>
.SEE edit-call
Calls the standard editor on file <file>.  The editor name is stored
in the symbol <edit-call>, and is initialized by looking at the
environment variable ``EDITOR'' or ``VISUAL''.

#? ^E <file>
.TYPE DMC
.FILE sysenv.sn
.SEE (edit  <file>)
Macro-character for function <edit>.

#? edit-call
.TYPE VAR
.FILE sysenv.sn
.SEE (edit  <file>)
This variable contains the name of the editor command.

#? (fedit <func>)
.TYPE DE
.FILE sysenv.sn
.SEE edit-buffer
.SEE (edit <file>)
.SEE ^F <func>
Copies an indented definition version of <func> in the file defined by
<edit-buffer>, calls the function <edit> on this file, and loads the
edited definition of <func>.


#? ^F <func>
.TYPE DMC
.FILE sysenv.sn
.SEE (fedit <func>)
Macro-character for function <fedit>.

#? edit-buffer
.TYPE VAR
.FILE sysenv.sn
.SEE (fedit <func>)
This variable contains the name of the temporary file used by <fedit>.
This name initially is <"edit-buffer.sn">.

#? (getenv <s>)
Returns the value of the environment variable whose name is <s>.

#? (time <l_1> ... <l_n>)
Returns the CPU time in seconds spent to evaluate <l_1> to <l_n>.
Without arguments, <time> returns the real time spent since you ran SN2.

#? (ctime)
.SEE (localtime)
This function is identical to the Unix <ctime> function. 
It returns date and time as a 26 character string.

#? (localtime)
.SEE (ctime)
This function is identical to the Unix <localtime> function. 
It returns a list of the following form
.VP
   (	tm_isdst	<day light saving time ?>
	tm_yday 	<day of the year>
	tm_wdat 	<day of the week>
	tm_mon  	<month number>
        tm_mday 	<day of the month>
	tm_hour		<hour>
	tm_min		<minutes>
	tm_sec		<seconds> )
.PP

#? (bground  <s> <l_1> ... <l_n>)
Creates a background process whose output is redirected to file named
<s>, which evaluates <l_1> ... <l_n>, and exits. A suffix ".job" is
concatenated to filename <s>.

#? (trap-hangup <s>)
Sets up a signal handler for catching hangup signal. This signal
handler redirects output to file <s> instead of terminating the
process.

This function can be used as follows:
.IP
Start sn3.1 within a XTERM or SHELLTOOL window.
.IP
Call <trap-handler> to define the name of the hangup file.
.IP
Start your training session.
.IP
Kill the XTERM using the QUIT menu item.
.PP
Your training session has not been killed but continues as 
a backgound process (try "ps gux" to see it). Output has
been redirected to file <s>.


#? (blort <s>)

Halts TLisp and dumps a core image. On certain Unix machines, an
utility program named <undump> allows you to build an executable file
which starts TLisp with the saved core context.  The string <s> is
displayed when the undumped executable is launched.

This undump process allows you to have different versions of TLisp
with preloaded libraries, databases, or whatever else is time
consuming to create in the usual way.  You must however take care not
to have open file descriptors or windows before attempting such an
operation.

This function exists only on some UNIX versions, excluding Suns and
Apollos!







#? (symbols  <str>)
.TYPE DE
.FILE sysenv.sn
.SEE ^S <str>
Prints all the symbols whose name contains the string <str>. This is
especially useful if you don't remember the exact spelling of a
function or variable.

#? ^S <str>
.TYPE DMC
.FILE sysenv.sn
.SEE (symbols  <str>)
Macro-character for function <symbols>



#? (used)
Returns the number of currently used TLisp cells.

#? (error  [<symb>] <string> [<l>])
Causes an error whose text is given by <symb>, <string> and <l>.  When
<symb> is provided, <error> rewinds the evaluation stack until it
reaches a call to a function named <symb>. The error message then
displays the stack relative to that function call. When <symb> is
omitted, the stack is not displayed.

Example:
.VP
? (error 'myfunc "bad number" 4)
*** myfunc : Bad number : 4
Debug toplevel [y/n] ?
.PP

#? (debug  <l_1> ... <l_n>)
.SEE (nodebug  <l_1> ... <l_n>)
Evaluates <l_1> to <l_n>, in debug mode. When in debug mode, TLisp
prints an indented trace of each evaluator call, as well as each
value.

Example:
.VP
?  (debug (* (+ 3 4) a)))
-> (* (+ 3 4) a)
 -> (+ 3 4)
  -> 3
  <- 3
  -> 4
  <- 4
 <- 7
 -> a
 <- 8
<- 56
= 56
.PP

#? (nodebug  <l_1> ... <l_n>)
.SEE (debug  <l_1> ... <l_n>)
Calls progn on <l_1> to <l_n>, but does not display a trace, even inside
the <debug> function. Functions like <pretty> and <save> use this function.

#? (where)
.SEE Interruptions.
.SEE Errors.
This function prints the entire evaluation stack. Called from a debug
toplevel, <where> gives useful hints for undertsanding what happened and
when.

#? result
.TYPE VAR
The last result produced by the toplevel is always stored in the
variable result.

Example:

? (sqrt 81)
= 9
? (* result result)
= 81

#? version
.TYPE VAR
This symbol contains a string, whose contents is the full name of the
TLisp based program you are running.


#? (exit)
.SEE Startup.
.SEE (load  <in> [<out> [<prompt1> [<prompt2>]]])
This functions exits the current toplevel, as if a <Ctrl-D> had been
typed.

#? (discard  <l_1> ... <l_n>)
Evaluates <l_1> to <l_n> like <progn>, but prevents the entire result
to be printed by the toplevel. It will print its first line instead.
This function is useful for working quietly on very long lists.

#? (toplevel)
.TYPE DE
.FILE sysenv.sn
.SEE Startup.
This function usually is defined by ``sysenv.sn'', and is called 
during the startup process, and after all errors.


#? (on-error <p> <l_1> ... <l_n>)
.SEE Interruptions.
.SEE (on-break <p> <l_1> ... <l_n>)
This function usually works like <progn>. Lists <l_1> to <l_n> are
evaluated, and the last result is returned.  If however an error occur
during these evaluations, the expression <p> is evaluated before
the usual error processing.

The function <on-error> does not stop the error processing, but allows
for performing a cleanup tasks, or for printing a custom error message.


#? (on-break <p> <l_1> ... <l_n>)
.SEE (on-error <p> <l_1> ... <l_n>)
.SEE Errors.
This function usually works like <progn>. Lists <l_1> to <l_n> are
evaluated, and the last result is returned.  If however the user
interrupts the evaluation by depressing <Ctrl-C>, the expression <p>
is evaluated before the usual interruption processing.

The function <on-break> does not stop the interruption processing, but
allows for performing a cleanup tasks, or for printing a custom error
message.

#? (print-error)
.SEE (debug-hook)
.SEE (break-hook)
This function prints the last error message. Is is usually
called by the <break-hook> or <debug-hook> functions, whenever
an error or an interruption occurs.


#? (debug-hook)
.TYPE DE
.FILE sysenv.sn
.SEE Errors.
This function usually is defined by ``sysenv.sn'', and is called
whenever an error occurs.  Use care when modifying this function: An
incorrect <debug-hook> function may result into a deadly infinite
loop!

#? (break-hook)
.TYPE DE
.FILE sysenv.sn
.SEE Interruptions.
These functions are usually defined by ``sysenv.sn'', and is called 
whenever the user causes an interruption by depressing <Ctrl-C>.


#? (xref< <l>)
.SEE (xref- <l>)
Returns a list of all symbols whose value (a function or anything)
makes a direct or indirect reference to the the lisp object <l>.

An indirect reference crosses symbols: A symbol whose value is a
symbol whose value is <l> would belong to the result.

#? (xref- <l>)
.SEE (xref< <l>)
Returns a list of all symbols whose value (a function or anything)
makes a direct reference to the the lisp object <l>. A direct reference
does not cross symbols

An direct reference never crosses symbols: A symbol whose value is a symbol
whose value is <l> would not belong to the result.


#? (mem-size)
return size of current SN process
