

!rm cdeps*.c

(defclass aa object
  ((-int-) a1)
  ((-int-) a2) )

(defmethod aa aa()
  (setq a1 2)
  (setq a2 3) )

(defmethod aa ab()
  (setq a1 a2) )

(defclass bb aa
  ((-flt-) b1)
  ((-int-) b2) )

(defmethod bb bb()
  (==> this aa)
  (setq b1 1)
  (setq b2 -1) )

(dhc-make "cdeps" (aa aa) (bb bb))



(de toto(x)
    ((-int-) x)
    (let ((z (new aa)))
      (setq :z:a1 x)
      z ) )

(de titi(a)
    ((-obj- (aa)) a)
    (==> a aa) )

(de tata(a)
    ((-obj- (aa)) a)
    (letslot a
             (setq a1 1000)
             (setq a2 1001)) )

(dhc-make "cdeps1" toto titi tata)


    
(defclass cc aa
  ((-int-) cc2) )

(defmethod cc zz()
  (tata this) )

(dhc-make  "cdeps2" (cc zz))
