;/**********************************************************************
;        Copyright (c) 1995  AT&T --- All Rights Reserved
;        THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF AT&T.
;        The copyright notice above does not evidence any
;        actual or intended publication of this work.
;**********************************************************************/


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; linear coordinate transform using bilinear interpolation.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(mload "cmacro")
(mload "image/shimage")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(setq interpolate-bilin shim-interpolate-bilin)
(setq warp-shimage shim-warp)
(setq warp-shimage-fast shim-warp-fast)
(setq warp-shimage-bilin shim-warp-bilin)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; These test functions not officially part of toolbox

(de warp-test (i mode x1 y1 x2 y2 x3 y3 x4 y4)
    (when (not warp-test-db)
      (mload "load-corinna-db")
      (setq warp-test-db (new sub-db (map-corinna-training) 0 999)))
    (setq img (==> warp-test-db get i 'input))
    (let* ((ni (idx-dim img 0)) (nj (idx-dim img 1)))
      (setq shimg (short-matrix ni nj))
      (setq rez (short-matrix ni nj))
      (setq display (matrix ni nj))
      (flt2shimage img shimg)
      (warp-shimage-bilin shimg rez -256 mode x1 y1 x2 y2 x3 y3 x4 y4 0 0 (1- nj) (1- nj))
      (shimage2flt rez display)
      (when window (gray-draw-matrix 10 10 img 1 -1.2 4 4)))
      (when window (gray-draw-matrix (+ 160 (* 150 mode)) 10 display 1 -1.2 4 4)))
    ())

(de warp-demo-random (i z n)	
    (repeat n
	    (let ((x00 (+ 0 (rand (- z) z)))
		  (y00 (+ 0 (rand (- z) z)))
		  (x10 (+ 31 (rand (- z) z)))
		  (y10 (+ 0 (rand (- z) z)))
		  (x11 (+ 31 (rand (- z) z)))
		  (y11 (+ 31 (rand (- z) z)))
		  (x01 (+ 0 (rand (- z) z)))
		  (y01 (+ 31 (rand (- z) z))))
	      (graphics-batch
	       (warp-test i 0 x00 y00 x10 y10 x11 y11 x01 y01)
	       (warp-test i 1 x00 y00 x10 y10 x11 y11 x01 y01)))))

(de warp-demo-shrink (k z1 z2 n)	
    (repeat n
	    (let ((zz z1))
	      (while (> zz z2)
		(let ((p- (- 15.5 (* zz 15.5)))
		      (p+ (+ 15.5 (* zz 15.5))))
		  (graphics-batch
		   (warp-test k 0 p- p- p+ p- p+ p+ p- p+)
		   (warp-test k 1 p- p- p+ p- p+ p+ p- p+)))
		(setq zz (* zz 0.9))))))

;; (warp-test 0 0  0 0  31 0  31 31  0 31)
;; (warp-test 0 0  -4 -4  35 -4 35 35 -4 35)
;; (warp-test 0 0  4 4  27 4 27 27  4 27)

;; (warp-test 0 1  0 0  31 0  31 31  0 31)
;; (warp-test 0 1  -4 -4  35 -4 35 35 -4 35)
;; (warp-test 0 1  4 4  27 4 27 27  4 27)

