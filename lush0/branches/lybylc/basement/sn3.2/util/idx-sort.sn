#? File "idx-sort.sn"
;; sorting utilities for matrices of floats and ints
;;.SEE (idx-m1bsearch <am> <v>)
;;.SEE (idx-i1bsearch <am> <v>)
;;.SEE (idx-m1sortup <m>)
;;.SEE (idx-m1sortdown <m>)
;;.SEE (idx-i1sortup <m>)
;;.SEE (idx-i1sortdown <m>)
;;.SEE (idx-m1i1sortup <m> <p>)
;;.SEE (idx-m1i1sortdown <m> <p>)

(mload "cmacro")

(printf "[%s]\n" file-being-loaded)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#? (idx-m1bsearch <am> <v>)
;; returns index of element in idx1 of flt <am>
;; whose value is less than or equal to <v>
;; using a binary search.
;; this assumes the elements in <am> are sorted
;; in ascending order.
(de idx-m1bsearch (am v)
    ((-flt-) v)
    ((-idx1- (-flt-)) am)
    (let ((m (idx-dim am 0))
	  (lo 0))
      ((-int-) m lo)
      #{{
      int hi, n;
      flt *a;
      a = IDX_PTR($am, flt);
      hi = $m;
      while (hi- $lo>1) {
        n = ( $lo + hi )/2;
        if ( $v >= a[n] ) $lo = n; else hi = n;
      }
      } #}
      lo))

#? (idx-i1bsearch <am> <v>)
;; returns index of element in idx1 of int <am>
;; whose value is less than or equal to <v>
;; using a binary search.
;; this assumes the elements in <am> are sorted
;; in ascending order.
(de idx-i1bsearch (am v)
    ((-int-) v)
    ((-idx1- (-int-)) am)
    (let ((m (idx-dim am 0))
	  (lo 0))
      ((-int-) m lo)
      #{{
      int hi, n;
      int *a;
      a = IDX_PTR($am, int);
      hi = $m;
      while (hi- $lo>1) {
        n = ( $lo + hi )/2;
        if ( $v >= a[n] ) $lo = n; else hi = n;
      }
      } #}
      lo))

#? (idx-m1sortup <m>)
;; sorts element in vector <m> in ascending order
(de idx-m1sortup (m)
    ((-idx1- (-flt-)) m)
    (let ((n (idx-dim m 0)))
      (-int- n)
      (when (> n 1)
      #{ {
      int l,j,ir,i;
      flt *ra, rra;

      ra = (flt*)(IDX_PTR($m, flt)) -1;
      l=($n >> 1)+1;
      ir= $n;
      for (;;) {
	   if (l > 1)
	      rra=ra[--l];
	    else {
	      rra=ra[ir];
	      ra[ir]=ra[1];
	      if (--ir == 1) {
	        ra[1]=rra;
		goto end; }}
        i=l;
	j=l << 1;
	while (j <= ir) {
	  if (j < ir && ra[j] < ra[j+1]) ++j;
	  if (rra < ra[j]) {
	    ra[i]=ra[j];
	    j += (i=j);
	    } else j=ir+1; }
        ra[i]=rra; }}
	end:  #}
	)
      ()))

#? (idx-m1sortdown <m>)
;; sorts element in vector <m> in descending order
(de idx-m1sortdown (m)
    ((-idx1- (-flt-)) m)
    (let ((n (idx-dim m 0)))
      (-int- n)
      (when (> n 1)
      #{ {
      int l,j,ir,i;
      flt *ra, rra;

      ra = (flt*)(IDX_PTR($m, flt)) -1;
      l=($n >> 1)+1;
      ir= $n;
      for (;;) {
	   if (l > 1)
	      rra=ra[--l];
	    else {
	      rra=ra[ir];
	      ra[ir]=ra[1];
	      if (--ir == 1) {
	        ra[1]=rra;
		goto end; }}
        i=l;
	j=l << 1;
	while (j <= ir) {
	  if (j < ir && ra[j] > ra[j+1]) ++j;
	  if (rra > ra[j]) {
	    ra[i]=ra[j];
	    j += (i=j);
	    } else j=ir+1; }
        ra[i]=rra; }}
	end:  #}
	)
      ()))


#? (idx-i1sortup <m>)
;; sorts element in integer vector <m> in ascending order
(de idx-i1sortup (m)
    ((-idx1- (-int-)) m)
    (let ((n (idx-dim m 0)))
      (-int- n)
      (when (> n 1)
      #{ {
      int l,j,ir,i;
      int *ra, rra;

      ra = (int*)(IDX_PTR($m, int)) -1;
      l=($n >> 1)+1;
      ir= $n;
      for (;;) {
	   if (l > 1)
	      rra=ra[--l];
	    else {
	      rra=ra[ir];
	      ra[ir]=ra[1];
	      if (--ir == 1) {
	        ra[1]=rra;
		goto end; }}
        i=l;
	j=l << 1;
	while (j <= ir) {
	  if (j < ir && ra[j] < ra[j+1]) ++j;
	  if (rra < ra[j]) {
	    ra[i]=ra[j];
	    j += (i=j);
	    } else j=ir+1; }
        ra[i]=rra; }}
	end:  #}
	)
      ()))


#? (idx-i1sortdown <m>)
;; sorts element in integer vector <m> in descending order
(de idx-i1sortdown (m)
    ((-idx1- (-int-)) m)
    (let ((n (idx-dim m 0)))
      (-int- n)
      (when (> n 1)
      #{ {
      int l,j,ir,i;
      int *ra, rra;

      ra = (int*)(IDX_PTR($m, int)) -1;
      l=($n >> 1)+1;
      ir= $n;
      for (;;) {
	   if (l > 1)
	      rra=ra[--l];
	    else {
	      rra=ra[ir];
	      ra[ir]=ra[1];
	      if (--ir == 1) {
	        ra[1]=rra;
		goto end; }}
        i=l;
	j=l << 1;
	while (j <= ir) {
	  if (j < ir && ra[j] > ra[j+1]) ++j;
	  if (rra > ra[j]) {
	    ra[i]=ra[j];
	    j += (i=j);
	    } else j=ir+1; }
        ra[i]=rra; }}
	end:  #}
	)
      ()))

#? (idx-m1i1sortup <m> <p>)
;; <m> is a vector of flt, <p> is a vector of integers 
;; (same dimension as <m>).
;; on output, <m> is sorted in ascending order, and <p>
;; is sorted with the same permutation table.
(de idx-m1i1sortup (m p)
    ((-idx1- (-flt-)) m)
    ((-idx1- (-int-)) p)
    (let ((n (idx-dim m 0))
	  (z (idx-dim p 0)))
      (-int- n z)
      (when (<> n z) (error "idx-m1i1sortup: vectors have different sizes"))
      (when (> n 1)
      #{ {
      int l,j,ir,i;
      flt *ra, rra;
      int *rb, rrb;

      ra = (flt*)(IDX_PTR($m, int)) -1;
      rb = (int*)(IDX_PTR($p, int)) -1;

      l=($n >> 1)+1;
      ir=$n;
      for (;;) {
	   if (l > 1) {
	    rra=ra[--l];
	    rrb=rb[l];
	    } else {
	      rra=ra[ir];
	      rrb=rb[ir];
	      ra[ir]=ra[1];
	      rb[ir]=rb[1];
	      if (--ir == 1) {
 	        ra[1]=rra;
		rb[1]=rrb;
		goto end; } }
        i=l;
	j=l << 1;
	while (j <= ir)	{
	  if (j < ir && ra[j] < ra[j+1]) ++j;
	  if (rra < ra[j]) {
	    ra[i]=ra[j];
	    rb[i]=rb[j];
	    j += (i=j);
	    } else j=ir+1; }
	ra[i]=rra;
	rb[i]=rrb; }}
	end: #}
	)
      ()))

#? (idx-m1i1sortdown <m> <p>)
;; <m> is a vector of flt, <p> is a vector of integers 
;; (same dimension as <m>).
;; on output, <m> is sorted in descending order, and <p>
;; is sorted with the same permutation table.
(de idx-m1i1sortdown (m p)
    ((-idx1- (-flt-)) m)
    ((-idx1- (-int-)) p)
    (let ((n (idx-dim m 0))
	  (z (idx-dim p 0)))
      (-int- n z)
      (when (<> n z) (error "idx-m1i1sortup: vectors have different sizes"))
      (when (> n 1)
      #{ {
      int l,j,ir,i;
      flt *ra, rra;
      int *rb, rrb;

      ra = (flt*)(IDX_PTR($m, int)) -1;
      rb = (int*)(IDX_PTR($p, int)) -1;

      l=($n >> 1)+1;
      ir=$n;
      for (;;) {
	   if (l > 1) {
	    rra=ra[--l];
	    rrb=rb[l];
	    } else {
	      rra=ra[ir];
	      rrb=rb[ir];
	      ra[ir]=ra[1];
	      rb[ir]=rb[1];
	      if (--ir == 1) {
 	        ra[1]=rra;
		rb[1]=rrb;
		goto end; } }
        i=l;
	j=l << 1;
	while (j <= ir)	{
	  if (j < ir && ra[j] > ra[j+1]) ++j;
	  if (rra > ra[j]) {
	    ra[i]=ra[j];
	    rb[i]=rb[j];
	    j += (i=j);
	    } else j=ir+1; }
	ra[i]=rra;
	rb[i]=rrb; }}
	end: #}
	)
      ()))


#? (idx-i1i1sortup <m> <p>)
;; <m> is a vector of int, <p> is a vector of integers 
;; (same dimension as <m>).
;; on output, <m> is sorted in ascending order, and <p>
;; is sorted with the same permutation table.
(de idx-i1i1sortup (m p)
    ((-idx1- (-int-)) m)
    ((-idx1- (-int-)) p)
    (let ((n (idx-dim m 0))
	  (z (idx-dim p 0)))
      (-int- n z)
      (when (<> n z) (error "idx-i1i1sortup: vectors have different sizes"))
      (when (> n 1)
      #{ {
      int l,j,ir,i;
      int *ra, rra;
      int *rb, rrb;

      ra = (int*)(IDX_PTR($m, int)) -1;
      rb = (int*)(IDX_PTR($p, int)) -1;

      l=($n >> 1)+1;
      ir=$n;
      for (;;) {
	   if (l > 1) {
	    rra=ra[--l];
	    rrb=rb[l];
	    } else {
	      rra=ra[ir];
	      rrb=rb[ir];
	      ra[ir]=ra[1];
	      rb[ir]=rb[1];
	      if (--ir == 1) {
 	        ra[1]=rra;
		rb[1]=rrb;
		goto end; } }
        i=l;
	j=l << 1;
	while (j <= ir)	{
	  if (j < ir && ra[j] < ra[j+1]) ++j;
	  if (rra < ra[j]) {
	    ra[i]=ra[j];
	    rb[i]=rb[j];
	    j += (i=j);
	    } else j=ir+1; }
	ra[i]=rra;
	rb[i]=rrb; }}
	end: #}
	)
      ()))

#? (idx-i1i1sortdown <m> <p>)
;; <m> is a vector of int, <p> is a vector of integers 
;; (same dimension as <m>).
;; on output, <m> is sorted in descending order, and <p>
;; is sorted with the same permutation table.
(de idx-i1i1sortdown (m p)
    ((-idx1- (-int-)) m)
    ((-idx1- (-int-)) p)
    (let ((n (idx-dim m 0))
	  (z (idx-dim p 0)))
      (-int- n z)
      (when (<> n z) (error "idx-i1i1sortup: vectors have different sizes"))
      (when (> n 1)
      #{ {
      int l,j,ir,i;
      int *ra, rra;
      int *rb, rrb;

      ra = (int*)(IDX_PTR($m, int)) -1;
      rb = (int*)(IDX_PTR($p, int)) -1;

      l=($n >> 1)+1;
      ir=$n;
      for (;;) {
	   if (l > 1) {
	    rra=ra[--l];
	    rrb=rb[l];
	    } else {
	      rra=ra[ir];
	      rrb=rb[ir];
	      ra[ir]=ra[1];
	      rb[ir]=rb[1];
	      if (--ir == 1) {
 	        ra[1]=rra;
		rb[1]=rrb;
		goto end; } }
        i=l;
	j=l << 1;
	while (j <= ir)	{
	  if (j < ir && ra[j] > ra[j+1]) ++j;
	  if (rra > ra[j]) {
	    ra[i]=ra[j];
	    rb[i]=rb[j];
	    j += (i=j);
	    } else j=ir+1; }
	ra[i]=rra;
	rb[i]=rrb; }}
	end: #}
	)
      ()))

(dhc-make ()
	  idx-m1bsearch idx-i1bsearch
	  idx-m1sortup idx-m1sortdown idx-i1sortup idx-i1sortdown 
	  idx-i1i1sortup idx-i1i1sortdown
	  idx-m1i1sortup idx-m1i1sortdown
)          