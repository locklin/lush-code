
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; OpenGLU interface
;; This is done from the glu.h file that comes with the public
;; domain OpenGL implementation valled Mesa
;; It's got everything except extensions and SGI-specific stuff.
;; Yann LeCun 1997.

#? gl/openglu.sn
;; openglu.sn is a complete interface between SN and the high-level
;; industry-standard 3D graphic library OpenGLU. openglu uses the SN
;; opengl interface gl/opengl.sn.
;; OpenGL windows are open within an SN window using glsn-setup-window.
;; The SN equivalents to OpenGLU functions have the same name as their C 
;; counterparts. The arguments are also identical to the C version, except
;; that structure pointers are generic pointers, and pointers to arrays
;; of numbers are transformed into SN matrices with the corresponding type.
;; So for example, the SN version of the function gluGetNurbsProperty whose C 
;; prototype is gluGetNurbsProperty(GLUnurbs*,int,float*) takes a gptr, an int,
;; and an idx1 of floats.
;; The only exception to this rule is when the type of the numbers in the
;; array is unspecified at compile time. In this case, the SN function
;; takes a gptr (the C function takes a void*).
;; The functions to which this exception applies are:
;; gluBuild1DMipmaps, gluBuild2DMipmaps, gluScaleImage, 
;; gluTessBeginPolygon, and gluTessVertex.
;; 
;; The functions implemented here are the ones that are present in
;; the glu.h file distributed with the public domain implementation
;; of OpenGL called Mesa.
;; 
;; no explicit documentation is provided for the functions. Developers
;; are referred to the OpenGL manuals.
;;
;; type ^Agl or ^Aglu for a complete list of implemented functions.
;;
;;.SEE gl/opengl.sn
;;.SEE Open GL support under X11.
;;.SEE (glsn-setup-window <x> <y> <w> <h> <dbf>)
;;.SEE (glsn-usleep <microsecs>)
;;.SEE (glsn-demo <angle>)

(mload "gl/opengl")

(setq GLU_FALSE                            0)
(setq GLU_TRUE                             1)

;; /* Version */
(setq GLU_VERSION_1_1                      1)
(setq GLU_VERSION_1_2                      1)

;; /* StringName */
(setq GLU_VERSION                          100800)
(setq GLU_EXTENSIONS                       100801)

;; /* ErrorCode */
(setq GLU_INVALID_ENUM                     100900)
(setq GLU_INVALID_VALUE                    100901)
(setq GLU_OUT_OF_MEMORY                    100902)
(setq GLU_INCOMPATIBLE_GL_VERSION          100903)

;; /* NurbsDisplay */
;; /*      GLU_FILL */
(setq GLU_OUTLINE_POLYGON                  100240)
(setq GLU_OUTLINE_PATCH                    100241)

;; /* NurbsCallback */
(setq GLU_ERROR                            100103)

;; /* NurbsError */
(setq GLU_NURBS_ERROR1                     100251)
(setq GLU_NURBS_ERROR2                     100252)
(setq GLU_NURBS_ERROR3                     100253)
(setq GLU_NURBS_ERROR4                     100254)
(setq GLU_NURBS_ERROR5                     100255)
(setq GLU_NURBS_ERROR6                     100256)
(setq GLU_NURBS_ERROR7                     100257)
(setq GLU_NURBS_ERROR8                     100258)
(setq GLU_NURBS_ERROR9                     100259)
(setq GLU_NURBS_ERROR10                    100260)
(setq GLU_NURBS_ERROR11                    100261)
(setq GLU_NURBS_ERROR12                    100262)
(setq GLU_NURBS_ERROR13                    100263)
(setq GLU_NURBS_ERROR14                    100264)
(setq GLU_NURBS_ERROR15                    100265)
(setq GLU_NURBS_ERROR16                    100266)
(setq GLU_NURBS_ERROR17                    100267)
(setq GLU_NURBS_ERROR18                    100268)
(setq GLU_NURBS_ERROR19                    100269)
(setq GLU_NURBS_ERROR20                    100270)
(setq GLU_NURBS_ERROR21                    100271)
(setq GLU_NURBS_ERROR22                    100272)
(setq GLU_NURBS_ERROR23                    100273)
(setq GLU_NURBS_ERROR24                    100274)
(setq GLU_NURBS_ERROR25                    100275)
(setq GLU_NURBS_ERROR26                    100276)
(setq GLU_NURBS_ERROR27                    100277)
(setq GLU_NURBS_ERROR28                    100278)
(setq GLU_NURBS_ERROR29                    100279)
(setq GLU_NURBS_ERROR30                    100280)
(setq GLU_NURBS_ERROR31                    100281)
(setq GLU_NURBS_ERROR32                    100282)
(setq GLU_NURBS_ERROR33                    100283)
(setq GLU_NURBS_ERROR34                    100284)
(setq GLU_NURBS_ERROR35                    100285)
(setq GLU_NURBS_ERROR36                    100286)
(setq GLU_NURBS_ERROR37                    100287)

;; /* NurbsProperty */
(setq GLU_AUTO_LOAD_MATRIX                 100200)
(setq GLU_CULLING                          100201)
(setq GLU_SAMPLING_TOLERANCE               100203)
(setq GLU_DISPLAY_MODE                     100204)
(setq GLU_PARAMETRIC_TOLERANCE             100202)
(setq GLU_SAMPLING_METHOD                  100205)
(setq GLU_U_STEP                           100206)
(setq GLU_V_STEP                           100207)

;; /* NurbsSampling */
(setq GLU_OBJECT_PARAMETRIC_ERROR_EXT      100208)
(setq GLU_PATH_LENGTH                      100215)
(setq GLU_PARAMETRIC_ERROR                 100216)
(setq GLU_DOMAIN_DISTANCE                  100217)

;; /* NurbsTrim */
(setq GLU_MAP1_TRIM_2                      100210)
(setq GLU_MAP1_TRIM_3                      100211)

;; /* QuadricDrawStyle */
(setq GLU_POINT                            100010)
(setq GLU_LINE                             100011)
(setq GLU_FILL                             100012)
(setq GLU_SILHOUETTE                       100013)

;; /* QuadricCallback */
;; /*      GLU_ERROR */

;; /* QuadricNormal */
(setq GLU_SMOOTH                           100000)
(setq GLU_FLAT                             100001)
(setq GLU_NONE                             100002)

;; /* QuadricOrientation */
(setq GLU_OUTSIDE                          100020)
(setq GLU_INSIDE                           100021)

;; /* TessCallback */
(setq GLU_TESS_BEGIN                       100100)
(setq GLU_BEGIN                            100100)
(setq GLU_TESS_VERTEX                      100101)
(setq GLU_VERTEX                           100101)
(setq GLU_TESS_END                         100102)
(setq GLU_END                              100102)
(setq GLU_TESS_ERROR                       100103)
(setq GLU_TESS_EDGE_FLAG                   100104)
(setq GLU_EDGE_FLAG                        100104)
(setq GLU_TESS_COMBINE                     100105)
(setq GLU_TESS_BEGIN_DATA                  100106)
(setq GLU_TESS_VERTEX_DATA                 100107)
(setq GLU_TESS_END_DATA                    100108)
(setq GLU_TESS_ERROR_DATA                  100109)
(setq GLU_TESS_EDGE_FLAG_DATA              100110)
(setq GLU_TESS_COMBINE_DATA                100111)

;; n/* TessContour */
(setq GLU_CW                               100120)
(setq GLU_CCW                              100121)
(setq GLU_INTERIOR                         100122)
(setq GLU_EXTERIOR                         100123)
(setq GLU_UNKNOWN                          100124)

;; /* TessProperty */
(setq GLU_TESS_WINDING_RULE                100140)
(setq GLU_TESS_BOUNDARY_ONLY               100141)
(setq GLU_TESS_TOLERANCE                   100142)

;; /* TessError */
(setq GLU_TESS_ERROR1                      100151)
(setq GLU_TESS_ERROR2                      100152)
(setq GLU_TESS_ERROR3                      100153)
(setq GLU_TESS_ERROR4                      100154)
(setq GLU_TESS_ERROR5                      100155)
(setq GLU_TESS_ERROR6                      100156)
(setq GLU_TESS_ERROR7                      100157)
(setq GLU_TESS_ERROR8                      100158)
(setq GLU_TESS_MISSING_BEGIN_POLYGON       100151)
(setq GLU_TESS_MISSING_BEGIN_CONTOUR       100152)
(setq GLU_TESS_MISSING_END_POLYGON         100153)
(setq GLU_TESS_MISSING_END_CONTOUR         100154)
(setq GLU_TESS_COORD_TOO_LARGE             100155)
(setq GLU_TESS_NEED_COMBINE_CALLBACK       100156)

;; /* TessWinding */
(setq GLU_TESS_WINDING_ODD                 100130)
(setq GLU_TESS_WINDING_NONZERO             100131)
(setq GLU_TESS_WINDING_POSITIVE            100132)
(setq GLU_TESS_WINDING_NEGATIVE            100133)
(setq GLU_TESS_WINDING_ABS_GEQ_TWO         100134)

/*************************************************************/

(setq GLU_TESS_MAX_COORD 1.0e150)

(de gluBeginCurve (nurb)
    ((-gptr- "GLUnurbs*") nurb)
    (cheader "#include <GL/glu.h>")
    #{ gluBeginCurve ($nurb); #} ())
(de gluBeginPolygon (tess)
    ((-gptr- "GLUtesselator*") tess)
    #{ gluBeginPolygon ($tess); #} ())
(de gluBeginSurface (nurb)
    ((-gptr- "GLUnurbs*") nurb)
    #{ gluBeginSurface ($nurb); #} ())
(de gluBeginTrim (nurb)
    ((-gptr- "GLUnurbs*") nurb)
    #{ gluBeginTrim ($nurb); #} ())
(de gluBuild1DMipmaps (target component width format type data)
    ((GLenum) target)
    ((GLint) component)
    ((GLsizei) width)
    ((GLenum) format)
    ((GLenum) type)
    ((-gptr-) data)
    #{  gluBuild1DMipmaps ($target, $component, $width, $format, $type, $data); #} ())
(de gluBuild2DMipmaps (target component width height format type data)
    ((GLenum) target)
    ((GLint) component)
    ((GLsizei) width height)
    ((GLenum) format)
    ((GLenum) type)
    ((-gptr-) data)
    #{  gluBuild2DMipmaps ($target, $component, $width, $height, $format, $type, $data); #} ())
(de gluCylinder ( quad base top height slices stacks)
    ((-gptr- "GLUquadric*") quad)
    ((GLdouble) base)
    ((GLdouble) top)
    ((GLdouble) height)
    ((GLint) slices)
    ((GLint) stacks)
    #{ gluCylinder ($quad, $base, $top, $height, $slices, $stacks); #} ())
(de gluDeleteNurbsRenderer (nurb)
    ((-gptr- "GLUnurbs*") nurb)
    #{ gluDeleteNurbsRenderer ($nurb); #} ())
(de gluDeleteQuadric (quad)
    ((-gptr- "GLUquadric*") quad)
    #{ gluDeleteQuadric ($quad); #} ())
(de gluDeleteTess (tess)
    ((-gptr- "GLUtesselator*") tess)
    #{ gluDeleteTess ($tess); #} ())
(de gluDisk ( quad inner outer slices loops)
    ((-gptr- "GLUquadric*") quad)
    ((GLdouble) inner outer)
    ((GLint) slices loops)
    #{ gluDisk ($quad, $inner, $outer, $slices, $loops); #} ())
(de gluEndCurve (nurb)
    ((-gptr- "GLUnurbs*") nurb)
    #{ gluEndCurve ($nurb); #} ())
(de gluEndPolygon (tess)
    ((-gptr- "GLUtesselator*") tess)
    #{ gluEndPolygon ($tess); #} ())
(de gluEndSurface (nurb)
    ((-gptr- "GLUnurbs*") nurb)
    #{ gluEndSurface ($nurb); #} ())
(de gluEndTrim (nurb)
    ((-gptr- "GLUnurbs*") nurb)
    #{ gluEndTrim ($nurb); #} ())
(de gluErrorString (error)
    ((GLenum) error)
    (gptr #{  gluErrorString ($error) #}))
(de gluGetNurbsProperty (nurb property data)
    ((-gptr- "GLUnurbs*") nurb)
    ((GLenum) property)
    ((-idx1- (-float-)) data)
    #{ gluGetNurbsProperty ($nurb, $property, IDX_PTR($data,GLfloat)); #} ())
(de gluGetString (name)
    ((GLenum) name)
    (gptr #{ gluGetString ($name) #}))
(de gluGetTessProperty (tess which data)
    ((-gptr- "GLUtesselator*") tess)
    ((GLenum) which)
    ((-idx1- (-double-)) data)
    #{ gluGetTessProperty ($tess, $which, IDX_PTR($data,GLdouble)); #} ())
(de gluLoadSamplingMatrices (nurb model perspective view)
    ((-gptr- "GLUnurbs*") nurb)
    ((-idx1- (-float-)) model perspective)
    ((-idx1- (-int-)) view)
    #{ gluLoadSamplingMatrices ($nurb, IDX_PTR($model,GLfloat), IDX_PTR($perspective,GLfloat), IDX_PTR($view,GLint)); #} ())
(de gluLookAt ( eyex eyey eyez centerx centery centerz upx upy upz)
    ((GLdouble) eyex eyey eyez centerx centery centerz upx upy upz)
    #{ gluLookAt ($eyex, $eyey, $eyez, $centerx, $centery, $centerz, $upx, $upy, $upz); #} ())
(de gluNewNurbsRenderer () (gptr #{ gluNewNurbsRenderer () #}))
(de gluNewQuadric () (gptr #{ gluNewQuadric () #}))
(de gluNewTess () (gptr #{ gluNewTess () #}))
(de gluNextContour (tess type)
    ((-gptr- "GLUtesselator*") tess)
    ((GLenum) type)
    #{ gluNextContour ($tess, $type); #} ())
(de gluNurbsCallback (nurb which callbackfunc)
    ((-gptr- "GLUnurbs*") nurb)
    ((GLenum) which)
    ((-gptr-) callbackfunc)
    #{ gluNurbsCallback ($nurb, $which, $callbackfunc); #} ())
(de gluNurbsCurve (nurb knotcount knots stride control order type)
    ((-gptr- "GLUnurbs*") nurb)
    ((GLint) knotcount)
    ((-idx1- (-float-)) knots)
    ((GLint) stride)
    ((-idx1- (-float-)) control)
    ((GLint) order)
    ((GLenum) type)
    #{ gluNurbsCurve ($nurb, $knotcount, IDX_PTR($knots,GLfloat), $stride, IDX_PTR($control,GLfloat), $order, $type); #} ())
(de gluNurbsProperty (nurb property value)
    ((-gptr- "GLUnurbs*") nurb)
    ((GLenum) property)
    ((GLfloat) value)
    #{ gluNurbsProperty ($nurb, $property, $value); #} ())
(de gluNurbsSurface (nurb sknotcount sknots tknotcount tknots sstride tstride control sorder torder type)
    ((-gptr- "GLUnurbs*") nurb)
    ((GLint) sknotcount)
    ((-idx1- (-float-)) sknots)
    ((GLint) tknotcount)
    ((-idx1- (-float-)) tknots)
    ((GLint) sstride)
    ((GLint) tstride)
    ((-idx1- (-float-)) control)
    ((GLint) sorder)
    ((GLint) torder)
    ((GLenum) type)
    #{ gluNurbsSurface ($nurb, $sknotcount, IDX_PTR($sknots,GLfloat), $tknotcount, IDX_PTR($tknots,GLfloat), $sstride, $tstride, IDX_PTR($control,GLfloat), $sorder, $torder, $type); #} ())
(de gluOrtho2D ( left right bottom top)
    ((GLdouble) left right bottom top)
    #{ gluOrtho2D ($left, $right, $bottom, $top); #} ())
(de gluPartialDisk ( quad inner outer slices loops start sweep)
    ((-gptr- "GLUquadric*") quad)
    ((GLdouble) inner outer)
    ((GLint) slices loops)
    ((GLdouble) start sweep)
    #{ gluPartialDisk ($quad, $inner, $outer, $slices, $loops, $start, $sweep); #} ())
(de gluPerspective ( fovy aspect znear zfar)
    ((GLdouble) fovy aspect znear zfar)
    #{ gluPerspective ($fovy, $aspect, $znear, $zfar); #} ())
(de gluPickMatrix ( x y delx dely viewport)
    ((GLdouble) x y delx dely)
    ((-idx1- (-int-)) viewport)
    #{ gluPickMatrix ($x, $y, $delx, $dely, IDX_PTR($viewport,int)); #} ())
(de gluProject ( objx objy objz model proj view winx winy winz)
    ((GLdouble) objx objy objz)
    ((-idx1- (-double-)) model proj)
    ((-idx1- (-int-)) view)
    ((-idx1- (-double-)) winx winy winz)
    #{ gluProject ($objx, $objy, $objz, IDX_PTR($model,double), IDX_PTR($proj,double), IDX_PTR($view,int), IDX_PTR($winx,double), IDX_PTR($winy,double), IDX_PTR($winz,double)); #} ())
(de gluPwlCurve ( nurb count data stride type)
    ((-gptr- "GLUnurbs*") nurb)
    ((GLint) count)
    ((-idx1- (-float-)) data)
    ((GLint) stride)
    ((GLenum) type)
    #{ gluPwlCurve ($nurb, $count, IDX_PTR($data,float), $stride, $type); #} ())
(de gluQuadricCallback (quad which callbackfunc)
    ((-gptr- "GLUquadric*") quad)
    ((GLenum) which)
    ((-gptr-) callbackfunc)
    #{  gluQuadricCallback ($quad, $which, $callbackfunc); #} ())
(de gluQuadricDrawStyle (quad draw)
    ((-gptr- "GLUquadric*") quad)
    ((GLenum) draw)
    #{ gluQuadricDrawStyle ($quad, $draw); #} ())
(de gluQuadricNormals ( quad normal)
    ((-gptr- "GLUquadric*") quad)
    ((GLenum) normal)
    #{ gluQuadricNormals ($quad, $normal); #} ())
(de gluQuadricOrientation ( quad orientation)
    ((-gptr- "GLUquadric*") quad)
    ((GLenum) orientation)
    #{ gluQuadricOrientation ($quad, $orientation); #} ())
(de gluQuadricTexture ( quad texture)
    ((-gptr- "GLUquadric*") quad)
    ((GLboolean) texture)
    #{ gluQuadricTexture ($quad, $texture); #} ())
(de gluScaleImage ( format win hin typein datain wout hout typeout dataout)
    ((GLenum) format)
    ((GLsizei) win hin)
    ((GLenum) typein)
    ((-gptr-) datain)
    ((GLsizei) wout hout)
    ((GLenum) typeout)
    ((-gptr-) dataout)
    (int #{ gluScaleImage ($format, $win, $hin, $typein, $datain, $wout, $hout, $typeout, $dataout) #}))
(de gluSphere ( quad radius slices stacks)
    ((-gptr- "GLUquadric*") quad)
    ((GLdouble) radius)
    ((GLint) slices stacks)
    #{ gluSphere ($quad, $radius, $slices, $stacks); #} ())
(de gluTessBeginContour (tess)
    ((-gptr- "GLUtesselator*") tess)
    #{ gluTessBeginContour ($tess); #} ())
(de gluTessBeginPolygon (tess data)
    ((-gptr- "GLUtesselator*") tess)
    ((-gptr-) data)
    #{ gluTessBeginPolygon ($tess, $data); #} ())
(de gluTessCallback (tess which callbackfunc)
    ((-gptr- "GLUtesselator*") tess)
    ((GLenum) which)
    ((-gptr-) callbackfunc)
    #{ gluTessCallback ($tess, $which, $callbackfunc); #} ())
(de gluTessEndContour (tess)
    ((-gptr- "GLUtesselator*") tess)
    #{ gluTessEndContour ($tess); #} ())
(de gluTessEndPolygon (tess)
    ((-gptr- "GLUtesselator*") tess)
    #{ gluTessEndPolygon ($tess); #} ())
(de gluTessNormal (tess valuex valuey valuez)
    ((-gptr- "GLUtesselator*") tess)
    ((GLdouble) valuex valuey valuez)
    #{ gluTessNormal ($tess, $valuex, $valuey, $valuez); #} ())
(de gluTessProperty (tess which data)
    ((-gptr- "GLUtesselator*") tess)
    ((GLenum) which)
    ((GLdouble) data)
    #{ gluTessProperty ($tess, $which, $data); #} ())
(de gluTessVertex (tess location data)
    ((-gptr- "GLUtesselator*") tess)
    ((-idx1- (-double-)) location)
    ((-gptr-) data)
    #{ gluTessVertex ($tess, IDX_PTR($location,double), $data); #} ())
(de gluUnProject (winx winy winz model proj view objx objy objz)
    ((GLdouble) winx winy winz)
    ((-idx1- (-double-)) model proj)
    ((-idx1- (-int-)) view)
    ((-idx1- (-double-)) objx objy objz)
    (int #{ gluUnProject ($winx, $winy, $winz, IDX_PTR($model,double), IDX_PTR($proj,double), IDX_PTR($view,int), IDX_PTR($objx,double), IDX_PTR($objy,double), IDX_PTR($objz,double)) #}))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(setq glufunclist 
  '("gluBeginCurve" "gluBeginPolygon" "gluBeginSurface"
    "gluBeginTrim" "gluBuild1DMipmaps" "gluBuild2DMipmaps" "gluCylinder"
    "gluDeleteNurbsRenderer" "gluDeleteQuadric" "gluDeleteTess" "gluDisk"
    "gluEndCurve" "gluEndPolygon" "gluEndSurface" "gluEndTrim" "gluErrorString"
    "gluGetNurbsProperty" "gluGetString" "gluGetTessProperty"
    "gluLoadSamplingMatrices" "gluLookAt" "gluNewNurbsRenderer" "gluNewQuadric"
    "gluNewTess" "gluNextContour" "gluNurbsCallback" "gluNurbsCurve"
    "gluNurbsProperty" "gluNurbsSurface" "gluOrtho2D" "gluPartialDisk"
    "gluPerspective" "gluPickMatrix" "gluProject" "gluPwlCurve"
    "gluQuadricCallback" "gluQuadricDrawStyle" "gluQuadricNormals"
    "gluQuadricOrientation" "gluQuadricTexture" "gluScaleImage" "gluSphere"
    "gluTessBeginContour" "gluTessBeginPolygon" "gluTessCallback"
    "gluTessEndContour" "gluTessEndPolygon" "gluTessNormal" "gluTessProperty"
    "gluTessVertex" "gluUnProject"))

(mod-dlopen "/usr/lib/libGLU.so")

(apply dhc-make
       (cons "openglu" (mapcar named (mapcar downcase glufunclist))))

#? (gluBeginCurve <nurb>)
#? (gluBeginPolygon <tess>)
#? (gluBeginSurface <nurb>)
#? (gluBeginTrim <nurb>)
#? (gluBuild1DMipmaps <target> <component> <width> <format> <type> <data>)
#? (gluBuild2DMipmaps <target> <component> <width> <height> <format> <type> <data>)
#? (gluCylinder <quad> <base> <top> <height> <slices> <stacks>)
#? (gluDeleteNurbsRenderer <nurb>)
#? (gluDeleteQuadric <quad>)
#? (gluDeleteTess <tess>)
#? (gluDisk <quad> <inner> <outer> <slices> <loops>)
#? (gluEndCurve <nurb>)
#? (gluEndPolygon <tess>)
#? (gluEndSurface <nurb>)
#? (gluEndTrim <nurb>)
#? (gluErrorString <error>)
#? (gluGetNurbsProperty <nurb> <property> <data>)
#? (gluGetString <name>)
#? (gluGetTessProperty <tess> <which> <data>)
#? (gluLoadSamplingMatrices <nurb> <model> <perspective> <view>)
#? (gluLookAt <eyex> <eyey> <eyez> <centerx> <centery> <centerz> <upx> <upy> <upz>)
#? (gluNewNurbsRenderer)
#? (gluNewQuadric)
#? (gluNewTess)
#? (gluNextContour <tess> <type>)
#? (gluNurbsCallback <nurb> <which> <callbackfunc>)
#? (gluNurbsCurve <nurb> <knotcount> <knots> <stride> <control> <order> <type>)
#? (gluNurbsProperty <nurb> <property> <value>)
#? (gluNurbsSurface <nurb> <sknotcount> <sknots> <tknotcount> <tknots> <sstride> <tstride> <control> <sorder> <torder> <type>)
#? (gluOrtho2D <left> <right> <bottom> <top>)
#? (gluPartialDisk <quad> <inner> <outer> <slices> <loops> <start> <sweep>)
#? (gluPerspective <fovy> <aspect> <znear> <zfar>)
#? (gluPickMatrix <x> <y> <delx> <dely> <viewport>)
#? (gluProject <objx> <objy> <objz> <model> <proj> <view> <winx> <winy> <winz>)
#? (gluPwlCurve <nurb> <count> <data> <stride> <type>)
#? (gluQuadricCallback <quad> <which> <callbackfunc>)
#? (gluQuadricDrawStyle <quad> <draw>)
#? (gluQuadricNormals <quad> <normal>)
#? (gluQuadricOrientation <quad> <orientation>)
#? (gluQuadricTexture <quad> <texture>)
#? (gluScaleImage <format> <win> <hin> <typein> <datain> <wout> <hout> <typeout> <dataout>)
#? (gluSphere <quad> <radius> <slices> <stacks>)
#? (gluTessBeginContour <tess>)
#? (gluTessBeginPolygon <tess> <data>)
#? (gluTessCallback <tess> <which> <callbackfunc>)
#? (gluTessEndContour <tess>)
#? (gluTessEndPolygon <tess>)
#? (gluTessNormal <tess> <valuex> <valuey> <valuez>)
#? (gluTessProperty <tess> <which> <data>)
#? (gluTessVertex <tess> <location> <data>)
#? (gluUnProject <winx> <winy> <winz> <model> <proj> <view> <objx> <objy> <objz>)

