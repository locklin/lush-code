
(ogre)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#? glviewer
;; an Ogre class that allows to rotate and translate
;; an OpenGl object.
(defclass glviewer column
  px py pz
  ax ay az
  globject
  glwindow)
  
#? (new glviewer <globject> <glwindow> <pz>)
;; creates a glviewer Ogre window with sliders
;; that allow to translate and rotate an OpenGl drawing.
;; <globject> must be an object with a "repaint" method
;; that uses OpenGL to paint itself.
;; <glwindow> is the SN window (with a GL canvas) in
;; which the object will be drawn.
;; <pz> is the distance from the origin to the camera.
;; The camera initially looks at the origin from somewhere
;; on the Z axis.
(defmethod glviewer glviewer (glo glw lpz)
  (setq globject glo)
  (setq glwindow glw)
  (let ((call (eval '(lambda (c) 
                       (letslot 
                        `this
                        (let ((window glwindow))
                          (graphics-batch
                           (glmatrixmode GL_MODELVIEW)
                           (glloadidentity)
                           (gltranslatef (==> px getdata)
                                         (==> py getdata)
                                         (==> pz getdata))
                           (glrotatef (==> ax getdata) 1 0 0)
                           (glrotatef (==> ay getdata) 0 1 0)
                           (glrotatef (==> az getdata) 0 0 1)
                           (==> globject repaint))))))))
    (==> this column
         (new row (setq px (new hslider -5 5 call)) (new string "X"))
         (new row (setq py (new hslider -5 5 call)) (new string "Y"))
         (new row (setq pz (new hslider -10 -1 call)) (new string "Z"))
         (new row (setq ax (new hslider -180 180 call)) (new string "AX"))
         (new row (setq ay (new hslider -180 180 call)) (new string "AY"))
         (new row (setq az (new hslider -180 180 call)) (new string "AZ")))
    (==> px setdrag call) (==> px setdata 0) (==> px setstep 0.05)
    (==> py setdrag call) (==> py setdata 0) (==> py setstep 0.05)
    (==> pz setdrag call) (==> pz setdata lpz) (==> pz setstep 0.05)
    (==> ax setdrag call) (==> ax setdata 0) (==> ax setstep 1)
    (==> ay setdrag call) (==> ay setdata 0) (==> ay setstep 1)
    (==> az setdrag call) (==> az setdata 0) (==> az setstep 1)))


