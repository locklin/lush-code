;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; a char-db with "sidemen" for SDNN-like training
;; Yann LeCun

(mload "char-db")
(mload "ocr/rawchar-process")

#? sidemen-db
;; a char-db which adds characters picked at
;; random to the side of the central character
(defclass sidemen-db char-db
  base 
  empty
  ld1 rd1 ld2 rd2 lp rp)

#? (new sidemen-db <base> <sidemen>)
;; makes a new sidemen-db, <base> must be a char-db
;; and <sidemen> a module that operates on rawchars.
;; <sidemen> must understand the method fprop with 2 arguments,
;; an input rawchar and an output rawchar. fprop should appropriately
;; resize the output rawchar.
(defmethod sidemen-db sidemen-db (b ilp ild1 ild2 irp ird1 ird2)
  (setq base b)
  (setq empty (short-matrix 2 2))
  (setq ld1 ild1)
  (setq rd1 ird1)
  (setq ld2 ild2)
  (setq rd2 ird2)
  (setq lp ilp)
  (setq rp irp))

(defmethod sidemen-db size () (==> base size))

(defmethod sidemen-db get-inp (n)
  (let* ((s (==> base size))
         (l :(==> base get-inp (int (rand 0 (1- s)))):image)
         (r :(==> base get-inp (int (rand 0 (1- s)))):image)
         (rez (==> base get-inp n)))
    (rc-add-sidemen rez 
                    (if (< (rand 0 1) lp) l empty) (int (rand ld1 ld2))
                    (if (< (rand 0 1) rp) r empty) (int (rand rd1 rd2)))
    rez))

(defmethod sidemen-db get-des (n)
  (==> base get-des n))

(defmethod sidemen-db get-info (n)
  (==> base get-info n))

