;;; Lush Lisp interpreter and development tools
;;; Copyright (C) 1991-1999 Leon Bottou and Neuristique.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 2 of the License, or
;;; (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with this program; if not, write to the Free Software
;;; Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;;    "help.lsh"   
;;;;    The help subsystem...
;;;;	(C) LYB 1994
;;;;
;;;;  $Id: help.lsh,v 0.1.1.1 2001-10-31 17:29:39 profshadoko Exp $
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;; ========================================
;;; Help on help
;;; ========================================

#? *** Help.
;; The online help system of Lush is able to perform several tasks.
;;.IP
;; If you want to check the usage of a regular Lush function, you can
;; use function <apropos> to retrieve its documentation and display it
;; on your screen.
;;.IP
;; If you want to document your Lush functions, just add comments 
;; in a particular format in your source file. The help system will 
;; format your comments and insert them into the help database.
;;.IP
;; Finally, the help system can produce a complete documentation
;; in HTML.


;;; ========================================
;;; A propos
;;; ========================================

#? ** Obtaining Help
;; You can obtain using command <apropos> of macro-character <^A>.
;; For instance, typing
;;.VP
;;   ? ^A car
;;.PP
;; returns a choice of help entries matching string ``car''.


;;; ----------------------------------------
#? ^A <topic>
;; This macro character calls command <apropos>.

(dmc |^A| (list 'apropos (read-string)))

;;; ----------------------------------------
#? (apropos <topic>)
;; This command displays some help text for a given subject <topic>.
;;
;; If several help entries match string <topic>, the list of the
;; titles of the matching entries is displayed. The user can then
;; select one entry using its number and proceed.
;;
;; The text for this entry is then formatted and displayed.  using a
;; pager program.  References to related entries are also displayed A
;; prompt is then displayed.
;;.IP
;; Entering <v> redisplays the current entry.
;;.IP
;; Entering <u> jumps to the section entry for this entry.
;;.IP
;; Entering <n> or <p> jumps to the next or previous entries 
;; in this section of the manual.
;;.IP
;; Entering a number jumps to the numbered subentry or related entry
;; attached to this entry.
;;.IP
;; Entering <s> displays the initial list of entries matching your query.
;;.IP
;; Entering <q> or just typing <CR> quits the help system.


(de apropos(topic)
  (each (((file . root) help-root))
    (when (not root) 
      (help-parse file) ) )
  (let* ((found ())
	 (entries ())
	 (now  ())
	 (up ())
	 (prev ())
	 (next ())
	 (format t)
	 (show t)
	 (ok t) )
    (if (regex-match "[ \t]*" topic)
	(setq found (all (((file . root) help-root)) (list root)))
      (setq found (help-match topic)) )
    (cond
      ((not found)
       (printf "<< no help entry matches \"%s\" >>\n" topic)
       (setq ok ()) )
      ((not (cdr found))
       (setq now (car found))) )
    (while ok
      (when format
	(setq up (cdr now))
	(setq prev ())
	(setq next ())
	(when (cadr now)
	  (let* ((sons :(cadr now):sons)
		 (m1 (cadr (member (car now) :(cadr now):sons)))
		 (m2 (cadr (member (car now) (reverse :(cadr now):sons)))) )
	    (when m1 (setq next (cons m1 (cdr now))))
	    (when m2 (setq prev (cons m2 (cdr now)))) ) )
	(if now
	    (setq entries (help-format now prev next up))
	  (help-found (setq entries found)) )
	(setq show t) 
	(setq format ()) )
      (when show
	(if help-pager
	    (sys (sprintf "%s %s" help-pager help-tmp))
	  (copyfile help-tmp "$stdout") )
	(setq show ()) )
      (printf "(V)iew,%s%s%s%s (S)earch list, (Q)uit :"
	      (if prev " (P)rev," "")
	      (if next " (N)ext," "")
	      (if up " (U)p," "")
	      (if entries (sprintf " (1-%d) select," (length entries)) "") )
      (flush)
      (skip-char " ")
      (selectq (setq ok (downcase (read-string)))
	("v" 
	 (setq show t))
	(("p" "-") 
	 (when prev (setq now prev format t)))
	(("n" "+")  
	 (when next (setq now next format t)))
	("u"
	 (setq now up up () format t) )
	("s" 
	 (setq now () format t))
	(("q" "")
	 (setq ok ()))
	(t   
	  (when (regex-match "[0-9]+" ok)
	    (setq ok (val ok))
	    (when (and (> ok 0) (<= ok (length entries)))
	      (setq back now now (nth (1- ok) entries))
	      (setq format t) ) ) ) ) )
    () ) )


;;; ========================================
;;; Adding help documentation
;;; ========================================

;;; ----------------------------------------
#? ** Adding Help.
;; Online help is either extracted from comments in Lush files <".lsh">
;; or extracted from special <".hlp"> files located in one of 
;; the directories specified with variable <help-dir-list>.
;;.IP
;; Help located in a Lush file <".lsh"> is registered when you load the
;; Lush file.  The help text located in this file is parsed when
;; you request help using command <apropos> or macro-character <^A>.
;;.IP
;; Help located in the help files <".hlp"> must be pre-parsed using
;; command <help-make> and stored into ``book'' files located
;; in the same directory than the help file itself.
;; When the help system is invoked for the first time, it loads
;; all book files specified by variable <help-book-list>.
;;.PP
;; Looking at file <"<lushdir>/lib/help.lsh"> is a good way to learn how
;; to organize the comments of a Lush file in order to provide help
;; entries.  Each help entry is introduced by a title line starting
;; with macro-character <#?>.
;;
;;.IP
;; Section entries contain a number of stars and the section name.
;; Section names are terminated with a period.
;; All the following entries containing zero or less stars 
;; than this entry are subentries of this entry.
;;.VP
;;       #? *** Section Title.
;;.IP
;; Variable description entries just mention the name
;; of the variable. We suggest that you insert a
;; ``.TYPE VAR'' directive as well.
;;.VP
;;       #? result
;;.IP
;; Function description entries indicate how to call
;; the function. Arguments are indicated by angle brackets.
;; Here are a few examples:
;;.VP
;;       #? (car <list>)
;;       #? (+ <n_1> ... <n_n>)
;;       #? (new-window [<w> <h>] <name>)
;;.IP
;; Class description are usually associated to an entry
;; indicating how to create an instance. Method documentation
;; entries show how to call the method.
;;.VP
;;       #? (new helpinfo <record>)
;;       #? (==> <helpinfo> tty-print)
;;.IP
;; You can also require the help parser to read help from
;; another file. The following example inserts all toplevel entries
;; from file <"toto.hlp"> as a section marked with two stars
;; (regardless of the number of stars in file <"toto.hlp">.)
;;.VP
;;       #? ** << toto.hlp
;;.PP
;; The help text is then composed using the following comment lines
;; until a non comment line is reached. Blank lines as well as dotted
;; directives delimitate paragraphs.  Arguments and literal should
;; be surrounded with angle brackets.
;; 
;; Special dotted directives inserted in the help test
;; are recognized by the parser. Some directive provide
;; additional information for indexing the entry:
;;.VP
;;  the topic filename    ;;.FILE help.lsh
;;  the topic type        ;;.TYPE  DE
;;  the short description ;;.DESC this function does blah and blah
;;  related entries       ;;.SEE (apropos <topic>)
;;.PP
;; Some directives provide formatting instructions
;; pertaining to the next paragraph
;;.VP
;;  ordinary paragraph    ;;.PP
;;  indented paragraph    ;;.IP
;;  verbatim paragraph    ;;.VP
;;  online doc only       ;;.IFHLP
;;  paper manual only     ;;.IFTEX
;;.PP
;; Directive EX lets you run a lisp expression and display
;; it as an example during when the user looks the corresponding
;; entry. You should make sure that this operation carries no side
;; effect.
;;.VP
;;  running an example    ;;.EX (expression)
;;.PP
;; Directive EPS lets you include an SN- or TL-created EPS-file.
;; The name of the file should be given by the <figure=<name>>
;; parameter. Further optional parameters are <height=<height>>
;; and  <width=<width>>. Both express a number of pixels.
;;.VP
;;  include an EPS-file   ;;.EPS figure=toto.eps height=280
;;.PP
;; Certain conventions have been established:
;; Angle brackets delimitate the arguments of a function as well
;; as Lush objects embedded in the text. Strings are delimited
;; by two backquotes <``> and two quotes <''>.
;;.VP
;;  <identifier> <"string"> <( list )>
;;  ``A non Lush string''
;;.PP
;; Help files <".hlp"> just contain a text formatted as explained
;; above.  Semicolons introducing comments however are unnecessary.



;;; ========================================
;;; Help node
;;; ========================================

(defclass helpnode object
  also                                  ; see also nodes
  type                                  ; object type
  where
  lines
  sons                                  ; sub-topics
  file
  entry
  desc                                  ; short description
  (eps-files '(())) 
  )

(defmethod helpnode helpnode(aentry afile)
  (setq entry aentry)
  (setq file afile) )




;;; ========================================
;;; Help root
;;; ========================================

(defclass helproot helpnode
  topics
  )

(defmethod helproot helproot(afile)
  (setq entry (sprintf "Help file (%s)" (basename afile)))
  (setq lines '((pp . "Please select a topic:")))
  (setq type "ROOT") )

(defmethod helproot add-node(topic section nodelist)
  (setq topic (regex-subst "[ \t]+" " " (downcase topic)))
  (setq topic (regex-subst "(^[ \t]+|[ \t]+$)" "" topic))
  (let ((atopic (assoc topic topics)))
    (when (not atopic)
      (setq atopic (list topic))
      (setq topics (cons atopic topics)) )
    (rplacd atopic nodelist) )
  (setq :section:sons (nconc1 :section:sons (car nodelist))) )




;;; ========================================
;;; Globals
;;; ========================================

#? ** Help internals
;; Here are the functions used by the help system.

;; ----------------------------------------
#? (help-startup)
;;.TYPE DE
;; Function <help-startup> initializes the help system.
;; This initialization depends on several variable that may
;; be initialized by the Lush startup files. 
;;
;; The most important variable, <help-book-list>, is a list
;; of strings describing the precompiled books to be loaded
;; during the initialization. These precompiled books are
;; created with function <help-make>. The default value
;; or variable <help-book-list> is <("lush.hlp")>.
;;
;; Help files are usually searched along the help path
;; stored in list <help-dir-list>. For compatibility reasons
;; variable <help-dir> contains the name of the
;; default help directory <"<lushdir>/hlp">.
;;
;; Function <help-startup> then chooses the program used for
;; display help. The program name, usually <"more"> is stored into 
;; variable <help-pager>. Function <help-startup> also generates 
;; a temporary file name into variable <help-tmp>.
;;
;; Finally <help-startup> loads the precompiled books and merge
;; them with the already present help information in variable
;; <help-root>.  This variable contains all the help information
;; loaded in the system at a given time. It contains one entry
;; <(filename helproot)> for each file loaded in the help system.


(de help-startup ()
  ;; Help directory
  (setq help-dir (concat-fname lushdir "hlp"))
  (when (not help-dir-list)
    (setq help-dir-list (list help-dir))
    (let ((helpdev-dir (concat-fname lushdir "hlpdev")))
      (when (dirp helpdev-dir)
	(setq help-dir-list (cons helpdev-dir help-dir-list)) ) ) )
  ;; Help pager
  (when (not (stringp help-pager))
    (setq help-pager (when (not (and winlushp (winlushp))) "more")) )
  ;; Help temporary file
  (when (not (stringp help-tmp))
    (setq help-tmp (tmpname)))
  ;; Load help books
  (when (not help-book-list) 
    (setq help-book-list '("lush.hlp")) )
  (each ((h help-book-list))
    (setq h (regex-subst "(\\.hlp|\\.lsh|\\.bk)$" "" h))
    (setq h (help-search-file (concat h ".bk")))
    (when (filep h)
      (each (((file . root) (reading h (bread))))
	(let ((hroot (assoc file help-root)))
	  (if hroot (rplacd hroot root)
	    (setq help-root (nconc1 help-root (cons file root))))))))
  help-book-list )



;;; ----------------------------------------
#? (help-make <...files...>)
;; Parse all the specified help files and records the resulting help
;; tree into corresponding precompiled book files stored in 
;; the help directory. If no arguments are provided, the default
;; book list <help-book-list> is assumed.

(de help-make files
  (each ((h (or files help-book-list)))
    (setq help-root ())
    (help-parse h 4) 
    (setq h (help-search-file h))
    (writing (concat (regex-subst "(\\.hlp|\\.lsh|\\.bk)$" "" h) ".bk")
      (bwrite help-root) ) )
  (setq help-root ())
  (help-startup) )



;;; ========================================
;;; Parsing help files
;;; ========================================


;; ----------------------------------------
#? (help-search-file <file> [<hd>])
;; Tries to locate a given help file <file>.
;; Help files are searched along the help path. SN files are searched
;; along the SN path. If everything fails, the specified directory <hd>
;; is assumed.

(de help-search-file (file &optional (hd "."))
  ;; Search along help path
  (let ((dirs (or help-dir-list (list help-dir)))
	(fullname ()) )
    (when (regex-match ".*\\.(lsh|sn|tl)" file)
      ;; Search SN files along SN path
      (setq dirs (cons "." (path))) )
    (while (and dirs 
		(setq fullname (concat-fname (car dirs) file))
		(not (filep fullname)) )
      (setq dirs (cdr dirs)) )
    (if (not dirs)
	(setq fullname (concat-fname hd file)) )
    fullname ) )


;; ----------------------------------------
#? (help-parse <file>  [<tb> [<readp>]])
;; Parse the help file <file> and update the current help tree.  When
;; argument <tb> is a number, function <help-parse> displays the
;; various sections starting on column <tb>.  Flag <readp> tells this
;; function to read the help text as well.

(de help-parse(file &optional tb readp)
  (printf " [%s] (parsing help)\n" file)
  (let* ((fname (help-search-file file))
	 (hroot (assoc file help-root))
	 (root (new helproot file))
	 (line ()) )
    (when (not (filep fname))
      (error 'help-parse "Help file not found" file) )
    (if hroot
	(rplacd hroot root)
      (setq hroot (cons file root))
      (setq help-root (cons hroot help-root)) )
    (reading fname
      (help-parse-sub root root () ()
		      tb readp (dirname fname)) )
    (if (not (cdr :root:sons))
	(let ((son (car :root:sons)))
	  (if son
	      (setq :root:also :son:also
                    :root:desc :son:desc
		    :root:type :son:type
		    :root:where :son:where
		    :root:lines :son:lines
		    :root:sons :son:sons
		    :root:file :son:file
		    :root:entry :son:entry ) ) ) ) ) )


(de help-parse-sub(root section nodelist level &optional tb readp hd)
  (let ((ok t))
    (while (progn
	     (while (and ok (not line))
	       (if (= (skip-char "\n\r") "\e")
		   (setq ok ()))
	       (if (and (= (read-string 1) "#")
			(= (read-string 1) "?") )
		   (setq line (read-string))
		 (skip-char "~\n\r") ) )
	     ok )
      (let* ((pattern "^[ \t]*((\\**)[ \t]*((<<)?)[ \t]*(.*))$")
	     (lvl (len (regex-subst pattern "%1" line)))
	     (txt (regex-subst pattern "%4" line)) )
	(if (and level (>= lvl level))
	    (setq ok ())
	  (if (= (regex-subst pattern "%2" line) "<<")
	      ;; INCLUDE
	      (let* ((file (regex-subst "[ \t]+$" "" txt))
		     (fname (help-search-file file hd)) )
		(setq line ())
		(reading fname
		  (help-parse-sub root section nodelist ()
				  tb readp (dirname fname) ) ) )
	    ;; ENTRY
	    (let* ((entry (regex-subst "[ \t]+$" "" txt))
		   (node (new helpnode entry file))
		   (nodelist (cons node nodelist)) )
	      (when (> lvl 0)
		(setq :node:type t)
		(when tb
		  (tab tb) 
		  (printf "%s (%s)\n" entry file) ) )
	      (setq line (when readp (==> node read-here)))
	      (help-parse-sub root node nodelist lvl
			      (when tb (+ tb 2)) readp hd) 
	      (==> root add-node entry section nodelist) ) ) ) ) ) ) )


;;; ========================================
;;; Help macro
;;; ========================================

;;; ----------------------------------------
#? #? <entry>
;;.TYPE DMC
;; This macro marks the node root as outdated.

(dmc |#?|
  (when (and file-being-loaded (<> file-being-loaded "$stdin"))
    (let ((hroot (assoc file-being-loaded help-root)))
      (if hroot
	  (rplacd hroot ())
	(setq hroot (list file-being-loaded))
	(setq help-root (cons hroot help-root)) ) ) )
  (skip-char "~\n\r")
  () )

;;; ========================================
;;; Walking the help tree
;;; ========================================


;;; ----------------------------------------
#? (help-search <topic>)
;; Finds a list of help nodes whose entry name is equal to <topic>.
;; Each help node is referenced by a list whose first element is the
;; node, whose second element is the node's section, etc...

(de help-search(topic)
  (setq topic (regex-subst "[ \t]+" " " (downcase topic)))
  (setq topic (regex-subst "(^[ \t]+|[ \t]+$)" "" topic))
  (let ((found ()))
    (each (((file . root) help-root))
      (each ((htopic :root:topics))
	(when (= topic (car htopic))
	  (setq found (nconc1 found (cdr htopic))) ) ) )
    found ) )

;;; ----------------------------------------
#? (help-match <topic>)
;; Finds a list of help nodes whose entry name contains string
;; <topic>.  Each help node is referenced by a list whose first
;; element is the node, whose second element is the node's section,
;; etc...

(de help-match(topic)
  (setq topic (regex-subst "[ \t]+" " " (downcase topic)))
  (setq topic (regex-subst "(^[ \t]+|[ \t]+$)" "" topic))
  (setq topic (regex-subst "_" "-" topic))
  (let ((found ()))
    (each (((file . root) help-root))
      (each ((htopic :root:topics))
	(when (or (index topic (car htopic))
		  (index topic (regex-subst "_" "-" (car htopic))) )
	  (setq found (nconc1 found (cdr htopic))) ) ) )
    found ) )


;;; ----------------------------------------
;;; Load help node.

(defmethod helpnode read()
  (reading (help-search-file file)
    ;; Search entry
    (let ((again t)
	  (line ())
	  (topic ()))
      (while (progn
	       (setq line ())
	       (while (and again (not line))
		 (when (= (skip-char "\n\r") "\e")
		   (setq again ()))
		 (if (= (read-string "#?") "#?")
		     (setq line (read-string))
		   (skip-char "~\n\r") ) )
	       again )
	(setq topic (regex-subst "^[ \t]*\\**[ \t]*" "" line))
	(setq topic (regex-subst "[ \t]+$" "" topic))
	(when (= entry topic)
	  (setq again ()) ) )
      ;; Go reading.
      (if again
	  (setq where () also ()
		lines '((pp . "<< help entry not found >>")) )
	(==> this read-here) ) ) ) )


(defmethod helpnode read-here()
  (setq lines () where () also ())
  ;; Try to figure out TYPE from ENTRY
  (cond
    ((= type t)
     (setq type t) )
    ((regex-match "\\(==> .*\\)" entry)
     (setq type "MSG") )
    ((regex-match "\\(new .*\\)" entry)
     (setq type "CLASS") )
    ((regex-match "\\([-a-zA-Z0-9+*/<>=]+( .*)?\\)" entry)
     (let ((symb (regex-subst "\\(([-a-zA-Z0-9+*/<>=]+)( .*)?\\)" "%0" entry)))
       (setq symb (apply scope (list (named symb))))
       (when symb 
	 (setq symb (pname (classname (classof symb))))
	 (setq type (regex-subst "\\|(.*)\\|" "%0" symb)) ) ) ) )
  ;; Try to figure out WHERE from FILE
  (when (stringp file)
    (if (regex-match ".*\\.(sn|tl)" file)
	(setq where (basename file)) ) )
  ;; Go reading
  (let ((line ())
	(para "")
	(paratype 'pp)
	(regex (selectq (regex-subst ".*(\\.[a-z]+)$" "%0" file)
		 (".tl"  "^;+(.*)$")
		 (".lsh"  "^;+(.*)$")
		 (".c"   "^ *\\*+(.*)$")
		 (".hlp" "(.?|[^#].*|#[^?].*)")
		 (t      "(.?|[^#].*|#[^?].*)")
		 ) ) )
    (while (let ((ok t))
	     ;; Test
	     (setq line ())
	     (if (= (skip-char "") "\e")
		 (setq ok ())
	       (read-string 1)
	       (setq line (read-string "~\n\r\e"))
	       (if (regex-match regex line)
		   (setq line (regex-subst regex "%0" line))
		 (setq ok ()) ) )
	     ;; Finished paragraph
	     (when (or (not ok)
		       (regex-match "\\..[A-Z]+.*" line)
		       (regex-match "[ \t]*" line) )
	       (setq para (regex-subst "[ \t\n]+" " " para))
	       (setq para (regex-subst " $" "" para))
	       (setq para (regex-subst "^ " "" para))
	       (setq para (regex-subst "\\. " ".  " para))
	       (when (<> para "")
		 (setq lines (nconc1 lines (cons paratype para))) 
		 (setq para "") ) )
	     ;; Return boolean for while
	     ok )
      (if (regex-match "\\..[A-Z]+.*" line)
	  ;; This is a special .XXX directive
	  (let ((f (regex-subst "^\\.([A-Z]+)[ \t]*(.*)$" "%0" line))
		(a (regex-subst "^\\.([A-Z]+)[ \t]*(.*)$" "%1" line)) )
	    (if (= a "") 
		(setq a ()) 
	      (setq a (regex-subst "[ \t]+$" "" a)) )
	    (selectq f
	      ("TYPE"
	       (when (and a (<> type t)) (setq type a)) )
	      ("DESC"
	       (when a (setq desc a)))
	      ("FILE"
	       (when a (setq where a)) )
	      ("SEE"
	       (when a (setq also (nconc1 also a))) )
	      ("EX"
	       (when a
		 (writing help-tmp (printf "%s))\n" a))
		 (reading help-tmp (setq a (read)))
		 (setq lines (nconc1 lines (cons 'ex a))) ) )
	      ("PP"
	       (setq paratype 'pp) )
	      ("IP"
	       (when ~a (setq a "*"))
	       (setq lines (nconc1 lines (cons 'it a)))
	       (setq paratype 'ip) )
	      ("VP" 
	       (setq paratype 'vp) )
	      ("IFHLP" 
	       (setq paratype 'ifhlp) )
	      ("IFTEX"
	       (setq paratype 'iftex) ) 
	      ("EPS"
	       (if a
		   (setq lines (nconc1 lines (cons 'eps a)))
		 (error () ".EPS directive without filename " (basename file))
		 )
	       ) 
	      (t 
		(printf "Unknown directive %s\n" f) ) ) ) 
	;; This is an ordinary line
	(if (member paratype '(pp ip))
	    (setq para (concat para "\n" line))
	  (setq lines (nconc1 lines (cons paratype line))) ) ) )
    ;; Check that something has been read
    (when (not lines)
      (setq lines '((pp . ""))) )
    (when (and line (= (left line 2) "#?"))
      (mid line 3) ) ) )


;;; ----------------------------------------
;;; Displaying helpnode

(defmethod helpnode paragraph(para &optional (leftside 0) (rightside 72))
  (let ((idx 1) 
	(newidx t)
	(word ()) )
    (while newidx
      (setq newidx (index " " para idx))
      (if (not newidx)
	  (setq word (mid para idx))	  
	(setq word (mid para idx (- newidx idx)))
	(setq idx (1+ newidx)) )
      (cond
	((< (+ (tab) (len word)) rightside)
	 (printf " %s" word) )
	((<> word "")
	 (printf "\n")
	 (tab leftside)
	 (printf "%s" word) ) ) ) ) )


(defmethod helpnode display( &optional has-window)
  (when (not lines)
    (==> this read) )
  (let* ((r0 72)
	 (r1 (- r0 (max 12 (if where (len where) 0))))
	 (r2 (- r1 (max 6 (1+ (if (stringp type) (len type) 0))))) )
    (printf "\n\n") 
    (repeat r0 (printf "-"))
    (printf "\n")
    (==> this paragraph entry 20 (- r2 4))
    (when (stringp type) (tab r2) (printf "%s" type))
    (when where (tab r1) (printf "%s" where))
    (printf "\n") 
    (repeat r0 (printf "-"))
    (printf "\n") 
    (let ((nextparatype ()))
      (each (((paratype . para) lines))
	(when (<> paratype nextparatype)
	  (when (<> paratype 'iftex)
	    (printf "\n") ) )
	(selectq paratype
	  (pp
	    (==> this paragraph para 1 r0)
	    (setq nextparatype ())
	    (printf "\n") )
	  (it
	    (printf "  %s" para)
	    (setq nextparatype 'ip) )
	  (ip
	    (tab 4)
	    (==> this paragraph para 5 r0)
	    (setq nextparatype ()) 
	    (printf "\n") ) 
	  (vp
	    (printf "    %s\n" para) 
	    (setq nextparatype paratype) )
	  (ifhlp
	    (printf "%s\n" para) 
	    (setq nextparatype paratype) )
	  (eps

	   (if (not has-window)
	       (printf "   [ ... epsfile ... ] \n")
	     (printf ".EPS\n")
	     ;; now print correct number of blank lines ...
	     (let* ((i () )
		    (line  (==> this eps-parse para))
		    (height (caddr line))
		    (line-height-guess (+ 6 (text-height "0"))))
	       (nconc1 eps-files line)
	       (for (i 1 (int (+ 1 (/ height line-height-guess)))) (printf "\n"))
	       )
	     )
	   ) 
	  (ex
	    (printf "    ? ")
	    (pprint para)
	    (let ((result (eval para)))
	      (printf "    = ")
	      (pprint result) )
	    (setq  nextparatype ()) ) ) ) ) 
    (printf "\n") ) )


;;; ----------------------------------------
;;; Parsing EPS-header

(defmethod helpnode eps-parse (eps-para)
  (let* ((filename (regex-subst "^(.*)(figure=)([^ ]*)(.*)" "%2" eps-para))
	(width (val (regex-subst"(.*)(width=)([0-9]+)(.*)" "%2" eps-para)))
	(height (val (regex-subst "(.*)(height=)([0-9]+)(.*)" "%2" eps-para)))
	(ps-scale-factor 1) ;;yip; quick and dirty
	(nop (lambda(x) () )) ;; sorry
        (bb (ps-play-low-level filename nop)) ;; just get BoundingBox
	(bpp (parse-bounding-box bb))
	(bby (nth 1 bpp)) 
	(bby2 (nth 3 bpp))
	(bbh (- bby2 bby))
	)
    (when (not height)
      (if (< bbh 1) ;; corrupted BB probably
	  (setq height 100) ;; give 'm a hundred pixels
	(setq height bbh) ) )
    (cons filename (list width height))
    ) )


;;; ----------------------------------------
;;; Creating help


(de help-found(entries)
  (let ((entnum 0))
    (writing help-tmp
      (printf "\n\n")
      (repeat 72 (printf "-"))
      (printf "\nSearch List\n")
      (repeat 72 (printf "-"))
      (printf "\n\n")
      (printf "Found:\n")
      (each ((e entries))
	(tab 2)
	(let ((entry :(car e):entry))
	  (printf "%2d. " (incr entnum))
	  (let ((fname (basename :(last e):file)))
	    (when fname
	      (setq fname (regex-subst "\\.[a-zA-Z]+" "" fname))
	      (printf "[%s]" (left (basename fname) 10)) ) )
	  (tab 20)
	  (printf "%s" (left entry 50))
	  (when (> (len entry) 50) (printf "..."))
	  (printf "\n") ) ) ) ) )


(de help-format(now &optional prev next up)
  (let* ((node (car now)) 
	 (entnum 0)
	 (entries ())
	 (fmt (lambda(e &optional n)
		(tab 12)
		(if n (printf "%s" n) (printf "%2d.  " (incr entnum)))
		(let ((entry :e:entry))
		  (printf "%s %s\n"
			  (left entry (- 72 18))
			  (if (> (len entry) (- 72 18)) "..." "") ) ) )) )
    (when (not :node:lines)
      (==> node read) )
    (writing help-tmp
      (==> node display)
      (printf "\n")
      (when up
	(printf "Up:")
	(fmt (car up) " u.  ") )
      (when next
	(printf "Next:")
	(fmt (car next) " n.  ") )
      (when prev
	(printf "Previous:")
	(fmt (car prev) " p.  ") )
      (when :node:sons
	(printf "\nSubtopics:")
	(setq next (cons (car :node:sons) now))
	(each ((e :node:sons))
	  (setq entries (nconc1 entries (cons e now)))
	  (fmt e) ) )
      (when :node:also
	(let ((also ()))
	  (each ((topic :node:also))
	    (setq also (nconc also (help-search topic))) )
	  (when also
	    (printf "\nSee also:")
	    (each ((e also))
	      (setq entries (nconc1 entries e))
	      (fmt (car e)) ) ) ) )
      (printf "\n")
      entries ) ) )


;;; ----------------------------------------
;;; Remove help.lsh from help root

(let ((root ()))
  (each ((n help-root))
    (when (<> "help.lsh" (basename (car n)))
      (setq root (nconc1 root n)) ) )
  (setq help-root root) ) 

;;; ----------------------------------------
;;; Startup help system

(help-startup)
