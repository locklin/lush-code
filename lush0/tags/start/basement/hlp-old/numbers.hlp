$Id: numbers.hlp,v 0.1.1.1 2001-10-31 17:31:47 profshadoko Exp $
#? *** Numbers.
.SEE Special Numerical Values (IEEE754).

Numbers are the simplest kind of atoms. 
They are stored as double precision floating point numbers. 

Numerical computations in Lush are usually performed in double 
precision. Single precision however is used by some number crunching functions, 
like the matrix calculus operations.

You can type in decimal number using the traditional exponential
notation or using hexadimal numbers preceded by characters <"0x">.
Here are a few examples of legal numbers:
.VP
	23
	3.14
	12e6		;; equivalent to 12000000
	1.2E6		;; equivalent to  1200000
	0x1A		;; equivalent to 26
.PP


#?  ** Elementary Numerical Functions.

The following elementary functions operate on numbers:

#? (+ <n1> ... <nm>)
Computes the sum of numbers <n1> to <nm>.

Example:
.EX (+ 1 2 3 4)

#? (1+ <n>)
Adds 1 to <n>.

Example:
.EX (1+ 4)

#? (-  [<n1>] <n2>)
Subtracts <n2> from <n1>. If one argument only is provided, 
returns the opposite of <n2>.

Example:
.EX (- 2 5)

#? (1- <n>)
Subtracts 1 from <n>.

Example:
.EX (1- (+ 4 5))

#? (* <n1> ... <nm>)
Computes the product of <n1> to <nm>. 

Here is a memory intensive way of computing a factorial:
.EX (apply '* (range 1 5))

#? (2* <n>)
Multiplies <n> by 2.

Example:
.EX (2* (+ 4 5))

#? (/  [<n1>] <n2>)
Divides <n1> by <n2>. If one argument only is provided, 
Function </> returns the inverse of <n2>.

Example:
.EX (/ 3)

#? (2/ <n>)
Divides <n> by 2.

Example:
.EX (2/ 5)

#? (** <n> <m>)
Returns <n> raised to the <m>th power.

Example:
.EX (** 2 5)

#? (next**2 <n>)
.FILE miscenv.lsh
This function returns the first power of 2 equal or greater than <n>.


#? (max <l1> ... <ln>)	
Return the maximum element within <l1> ... <ln>. 
Arguments <li> may be numbers or strings.

Example:
.EX (max 2 3 (* 3 3) (+ 4 3) 

#? (min <l1> ... <ln>)	
Return the minimum element within <l1> ... <ln>. 
Arguments <li> may be numbers or strings.

Example:
.EX (min 2 3 (* 3 3) (+ 4 3) 

#? (rint x)
.FILE miscenv.lsh

This functions rounds the number <x> to the nearest integer.

Example:
.EX (rint -4.5)
.EX (rint 4.4)

#? (round <x> [<n>]))
.FILE miscenv.lsh

This functions rounds the number <x> respecting the desired number of
significant digits.  When the number of significant digit is 0 or
lower, it returns the first power of 10 smaller than or equal to <x>.

The number <x> is expected to be greater than or equal to 0.

.VP
? pi
= 3.1416
? (round pi 3)
= 3.14
? (round (* 1000 pi) 3)))
= 3140
? ;; for most numbers, (round x 0) is not equal to (round x 1)
? (round pi 1)
= 3
? (round pi 0)
= 1
? ;; for powers of ten, (round x 0) is equal to (round x 1)
? (round 1000 1)
= 1000
?  (round 1000 0)
= 1000
.PP

#? ** Integer Arithmetic Functions.

Besides the ordinary number operation functions, a few functions
deal with integer numbers only. For that purpose we consider only
the first 32 bits of the integer part of the number.

#? (div <n1> <n2>)
Returns the quotient of the Euclidian division of <n1> by <n2>.

Example:
.EX (div 5 2)

#? (mod <n1> <n2>)
Returns the remainder of the Euclidian division of <n1> by <n2>.

Example:
.EX (mod 5 2)


#? (bitand <n1> <n2>)
Returns the bitwise AND of integer numbers <n1> and <n2>.

#? (bitor <n1> <n2>)
Returns the bitwise OR of integer numbers <n1> and <n2>.

#? (bitxor <n1> <n2>)
Returns the bitwise exclusive or (XOR) of integer numbers <n1> and <n2>.

#? (bitshl <n1> <n2>)
Shifts the bits of integer <n1> by <n2> positions to the left 
and returns the result.
This is similar to the C operator ``<<''.

#? (bitshr <n1> <n2>)
Shifts the bits of integer <n1> by <n2> positions to the right 
and returns the result.
This is similar to the C operator ``>>''.



#? ** Mathematical Numerical Functions.
Most mathematical functions are now
implemented as DZ functions.
.SEE DZ.


#? (solve <min> <max> <f>)
Simple dichotomical root finder. <f> is a function with one argument
only. <solve> will return a numerical approximation of the solution of
<f(x)=0> between <min> and <max>.  To ensure the existence of this
solution, <f(min)> and <f(max)> must have different signs.

Example:
.EX (solve 1 2 (lambda(x) (- 2 (* x x))))



#? ** Statistical Functions.

Statistical functions are provided for computing random numbers,
computing various statistics on list of numbers or performing
simple linear regressions.

#? (seed <n>)
Sets the random number generator seed. The random generator is
replicable. The same seed will produce the same sequence of random
numbers. Argument <n> must be a legal integer number.

#? (rand [[<a>] <b>])
Returns a uniform random number:
.IP
If no arguments are provided, function <rand> 
returns a random number between 0 and 1.
.IP
If argument <b> only is given, function <rand> 
returns a random number between <-b> and <b>.
.IP
If both arguments <a> and <b>, function <rand>
returns a random number between <a> and <b>. 
.PP
Example:
.EX (rand)


#? (gauss [[<m>] <s>])
Returns a gaussian number with mean <m> and standard deviation <s>.
The default value for argument <m> is <0>. 
The default value for argument <s> is <1>.

Example
.EX (gauss 2)

#? (sup <l>)
Return the largest element of the list <l>.

Example:
.EX (sup (range 1 10))

#? (inf <l>)
Return the smallest element of the list <l>.

Example:
.EX (inf (range 1 10))

#? (rank <list> <target> [<width>])
Returns the list of the indices of the elements of <list> whose
distance to target is smaller or equal than <width>. If argument
<width> is omitted, 0 is assumed.

Example:
.VP
? (de rank-of-max(l)
      (car (rank l (sup l))) )
= rank-of-max
? (rank-of-max '(2 1 4 5 -4 -3 -2) )
= 3
.PP

#? (a-rank-of-min <l> [<comp>])
.TYPE DE
.FILE miscenv.lsh

The function <a-rank-of-min> returns the first rank of the minimum value
in a list <l>.
The optional argument <comp> is a boolean function which takes two arguments
and tests the strict superiority of its first argument on its second.

#? (a-rank-of-max <l> [<comp>])
.TYPE DE
.FILE miscenv.lsh

The function <a-rank-of-min> returns the first rank of minimum value
in list <l>.
Optional argument <comp> is a boolean function which takes two arguments
and tests the strict superiority of its first argument on its second.

#? (mean <l>)
Returns the average of the elements of list <l>.

Example:
.EX (mean (range 1 10))

#? (median <l>)
Returns the median of the elements of list <l>.

Example:
.EX (median (append (range 5 30 2) (range 1 10)))

#? (ksmallest <l> <k>)
Returns the <k>-th smallest elements of list <l>.
Argument <k> must be an integer between 1 and the
size of the list <l>.

Example:
.EX (ksmallest (append (range 5 30 2) (range 1 10)) 10)


#? (quantile <l> <f>)
Returns the <f>-th quantile of the elements of list <l>.
Argument <f> must be a number between 0 and 1.

Example:
.EX (quantile (append (range 5 30 2) (range 1 10)) 0.9)

#? (sdev <l>)
Returns the standard deviation of the elements of list <l>.

Example:
.EX (sdev (range 1 100))

#? (cov <ly> <lx>)
Returns the covariance of the elements of list <lx> versus the
elements of list <ly>.

Example:
.EX (cov (range 1 10) (range 11 30 2))

#? (regression <lx> <ly>)
Simple monovariate linear regression.

Arguments <lx> and <ly> are two lists of numbers. Function
<regression> returns a list of the form <(A B R)>.
.IP
The function <y=Ax+B> is then the best linear
approximation of dependencies between lists <lx> and <ly>.
.IP
The correlation coefficient <R> measures the fit of the approximation.
The closer <R> is to 1, the better the approximation is.
.PP
Example:
.EX (regression (range 1 10) (range 11 30 2))

#? (x-estimate <lr> <y>)
.TYPE DE
.FILE sysenv.lsh
.SEE (regression <lx> <ly>)
Given the result list <lr> of the <regression>, 
returns a linear estimation of <x> given <y>.

#? (y-estimate <lr> <x>)
.TYPE DE
.FILE sysenv.lsh
.SEE (regression <lx> <ly>)
Given the result list <lr> of the <regression>, 
returns a linear estimation of <y> given <x>.

#? (sum <l>)
Returns the sum of the elements of the list <l>.

Example:
.EX (sum (range 1 10))



#? ** List Distances.

The following functions compute various distances between two lists of
numbers, interpreted as vectors in the real space.

#? (add-lists <l1> <l2>)
Return the list of the sums term by term of the elements of lists
<l1> and <l2>. This function is equivalent to:
.VP
(mapcar '+ l1 l2)
.PP

#? (diff-lists <l1> <l2>)
Return the list of the differences term by term of the elements of
lists <l1> and <l2>. This function is equivalent to:
.VP
(mapcar '- l1 l2)
.PP

#? (abs-dist <l1> [<l2>])

Returns the absolute (L1) distance between the lists of numbers <l1>
and <l2>.  The absolute distance is the sum of the absolutes
differences between the elements of <l1> and <l2>.

If argument <l2> is omitted, a lists of zeros is assummed.

Example:
.EX (abs-dist (range 1 10))


#? (sqr-dist <l1> [<l2>])

Returns the squared (L2) distance between the lists of numbers <l1>
and <l2>. The squared distance is the sum of the squares of the
differences between the elements of <l1> and <l2>.

If argument <l2> is omitted, a lists of zeros is assummed.

#? (sup-dist <l1> [<l2>])

Returns the supremum (L_infinity) distance between the lists of
numbers <l1> and <l2>. The supremum distance is the largest absolute
difference between elements of <l1> and <l2>.

If argument <l2> is omitted, a lists of zeros is assummed.

#? (mean-abs-dist <l1> [<l2>])
.TYPE DE
.FILE sysenv.lsh
.SEE (abs-dist <l1> [<l2>])

Returns the average absolute distance between elements of <l1> and
<l2>.  This is defined as the absolute distance divided by the number
of elements in lists <l1> and <l2>.



#? (mean-sqr-dist <l1> [<l2>])
.TYPE DE
.FILE sysenv.lsh
.SEE (sqr-dist <l1> [<l2>])
Returns the average squared distance between elements of <l1> and <l2>.
This is defined as the squared distance divided by the number
of elements in lists <l1> and <l2>.

#? (mean-sup-dist <l1> [<l2>])
.TYPE DE
.FILE sysenv.lsh
.SEE (sup-dist <l1> [<l2>])
Returns the average supremum distance between elements of <l1> and <l2>.
This is defined as the supremum distance divided by the number
of elements in lists <l1> and <l2>.


#? (hamming-dist [<margin>] <l1> [<l2>])
Returns the number of elements of <l1> and <l2> whose absolute
difference is greater than <margin>. 

If argument <l2> is omitted, a list of zeroes is assumed.

The default value for <margin> is <0>.  In this case <hamming-dist>
returns the number of elements strictly different in <l1> and <l2>.

#? (quadrant-dist <l1> <l2>)
Returns the number of elements of <l1> and <l2> whose sign is
different.

#? (mean-hamming-dist [<margin>] <l1> [<l2>])
.TYPE DE
.FILE	sysenv.lsh
.SEE (hamming-dist [<margin>] <l1> [<l2>])
Returns the averaged hamming distance between lists <l1> and <l2>.
The maximal result thus is 1.

#? (mean-quadrant-dist <l1> <l2>)
.TYPE DE
.FILE	sysenv.lsh
.SEE (quadrant-dist <l1> <l2>)
Returns the averaged quadrant distance between lists <l1> and <l2>.
The maximal result thus is 1.

#? ** Constant Numbers.

#? PI
.TYPE CONST
.FILE miscenv.lsh
The well-known transcendental trigonometric number.
.EX pi




