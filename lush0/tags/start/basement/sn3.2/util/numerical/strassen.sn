
#? File "strassen.sn"
;; Strassen's matrix multiplication and inversion.
;; Strassen's algorithms for matrix multiplication and inversion have running
;; time O(n^2.81) compared to O(n^3) for conventional algorithms. The speedup
;; in multiplication becomes visible for large matrices of size > 400 in at 
;; least one of dimensions and reasonably balanced, i.e. when the relative
;; difference between dimensions is comparable (< 5). The speedup in inversion
;; occurs when a (square) matrix has dimension that contains sufficiend power
;; of 2 in its factorization. 
;;
;; The following functions are available:
;;
;; (idx-strassen a b c)                - computes product a * b = c for square
;;                                       matrices of power-of-2 dimension
;;
;; (idx-strassen-arbitrary-size a b c) - computes product a * b = c for 
;;                                       matricex of arbitrary dimensions
;;                                       complying with matrix rules
;;
;; (idx-strassen-m2inv a c)            - computes an inverse of matrix a
;;
;; See documentation for indiviual functions for details. The description of 
;; algorithms can be found on pp. 102-104 in "Numerical Recipees".
;;
;;
;; A NOTE ON NUMERICAL STABILITY
;;
;; In general, Strassen's algorithms are more vulnerable to roundoff errors
;; than the conventional ones. For multiplication there exist the following
;; theoretical bounds on a roundoff error:
;;
;; E_strassen <= n * u * ||A|| * ||B||
;; E_conv     <= n * u *  |A|  *  |B|
;;
;; where n      - inner dimension of A and B
;;       u      - 1/2 * 2^(1-d), d - length of computer word
;;       ||..|| - the largest sum of absolute values in a line (column) of A(B)
;;       |..|   - the largest element of a matrix
;;
;; For practical purposes this error is insignificant for doubles (10^-20 - 
;; 10^-22) but significant (10^-2 - 10^-4) for floats.
;;
;; For inversion things are worse. The error is 10^-7 - 10^-10 for matrices in
;; the range of 1000-2000.
;;
;;.SEE (idx-strassen <a> <b> <c>)
;;.SEE (idx-strassen-arbitrary-size <a> <b> <c>)
;;.SEE (idx-strassen-m2inv <a> <c>)
;;.SEE (idx-m2*m2 <a> <b> <c>)
;;.SEE (idx-m2inv <a> <c>)

(mload "cmacro")
(mload "idx-flt")
(mload "nr")
(load-nr-double)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(de get-sse (c1 c2)
    ((-idx2- (-double-)) c1 c2)
    (let ((sse 0)
          (d1 (idx-dim c2 0))
          (d2 (idx-dim c2 1)))
      (for (i 0 (1- d1))
        (for (j 0 (1- d2))
          (setq sse (+ sse (* (- (c1 i j) (c2 i j)) (- (c1 i j) (c2 i j)))))))

          
      sse
))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Some test results

;;? (test-strassen 1024)
;;Ordinary multiplication: 776 sec
;;Strassen's multiplication: 31 sec
;;SSE = 1.43158e+09
;;= ()
;;? 

;;? (test-strassen-a 1435 1553 1662)
;;Ordinary multiplication: 2693 sec
;;Strassen's multiplication: 126 sec
;;SSE = 3.07052e-21
;;= ()
;;

;;?? (test-strassen-m2inv 1088)
;;Ordinary inversion: 129 sec
;;Strassen's inversion: 41 sec
;;Deviation of ordinary inversion is = 9.08801e-17
;;Deviation of Strassen's inversion is = 7.58472e-14
;;= ()
;;? 


#? (idx-strassen-arbitrary-size <a> <b> <c>)
;; Strassen's multiplication a * b = c, where a, b, c are (-idx2- (-double-))
;; of dimensions m x k, k x n, m x m respectively. 
;;.SEE Strassen's matrix multiplication and inversion
(de idx-strassen-arbitrary-size (a b c)
    ((-idx2- (-double-)) a b c)

    (if (<= (min (min (idx-dim a 0) (idx-dim a 1)) (idx-dim b 1)) 8)
        
        ;; Mundane matrix multiplication
        (idx-m2timesm2 a b c)

      (let* (
             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
             ;; Here's the fun stuff: my recursion :)
             
             ;; Find the smallest power of 2 less than or equal to the 
             ;; smallest of dimensions m, n, k
             (m (idx-dim a 0))
             (k (idx-dim a 1))
             (n (idx-dim b 1))
             (d (** 2 (int (/ (log (min (min m n) k)) (log 2)))))
            )
        (cond     ;; Check between d, d1, d2

         ;; case 1
         ((and (= d m) (= d k) (= d n))
          #{ C_idx_strassen($a, $b, $c) #})


         ;; case 2
         ;;  _____     _____ _____     _____ _____
         ;; |     |   |     |     |   |     |     |
         ;; |  a  | X | b11 | b12 | = | c11 | c12 |
         ;; |_____|   |_____|_____|   |_____|_____|
         ;;
         ;; The resulting operations are:
         ;;
         ;; c11 = a * b11
         ;; c12 = a * b12
         ;;
         ((and (= d m) (= d k) (< d n))
          (let* ((b11 (narrow b 1 d 0))
                 (b12 (narrow b 1 (- n d) d))
                 (c11 (narrow c 1 d 0))
                 (c12 (narrow c 1 (- n d) d))
                )
            #{ C_idx_strassen($a, $b11, $c11) #}
            #{ C_idx_strassen_arbitrary_size($a, $b12, $c12) #}
           ))


         ;; case 3
         ;;  _____ _____     _____     _____
         ;; |     |     |   |     |   |     |
         ;; | a11 | a12 | X | b11 | = |  c  |
         ;; |_____|_____|   |_____|   |_____|
         ;;                 |     |
         ;;                 | b21 |
         ;;                 |_____|
         ;;                
         ;; The resulting operation is:
         ;;
         ;; c = a11 * b11 + a12 * b21
         ;; 
         ((and (= d m) (< d k) (= d n))
          (let* ((a11 (narrow a 1 d 0))
                 (a12 (narrow a 1 (- k d) d))
                 (b11 (narrow b 0 d 0))
                 (b21 (narrow b 0 (- k d) d))
                 (t1 (double-matrix d d))
                 (t2 (double-matrix d d))
                )
            #{ C_idx_strassen($a11, $b11, $t1) #}
            #{ C_idx_strassen_arbitrary_size($a12, $b21, $t2) #}
            (idx-maadd t1 t2 c)))


         ;; case 4
         ;;  _____ _____     _____ _____     _____ _____
         ;; |     |     |   |     |     |   |     |     |
         ;; | a11 | a12 | X | b11 | b12 | = | c11 | c12 |
         ;; |_____|_____|   |_____|_____|   |_____|_____|
         ;;                 |     |     |                
         ;;                 | b21 | b22 |                
         ;;                 |_____|_____|                
         ;;
         ;; The resulting operations are:
         ;;
         ;; c11 = a11 * b11 + a12 * b21
         ;; c12 = a11 * b12 + a12 * b22
         ;;
         ((and (= d m) (< d k) (< d n))
          (let* ((a11 (narrow a 1 d 0))
                 (a12 (narrow a 1 (- k d) d))
                 (b1 (narrow b 0 d 0))
                 (b2 (narrow b 0 (- k d) d))
                 (b11 (narrow b1 1 d 0))
                 (b12 (narrow b1 1 (- n d) d))
                 (b21 (narrow b2 1 d 0))
                 (b22 (narrow b2 1 (- n d) d))
                 (c11 (narrow c 1 d 0))
                 (c12 (narrow c 1 (- n d) d))
                 (t11 (double-matrix d d))
                 (t12 (double-matrix d d))
                 (t21 (double-matrix d (- n d)))
                 (t22 (double-matrix d (- n d)))
                )
            #{ C_idx_strassen($a11, $b11, $t11) #}
            #{ C_idx_strassen_arbitrary_size($a12, $b21, $t12) #}
            #{ C_idx_strassen_arbitrary_size($a11, $b12, $t21) #}
            #{ C_idx_strassen_arbitrary_size($a12, $b22, $t22) #}
            (idx-maadd t11 t12 c11)
            (idx-maadd t21 t22 c12)
           ))


         ;; case 5
         ;;  _____     _____     _____ 
         ;; |     |   |     |   |     |
         ;; | a11 | X |  b  | = | c11 |
         ;; |_____|   |_____|   |_____|
         ;; |     |             |     |
         ;; | a21 |             | c21 |
         ;; |_____|             |_____|
         ;;
         ;; The resulting operations are:
         ;;
         ;; c11 = a11 * b
         ;; c21 = a21 * b
         ;;
         ((and (< d m) (= d k) (= d n))
          (let* ((a11 (narrow a 0 d 0))
                 (a21 (narrow a 0 (- m d) d))
                 (c11 (narrow c 0 d 0))
                 (c21 (narrow c 0 (- m d) d))
                )
            #{ C_idx_strassen($a11, $b, $c11) #}
            #{ C_idx_strassen_arbitrary_size($a21, $b, $c21) #}
           ))


         ;; case 6
         ;;  _____     _____ _____     _____ _____
         ;; |     |   |     |     |   |     |     |
         ;; | a11 | X | b11 | b12 | = | c11 | c12 |
         ;; |_____|   |_____|_____|   |_____|_____|
         ;; |     |                   |     |     |
         ;; | a21 |                   | c21 | c22 |
         ;; |_____|                   |_____|_____|
         ;;
         ;; The resulting operations are:
         ;;
         ;; c11 = a11 * b11
         ;; c12 = a11 * b12
         ;; c21 = a21 * b11
         ;; c22 = a21 * b12
         ;;
         ((and (< d m) (= d k) (< d n))
          (let* ((a11 (narrow a 0 d 0))
                 (a21 (narrow a 0 (- m d) d))
                 (b11 (narrow b 1 d 0))
                 (b12 (narrow b 1 (- n d) d))
                 (c1 (narrow c 0 d 0))
                 (c2 (narrow c 0 (- m d) d))
                 (c11 (narrow c1 1 d 0))
                 (c12 (narrow c1 1 (- n d) d))
                 (c21 (narrow c2 1 d 0))
                 (c22 (narrow c2 1 (- n d) d))
                )
            #{ C_idx_strassen($a11, $b11, $c11) #}
            #{ C_idx_strassen_arbitrary_size($a11, $b12, $c12) #}
            #{ C_idx_strassen_arbitrary_size($a21, $b11, $c21) #}
            #{ C_idx_strassen_arbitrary_size($a21, $b12, $c22) #}
           ))


         ;; case 7
         ;;  _____ _____     _____     _____ 
         ;; |     |     |   |     |   |     |
         ;; | a11 | a12 | X | b11 | = | c11 |
         ;; |_____|_____|   |_____|   |_____|
         ;; |     |     |   |     |   |     |
         ;; | a21 | a22 |   | b21 |   | c21 |
         ;; |_____|_____|   |_____|   |_____|
         ;;
         ;;  The resulting operations are:
         ;;
         ;; c11 = a11 * b11 + a12 * b21
         ;; c21 = a21 * b11 + a22 * b21
         ;; 
         ((and (< d m) (< d k) (= d n))
          (let* ((a1 (narrow a 0 d 0))
                 (a2 (narrow a 0 (- m d) d))
                 (a11 (narrow a1 1 d 0))
                 (a12 (narrow a1 1 (- k d) d))
                 (a21 (narrow a2 1 d 0))
                 (a22 (narrow a2 1 (- k d) d))
                 (b11 (narrow b 0 d 0))
                 (b21 (narrow b 0 (- k d) d))
                 (c11 (narrow c 0 d 0))
                 (c21 (narrow c 0 (- m d) d))
                 (t11 (double-matrix d d))
                 (t12 (double-matrix d d))
                 (t31 (double-matrix (- m d) d))
                 (t32 (double-matrix (- m d) d))
                )
            #{ C_idx_strassen($a11, $b11, $t11) #}
            #{ C_idx_strassen_arbitrary_size($a12, $b21, $t12) #}
            #{ C_idx_strassen_arbitrary_size($a21, $b11, $t31) #}
            #{ C_idx_strassen_arbitrary_size($a22, $b21, $t32) #}
            (idx-maadd t11 t12 c11)
            (idx-maadd t31 t32 c21)
           ))


         ;; case 8
         ;;  _____ _____     _____ _____     _____ _____
         ;; |     |     |   |     |     |   |     |     |
         ;; | a11 | a12 | X | b11 | b12 | = | c11 | c12 |
         ;; |_____|_____|   |_____|_____|   |_____|_____|
         ;; |     |     |   |     |     |   |     |     |
         ;; | a21 | a22 |   | b21 | b22 |   | c21 | c22 |
         ;; |_____|_____|   |_____|_____|   |_____|_____|
         ;;
         ;; The resulting operations are:
         ;;
         ;; c11 = a11 * b11 + a12 * b21
         ;; c12 = a11 * b12 + a12 * b22
         ;; c21 = a21 * b11 + a22 * b21
         ;; c22 = a21 * b12 + a22 * b22
         ;;
         ((and (< d m) (< d k) (< d n))
          (let* ((a1 (narrow a 0 d 0))
                 (a2 (narrow a 0 (- m d) d))
                 (a11 (narrow a1 1 d 0))
                 (a12 (narrow a1 1 (- k d) d))
                 (a21 (narrow a2 1 d 0))
                 (a22 (narrow a2 1 (- k d) d))
                 (b1 (narrow b 0 d 0))
                 (b2 (narrow b 0 (- k d) d))
                 (b11 (narrow b1 1 d 0))
                 (b12 (narrow b1 1 (- n d) d))
                 (b21 (narrow b2 1 d 0))
                 (b22 (narrow b2 1 (- n d) d))
                 (c1 (narrow c 0 d 0))
                 (c2 (narrow c 0 (- m d) d))
                 (c11 (narrow c1 1 d 0))
                 (c12 (narrow c1 1 (- n d) d))
                 (c21 (narrow c2 1 d 0))
                 (c22 (narrow c2 1 (- n d) d))
                 (t11 (double-matrix d d))
                 (t12 (double-matrix d d))
                 (t21 (double-matrix d (- n d)))
                 (t22 (double-matrix d (- n d)))
                 (t31 (double-matrix (- m d) d))
                 (t32 (double-matrix (- m d) d))
                 (t41 (double-matrix (- m d) (- n d)))
                 (t42 (double-matrix (- m d) (- n d)))
                )
            #{ C_idx_strassen($a11, $b11, $t11) #}
            #{ C_idx_strassen_arbitrary_size($a12, $b21, $t12) #}
            #{ C_idx_strassen_arbitrary_size($a11, $b12, $t21) #}
            #{ C_idx_strassen_arbitrary_size($a12, $b22, $t22) #}
            #{ C_idx_strassen_arbitrary_size($a21, $b11, $t31) #}
            #{ C_idx_strassen_arbitrary_size($a22, $b21, $t32) #}
            #{ C_idx_strassen_arbitrary_size($a21, $b12, $t41) #}
            #{ C_idx_strassen_arbitrary_size($a22, $b22, $t42) #}
            (idx-maadd t11 t12 c11)
            (idx-maadd t21 t22 c12)
            (idx-maadd t31 t32 c21)
            (idx-maadd t41 t42 c22)
           ))

         (t (printf "Hmmm... This must be a very weird bug.\n"))
        )
        ))
  c
)

#? (idx-strassen <a> <b> <c>)
;; A special case of Strassen'n matrix multiplication a * b = c. The arguments
;; must be *square* (-idx2- (-double-)) of dimension which is a power of 2.
;;.SEE Strassen's matrix multiplication and inversion
(de idx-strassen (a b c)
    ((-idx2- (-double-)) a b c)

    (if (<= (max (idx-dim a 0) (idx-dim a 1)) 64)
        
        ;; Mundane matrix multiplication
        (idx-m2timesm2 a b c)

      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;; Here's the fun stuff: Strassen's recursion

      (let* (
             ;; Compute quarter-index
             (h (/ (idx-dim a 0) 2))

             ;; Compute quarter-matrices for a, b, c
             (a1 (narrow a 0 h 0))
             (a2 (narrow a 0 h h))
             (a11 (narrow a1 1 h 0))
             (a12 (narrow a1 1 h h))
             (a21 (narrow a2 1 h 0))
             (a22 (narrow a2 1 h h))
             (b1 (narrow b 0 h 0))
             (b2 (narrow b 0 h h))
             (b11 (narrow b1 1 h 0))
             (b12 (narrow b1 1 h h))
             (b21 (narrow b2 1 h 0))
             (b22 (narrow b2 1 h h))
             (c1 (narrow c 0 h 0))
             (c2 (narrow c 0 h h))
             (c11 (narrow c1 1 h 0))
             (c12 (narrow c1 1 h h))
             (c21 (narrow c2 1 h 0))
             (c22 (narrow c2 1 h h))

             ;; Initialize 7 Strassen's q-matrices and 2 temporaries
             (q1 (double-matrix h h))
             (q2 (double-matrix h h))
             (q3 (double-matrix h h))
             (q4 (double-matrix h h))
             (q5 (double-matrix h h))
             (q6 (double-matrix h h))
             (q7 (double-matrix h h))
             (t1 (double-matrix h h))
             (t2 (double-matrix h h))                 
            )

        ;; Compute q matrices
        (idx-maadd a11 a22 t1)
        (idx-maadd b11 b22 t2)
        #{ C_idx_strassen($t1, $t2, $q1) #}         ; q1
        (idx-maadd a21 a22 t1)
        #{ C_idx_strassen($t1, $b11, $q2) #}        ; q2
        (idx-masub b12 b22 t2)
        #{ C_idx_strassen($a11, $t2, $q3) #}        ; q3
        (idx-masub b21 b11 t2)
        #{ C_idx_strassen($a22, $t2, $q4) #}        ; q4
        (idx-maadd a11 a12 t1)
        #{ C_idx_strassen($t1, $b22, $q5) #}        ; q5
        (idx-masub a21 a11 t1)
        (idx-maadd b11 b12 t2)
        #{ C_idx_strassen($t1, $t2, $q6) #}         ; q6
        (idx-masub a12 a22 t1)
        (idx-maadd b21 b22 t2)
        #{ C_idx_strassen($t1, $t2, $q7) #}         ; q7

        ;; Compute c matrices
        (idx-maadd q1 q4 t1)
        (idx-masub t1 q5 t2)
        (idx-maadd t2 q7 c11)           ; c11
        (idx-maadd q2 q4 c21)           ; c21
        (idx-maadd q3 q5 c12)           ; c12
        (idx-maadd q1 q3 t1)
        (idx-masub t1 q2 t2)
        (idx-maadd t2 q6 c22)           ; c22
        
        ;; fini
      )
             
    )
    c
)

#? (idx-m2inv <a> <c>)
;; Ordinary matrix inversion. The arguments must be (-idx2- (-double-)). 
;; Functions nr-ludcmp and nr-lubksb are used.
;;
;; NOTE: if you want to solve a system of equations A*x=b, you're better off
;; using the above mentioned routines directly (or, alternatively, nr-svdcmp
;; and nr-svbksb) rather than calculating x=(A^-1)*b. The reason is that 
;; inversion of A solves the same equation for *all* columns of A as rhs.
;;.SEE Strassen's matrix multiplication and inversion
(de idx-m2inv (a c)
    ((-idx2- (-double-)) a c)
    (let* ((d (idx-dim a 0))
           (aa (double-matrix d d))
           (p (double-matrix d))
           (e (double-matrix)))
      (idx-macopy a aa)
      (for (i 0 (1- d)) (aa i i (+ (aa i i) 1e-10)))
      (nr-ludcmp aa p e)
      (for (i 0 (1- d))
        (let ((cc (double-matrix d)))
          (cc i 1)
          (nr-lubksb aa p cc)
          (idx-macopy cc (select c 1 i))
      ))
    )
  c
)
#? (idx-strassen-m2inv <a> <c>)
; Strassen's matrix inversion. The arguments must be (-idx2- (-double-)).
;;.SEE Strassen's matrix multiplication and inversion
(de idx-strassen-m2inv (a c)
    ((-idx2- (-double-)) a c)

    (if (or (<= (idx-dim a 0) 32) 
            (< (int (/ (flt (idx-dim a 0)) 2)) (/ (flt (idx-dim a 0)) 2)))
        
        ;; Mundane matrix inversion
        (idx-m2inv a c)
        
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;; Here's the fun stuff: Strassen's recursion
      
      (let* (
             ;; Compute quarter-index
             (h (/ (idx-dim a 0) 2))

             ;; Compute quarter-matrices for a, c
             (a1 (narrow a 0 h 0))
             (a2 (narrow a 0 h h))
             (a11 (narrow a1 1 h 0))
             (a12 (narrow a1 1 h h))
             (a21 (narrow a2 1 h 0))
             (a22 (narrow a2 1 h h))
             (c1 (narrow c 0 h 0))
             (c2 (narrow c 0 h h))
             (c11 (narrow c1 1 h 0))
             (c12 (narrow c1 1 h h))
             (c21 (narrow c2 1 h 0))
             (c22 (narrow c2 1 h h))

             ;; Initialize 7 Strassen's r-matrices and one temporary
             (r1 (double-matrix h h))
             (r2 (double-matrix h h))
             (r3 (double-matrix h h))
             (r4 (double-matrix h h))
             (r5 (double-matrix h h))
             (r6 (double-matrix h h))
             (r7 (double-matrix h h))
             (t1 (double-matrix h h))
            )
        
        ;; Do the work
        #{ C_idx_strassen_m2inv($a11, $r1) #}
        #{ C_idx_strassen_arbitrary_size($a21, $r1, $r2) #}
        #{ C_idx_strassen_arbitrary_size($r1, $a12, $r3) #}
        #{ C_idx_strassen_arbitrary_size($a21, $r3, $r4) #}
        (idx-masub r4 a22 r5)
        #{ C_idx_strassen_m2inv($r5, $r6) #}
        #{ C_idx_strassen_arbitrary_size($r3, $r6, $c12) #}
        #{ C_idx_strassen_arbitrary_size($r6, $r2, $c21) #}
        #{ C_idx_strassen_arbitrary_size($r3, $c21, $r7) #}
        (idx-masub r1 r7 c11)
        (idx-masub t1 r6 c22)

        ;; fini
      )
    )
  c
)        


#? (idx-m2*m2 <a> <b> <c>)
;; Ordinary matrix multiplication.
;;.SEE Strassen's matrix multiplication and inversion
(de idx-m2*m2 (a b c)
    ((-idx2- (-double-)) a b c)

    #{{
    
    int i,j,k;
    int d = $a->dim[0];
    double *a = IDX_PTR($a, double);
    double *b = IDX_PTR($b, double);
    double *c = IDX_PTR($c, double);

    for (i = 0; i < d; i++) 
      for (j = 0; j < d; j++) {
        *(c + i*d + j) = 0;
        for (k = 0; k < d; k++)
          *(c+i*d+j) += *(a+i*d+k) * *(b+k*d+j);
      }

    }#}
    c
)
 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(de test-strassen (dim)
    (setq a (double-matrix dim dim))
    (setq b (double-matrix dim dim))
    (setq c1 (double-matrix dim dim))
    (setq c2 (double-matrix dim dim))
    (setq sse 0)

    (for (i 0 (1- dim))
      (for (j 0 (1- dim))
        (a i j (rand 1))
        (b i j (rand 1))))

    (printf "Ordinary multiplication: %d sec\n"
            (time (idx-m2timesm2 a b c1)))
    (printf "Strassen's multiplication: %d sec\n"
            (time (idx-strassen a b c2)))

    (for (i 0 (1- dim))
      (for (j 0 (1- dim))
        (setq sse (+ sse (* (- (c1 i j) (c2 i j)) (- (c1 i j) (c2 i j)))))))

    (printf "SSE = %f\n" sse)
)

(de test-strassen-a (m n k)
    (setq a (double-matrix m k))
    (setq b (double-matrix k n))
    (setq c1 (double-matrix m n))
    (setq c2 (double-matrix m n))
    (setq sse 0)

    (for (i 0 (1- m))
      (for (j 0 (1- k))
        (a i j (rand 1))))

    (for (i 0 (1- k))
      (for (j 0 (1- n))
        (b i j (rand 1))))

    (printf "Ordinary multiplication: %d sec\n"
            (time (idx-m2timesm2 a b c1)))
    (printf "Strassen's multiplication: %d sec\n"
            (time (idx-strassen-arbitrary-size a b c2)))

    (printf "SSE = %f\n" (get-sse c1 c2))
)


(de test-strassen-m2inv (dim)
    (setq a (double-matrix dim dim))
    (setq c1 (double-matrix dim dim))
    (setq cc1 (double-matrix dim dim))
    (setq c2 (double-matrix dim dim))
    (setq cc2 (double-matrix dim dim))
    (setq c (double-matrix dim dim))
    (setq sse 0)

    (for (i 0 (1- dim))
      (for (j 0 (1- dim))
        (a i j (rand 1))
        (if (= i j) (c i j 1))))

    (printf "Ordinary inversion: %d sec\n"
            (time (idx-m2inv a c1)))
    (printf "Strassen's inversion: %d sec\n"
            (time (idx-strassen-m2inv a c2)))

    

    (printf "Deviation of ordinary inversion is = %f\n" 
            (get-sse c (idx-strassen-arbitrary-size a c1 cc1)))
    (printf "Deviation of Strassen's inversion is = %f\n" 
            (get-sse c (idx-strassen-arbitrary-size a c2 cc2)))

)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(dhc-make () idx-m2*m2 idx-strassen idx-strassen-arbitrary-size
             idx-m2inv idx-strassen-m2inv
             get-sse
             )
