(mload "hcluster/euc-cluster")

;; return a 2D array of n-pat samples.  The samples are taken from a 
;; uniform 2D distribution.
(de init-uniform-2d (n-pat)
    (let ((a (matrix-nc n-pat 2)))
      (for (i 0 (1- n-pat))
        (a i 0 (* (rand 0 1) 500))
        (a i 1 (* (rand 0 1) 500)))
      a))

;; return a 2D array of n-pat samples.  The samples are taken from a 
;; uniform 1D distribution.
(de init-uniform-1d (n-pat)
    (let ((a (matrix-nc n-pat 2)))
      (for (i 0 (1- n-pat))
        (a i 0 (* (rand 0 1) 500))
        (a i 1 250))
      a))

;; return a 2D array of n-pat samples.  The samples are taken from a 
;; distribution which is a sum of n-gauss gaussians.
(de init-gauss (n-pat n-gauss)
    (let ((gaussians (matrix-nc n-gauss 3))
          (a (matrix-nc n-pat 2))
          (which-gauss 0))
      (for (i 0 (1- n-gauss))
        (gaussians i 0 (rand 0 500))
        (gaussians i 1 (rand 0 500))
        (gaussians i 2 (rand 0 200)))
      (for (i 0 (1- n-pat))
        (setq which-gauss (int (rand 0 n-gauss)))
        (a i 0 (gauss (gaussians which-gauss 0) (gaussians which-gauss 2)))
        (a i 1 (gauss (gaussians which-gauss 1) (gaussians which-gauss 2)))
        )
      a))

;;-----------------------------------------------------------------------------

(de test-tree (a p)
    (if ~window (new-window))
    (let* ((tree (new euc-cluster-tree a)))
      (==> tree add-cluster (1- p))
      (==> tree display-2d p)))

(de test-n-clusters (a p)
    (if ~window (new-window))
    (let* ((clu (new euc-cluster a p)))
      (==> clu display-2d)))

;; test n-cluster and tree on gaussian distributions
;(test-n-clusters (init-gauss 1000 3) 3)
;(test-tree (init-gauss 1000 3) 3)

;; test n-cluster and tree on uniform distributions
;(test-n-clusters (init-uniform-2d 1000) 3)
;(test-tree (init-uniform-2d 1000) 3)
