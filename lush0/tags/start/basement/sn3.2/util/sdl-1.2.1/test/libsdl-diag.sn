
(de sdl-surface-dump (s)
    ((-gptr- "SDL_Surface *") s)
    (cpheader "#include <SDL/SDL.h>")
    ;; Uint32 flags;				/* Read-only */
    (printf "flags=%d\n" (int #{ (int)($s->flags) #}))
    ;; 	SDL_PixelFormat *format;		/* Read-only */
    (printf "format=%d\n" (int #{ (int)($s->format) #}))
    ;; 	int w, h;				/* Read-only */
    (printf "w=%d, h=%d\n" (int #{ (int)($s->w) #}) (int #{ (int)$s->h #}))
    ;; 	Uint16 pitch;				/* Read-only */
    (printf "pitch=%d\n" (int #{ (int)($s->pitch) #}))
    ;; 	void *pixels;				/* Read-write */
    (printf "pixels=%d\n" (int #{ (int)($s->pixels) #}))
    ;; 	int offset;				/* Private */
    (printf "offset=%d\n" (int #{ (int)($s->offset) #}))
    ;; 	/* Hardware-specific surface info */
    ;; 	struct private_hwdata *hwdata;
    (printf "hwdata=%d\n" (int #{ (int)($s->hwdata) #}))
    ;; 	/* clipping information */
    ;; 	SDL_Rect clip_rect;			/* Read-only */
    (printf "clip_rect x=%d, y=%d, w=%d, h=%d\n" 
            (int #{ (int)($s->clip_rect.x) #})
            (int #{ (int)($s->clip_rect.y) #})
            (int #{ (int)($s->clip_rect.w) #})
            (int #{ (int)($s->clip_rect.h) #}))
    ;; 	Uint32 unused1;				/* for binary compatibility */
    (printf "unused1=%d\n" (int #{ (int)($s->unused1) #}))
    ;; 	/* Allow recursive locks */
    ;; 	Uint32 locked;				/* Private */
    (printf "locked=%d\n" (int #{ (int)($s->locked) #}))
    ;; 	/* info for fast blit mapping to other surfaces */
    ;; 	struct SDL_BlitMap *map;		/* Private */
    (printf "map=%d\n" (int #{ (int)($s->map) #}))
    ;; 	/* format version, bumped at every change to invalidate blit maps */
    ;; 	unsigned int format_version;		/* Private */
    (printf "format_version=%d\n" (int #{ (int)($s->format_version) #}))
    ;; 	/* Reference count -- used when freeing surface */
    ;; 	int refcount;				/* Read-mostly */
    (printf "refcount=%d\n" (int #{ (int)($s->refcount) #})))

;; display sprite images in an SN window (not an SDL screen)
;; r g b is the color of the crosshair for the hot point
;; (between 0 and 1), z is the zoom factor
(defmethod sprite display (xx yy r g b z)
  (idx-bloop ((s p) (msk idmask) (hx hotx) (hy hoty))
    (let* ((m (sdl-surface-to-idx (s)))
           (w (idx-dim m 1)) (h (idx-dim m 0)))
      (rgb-draw-matrix xx yy m z z)
      (color-rgb r g b) 
      (draw-line (+ xx (* z (hx)) -3) (+ yy (* z (hy))) 
                 (+ xx (* z (hx)) +3) (+ yy (* z (hy))))
      (draw-line (+ xx (* z (hx))) (+ yy (* z (hy)) -3) 
                 (+ xx (* z (hx))) (+ yy (* z (hy)) +3))
      (incr xx (+ 8 (* z w))))))
           
  

(dhc-make () sdl-surface-dump)



