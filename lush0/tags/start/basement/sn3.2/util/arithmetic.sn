#? File "arithmetic.sn"
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; a library of integer arithmetic functions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;.SEE (even <n>)
;;.SEE (rest <a> <b>)
;;.SEE (irand <i>)
;;.SEE (iseed <s>)

(mload "cmacro")

(printf "[%s]\n" file-being-loaded)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#? (even <n>)
;; Is <n> an even number?
(de even (n) (-int- n)
    (let ((r 0)) (-int- r) (cinline "%s = %s & 1" r n) (if (= 0 r) t ())))

#? (rest <a> <b>)
;; like (mod <a> <b>), except it's compilable
(de rest (a b) (-int- a b)
    (let ((c 0))
      (-int- c)
      (cinline "%s = (%s) %% (%s)" c a b)
      c))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; integer random functions

#? (irand <i>)
;;.VP
;; ((-int-) i)
;;
;; DESCRIPTION: Integer random generator (uses the c-function lrand48)
;; RETURNS: (-int-) an integer taken at random in range [0, i-1]
;; CREATED: Pascal Vincent (04/96)
;; COMPILABLE: Yes
;;.SEE (iseed <s>)
(de irand (i)
    ((-int-) i)

    (cheader "long lrand48();")
    (let ((result 0))
      ((-int-) result)
      #{
      $result = (int) (lrand48() % (long)$i);
      #}
      result))

#? (iseed <s>)
;;.VP
;; ((-int-) s):
;;
;; DESCRIPTION: Sets the seed for the integer random generator (uses c-function srand48)
;; RETURNS: ()
;; CREATED: Pascal Vincent (04/96)
;; COMPILABLE: Yes
;;.SEE (irand <i>)
(de iseed (s)
    ((-int-) s)

    (cheader "void srand48();")
    #{ srand48((long)$s); #}
    () )

(mod-create-reference "lrand48" "srand48")
(mod-dlopen "/usr/lib/libc.so")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(dhc-make () even rest irand iseed)