#? File "idx-array.sn"
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; class: array of vectors of floats
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;.SEE (new idx1-array <n>)
;;.SEE (new idx2-array <n>)

(mload "cmacro")
(mload "dynamic")

(printf "[%s]\n" file-being-loaded)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#? (new idx1-array <n>)
;; Create an array of idx1 of float.  Each entry can have a different sizes. 
;; The methods of this object are:
;;.VP
;;    (==> <idx1-array> set <i> <mat>) 
;;    <i> is an int, which must be less than <n>, <mat> is an idx1 of float.
;;    This method set the <i>-th entry of the array to <mat>.
;;
;;    (==> <idx1-array> get <i>)
;;    <i> is an int, which must be less than <n>.  
;;    This method returns the <i>-th entry of the array.
;;
;;    (==> <idx1-array> set-array <ar>)
;;    Take an array of idx1 and do a set for each element (not compiled).
;;
;; Example:
;;  (setq ar {[3 4 5] [1] [1 2 3]})
;;  (setq n (idx-dim ar 0))
;;  (setq c-ar (new idx1-array n))
;;
;;  (for (i 0 (1- n))              ;; equivalent to: (==> c-ar set-array ar)
;;      (==> c-ar set i (ar i)))
;;
;; In a compiled or interpreted function
;;
;;   (de foo (c-ar ...)
;;      ((-obj- (idx1-array)) c-ar)
;;      (for (i 0 (1- n))
;;            ... (==> c-ar get i)...   ;; returns an idx1 of float
;;.SEE (new idx2-array <n>)
;;
(defclass idx1-array object
  ((-idx1- (-gptr-)) pt)
  ((-obj- (pool)) idx-pool))
(defmethod idx1-array idx1-array (n)
  ((-int-) n)
  (setq pt (gptr-matrix n))
  (setq idx-pool (new pool)))
(defmethod idx1-array set (i mat)
  ((-int-) i)
  ((-idx1- (-flt-)) mat)
  (pt i (gptr (in-pool idx-pool (idx-clone mat)))))
(defmethod idx1-array get (i)
  ((-int-) i)
  (if ~(pt i) (error "Null pointer"))
  (idx (idx1 (flt)) (pt i)))
(defmethod idx1-array set-array (ar)
  (for (i 0 (1- (idx-dim ar 0)))
    (==> this set i (ar i))))

#? (new idx2-array <n>)
;; Create an array of idx2 of float.  Each entry can have a different sizes. 
;; The methods of this object are:
;;.VP
;;    (==> <idx2-array> set <i> <mat>) 
;;    <i> is an int, which must be less	than <n>, <mat> is an idx2 of float.
;;    This method set the <i>-th entry of the array to <mat>.
;;
;;    (==> <idx2-array> get <i>)
;;    <i> is an int, which must be less	than <n>.  
;;    This method returns the <i>-th entry of the array.
;;
;;    (==> <idx2-array> set-array <ar>)
;;    Take an array of idx2 and do a set for each element.
;;
;; Example:
;;  (setq ar {[[3 4 5][2 2 2]] [[1]] [[1] [2] [3]]})
;;  (setq n (idx-dim ar 0))
;;  (setq c-ar (new idx2-array n))
;;
;;  (for (i 0 (1- n))              ;; equivalent to: (==> c-ar set-array ar)
;;      (==> c-ar set i (ar i)))
;;
;; In a compiled or interpreted function
;;
;;   (de foo (c-ar ...)
;;      ((-obj- (idx1-array)) c-ar)
;;      (for (i 0 (1- n))
;;            ... (==> c-ar get i)...   ;; returns an idx1 of float
;;
;;.SEE (new idx1-array <n>)
;;
(defclass idx2-array object
  ((-idx1- (-gptr-)) pt)
  ((-obj- (pool)) idx-pool))
(defmethod idx2-array idx2-array (n)
  ((-int-) n)
  (setq pt (gptr-matrix n))
  (setq idx-pool (new pool)))
(defmethod idx2-array set (i mat)
  ((-int-) i)
  ((-idx2- (-flt-)) mat)
  (pt i (gptr (in-pool idx-pool (idx-clone mat)))))
(defmethod idx2-array get (i)
  ((-int-) i)
  (if ~(pt i) (error "Null pointer"))
  (idx (idx2 (flt)) (pt i)))
(defmethod idx2-array set-array (ar)
  (for (i 0 (1- (idx-dim ar 0)))
    (==> this set i (ar i))))

;;-----------------------------------------------------------------------------
(dhc-make ()
          (idx1-array idx1-array set get)
          (idx2-array idx2-array set get))