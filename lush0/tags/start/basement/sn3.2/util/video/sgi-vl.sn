
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; an interface to SGI's Video Library
;; for grabbing and playing video.
;; SN function have the same name and functionality as
;; the coresponding VL function.

(mod-dlopen "/usr/lib/libvl.so")
(mload "cmacro")

(setq VL_SRC 1)                         ;  /* Sources of data */
(setq VL_DRN 2)                         ;  /* Drains for data */
(setq VL_DEVICE	3)                      ;  /* The device node */
(setq VL_INTERNAL 4)                    ;  /* Filters & such */

;; Node kind
(setq VL_VIDEO 1)
(setq VL_GFX   2)                       ;  /* Sirius only */
(setq VL_MEM   3)
(setq VL_SCREEN  4)
(setq VL_TEXTURE 5)                     ;  /* Sirius and Impact only */
(setq VL_NETWORK 6)
(setq VL_BLENDER 7)
(setq VL_KEYGEN  8)                     ;  /* Key Generator */
;; RESERVED NODE KIND
(setq VL_CSC 10)                        ;  /* Color space converter node */
(setq VL_FB  11)                        ;  /* Frame buffer node */
(setq VL_CODEC 12)                      ;  /* Compression/Decompression node*/
;; for SETUPPATH
(setq VL_DONE_USING 0)
(setq VL_READ_ONLY  1)
(setq VL_SHARE	2)
(setq VL_LOCK	3)
(setq VL_MAX_USAGE 4)
;; for VL_PACKING mode
(setq     VL_PACKING_RGB_332_P	0)
(setq     VL_PACKING_RGBA_8		1) ; really ABGR_8
(setq     VL_PACKING_RGB_8		2) ; really BGR_8
(setq     VL_PACKING_RBG_323		3)
(setq     VL_PACKING_VUY_411_SV	4)
(setq     VL_PACKING_YVYU_422_8	5)
(setq     VL_PACKING_Y_8_P		6)
(setq     VL_PACKING_RGB_332		7)
(setq     VL_PACKING_BGR_332		8)
(setq     VL_PACKING_RGB_332_IP	9)
(setq     VL_PACKING_BGR_332_P	10)
(setq     VL_PACKING_BGR_332_IP	11)
(setq     VL_PACKING_RGB_565		12)
(setq     VL_PACKING_RGB_565_P	13)
(setq     VL_PACKING_RGB_565_IP	14)
(setq     VL_PACKING_RGB_8_P		15)
(setq     VL_PACKING_RGB_10		16)
(setq     VL_PACKING_Y_8_IP		17)
(setq     VL_PACKING_YUV_444_8	18)
(setq     VL_PACKING_YUVA_4444_8	19)
(setq     VL_PACKING_YUV_444_10	20)
(setq     VL_PACKING_YUVA_4444_10	21)
(setq     VL_PACKING_ABGR_8		22)  ; really RGBA_8 (OpenGL)
(setq     VL_PACKING_AUYV_4444_8	23)
(setq     VL_PACKING_A_2_BGR_10	24)
(setq     VL_PACKING_A_2_UYV_10	25)
(setq     VL_PACKING_AYU_AYV_10	26) ; two transfers 
(setq     VL_PACKING_YVYU_422_10	27)
(setq     VL_PACKING_AUYV_4444_10	28)
(setq     VL_PACKING_RGBA_10		29) ;  really ABGR_10 
(setq     VL_PACKING_ABGR_10		30) ;  really RBGA_10
(setq     VL_PACKING_MAX		31)

(setq VL_ANY 0x10000000)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(de vlOpenVideo ()
    (cpheader "#include <dmedia/vl.h>")
    (gptr #{ vlOpenVideo("") #}))

(de vlCloseVideo (svr)
    ((-gptr- "VLServer") svr)
    (int #{ vlCloseVideo($svr) #} ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; node access

(de vlGetNode (svr vltype vlclass vlnumber)
    ((-gptr- "VLServer") svr)
    ((-int-) vltype vlclass vlnumber)
    (int #{ vlGetNode($svr, $vltype, $vlclass, $vlnumber) #}))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; path creation

(de vlCreatePath (svr device src drn)
    ((-gptr- "VLServer") svr)
    ((-int-) device src drn)
    (int #{ vlCreatePath($svr, $device, $src, $drn) #}))

(de vlDestroyPath (svr path)
    ((-gptr- "VLServer") svr)
    ((-int-) path)
    (int #{ vlDestroyPath($svr, $path) #}))

(de vlSetupPath (svr path ctrlusage streamusage)
    ((-gptr- "VLServer") svr)
    ((-int-) path ctrlusage streamusage)
    (int #{ vlSetupPaths($svr, (VLPathList)&($path), 1, $ctrlusage, $streamusage) #} ))

(de vlSetupPaths (svr pathlist node ctrlusage streamusage)
    ((-gptr- "VLServer") svr)
    ((-gptr- "VLPathList") pathlist)
    ((-int-) node ctrlusage streamusage)
    (int #{ vlSetupPaths($svr, $pathlist, $node, $ctrlusage, $streamusage) #} ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; control handling

(de vlGetControl (svr path node controltype controlvalue)
    ((-gptr- "VLServer") svr)
    ((-int-) path node controltype)
    ((-gptr- "VLControlValue *") controlvalue)
    (int #{ vlGetControl($svr,$path,$node,$controltype,$controlvalue) #}))
 
(de vlSetControl (svr path node controltype controlvalue)
    ((-gptr- "VLServer") svr)
    ((-int-) path node controltype)
    ((-gptr- "VLControlValue *") controlvalue)
    (int #{ vlSetControl($svr,$path,$node,$controltype,$controlvalue) #}))

(de vlSetVL_PACKING (svr path node x)
    ((-gptr- "VLServer") svr)
    ((-int-) path node x)
    #{{ VLControlValue val;
        val.intVal = $x;
        if (vlSetControl($svr, $path, $node, VL_PACKING, &val))
          run_time_error("unable to set VL_PACKING control");
        } #} ())

(de vlSetVL_RATE (svr path node x)
    ((-gptr- "VLServer") svr)
    ((-int-) path node x)
    #{{ VLControlValue val;
        val.intVal = $x;
        if (vlSetControl($svr, $path, $node, VL_RATE, &val))
          run_time_error("unable to set VL_RATE control");
        } #} ())

(de vlSetVL_ZOOM (svr path node x)
    ((-gptr- "VLServer") svr)
    ((-int-) path node x)
    #{{ VLControlValue val;
        val.fractVal.numerator = 1;
        val.fractVal.denominator = $x;
        if (vlSetControl($svr, $path, $node, VL_ZOOM, &val))
          run_time_error("unable to set VL_ZOOM control");        
        } #} ())

(de vlSetVL_OFFSET (svr path node x y)
    ((-gptr- "VLServer") svr)
    ((-int-) path node x y)
    #{{ VLControlValue val;
        val.xyVal.x = $x;
        val.xyVal.y = $y;
        if (vlSetControl($svr, $path, $node, VL_OFFSET, &val))
          run_time_error("unable to set VL_OFFSET control");        
        } #} ())

(de vlSetVL_SIZE (svr path node x y)
    ((-gptr- "VLServer") svr)
    ((-int-) path node x y)
    #{{ VLControlValue val;
        val.xyVal.x = $x;
        val.xyVal.y = $y;
        if (vlSetControl($svr, $path, $node, VL_SIZE, &val))
          run_time_error("unable to set VL_SIZE control");
        } #} ())

(de vlGetVL_SIZE (svr path node rez)
    ((-gptr- "VLServer") svr)
    ((-int-) path node)
    ((-idx1- (-int-)) rez)
    (let ((xsize 0) (ysize 0)) ((-int-) xsize ysize)
         #{{ VLControlValue val;
             vlGetControl($svr, $path, $node, VL_SIZE, &val);     
             $xsize = val.xyVal.x;     
             $ysize = val.xyVal.y; 
             } #}
         (rez 0 xsize) (rez 1 ysize) ()))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; buffer management

(de vlCreateBuffer (svr path node nframes)
    ((-gptr- "VLServer") svr)
    ((-int-) path node nframes)
    (gptr #{ vlCreateBuffer($svr, $path, $node, $nframes) #}))

(de vlDestroyBuffer (svr buffer)
    ((-gptr- "VLServer") svr)
    ((-gptr- "VLBuffer") buffer)
    (int #{ vlDestroyBuffer($svr, $buffer) #}))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; associates/dissociate the buffer with the given path and node

(de vlRegisterBuffer (svr path node buffer)
    ((-gptr- "VLServer") svr)
    ((-int-) path node)
    ((-gptr- "VLBuffer") buffer)
    (int #{ vlRegisterBuffer($svr, $path, $node, $buffer) #}))

(de vlDeregisterBuffer (svr path node buffer)
    ((-gptr- "VLServer") svr)
    ((-int-) path node)
    ((-gptr- "VLBuffer") buffer)
    (int #{ vlDeregisterBuffer($svr, $path, $node, $buffer) #}))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; region

(de vlGetActiveRegion (svr buffer info)
    ((-gptr- "VLServer") svr)
    ((-gptr- "VLBuffer") buffer)
    ((-gptr- "VLInfoPtr") info)
    (gptr #{ vlGetActiveRegion($svr, $buffer, $info) #}))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; get frames

(de vlGetNextValid (svr buffer)
    ((-gptr- "VLServer") svr)
    ((-gptr- "VLBuffer") buffer)
    (gptr #{ vlGetNextValid($svr, $buffer) #}))

(de vlGetLatestValid (svr buffer)
    ((-gptr- "VLServer") svr)
    ((-gptr- "VLBuffer") buffer)
    (gptr #{ vlGetLatestValid($svr, $buffer) #}))

(de vlPutFree  (svr buffer)
    ((-gptr- "VLServer") svr)
    ((-gptr- "VLBuffer") buffer)
    (gptr #{ vlPutFree($svr, $buffer) #}))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; establish transfer

(de vlBeginTransfer (svr path count xferdesc)
    ((-gptr- "VLServer") svr)
    ((-int-) path count)
    ((-gptr- "VLTransferDescriptor *") xferdesc)
    (int #{ vlBeginTransfer($svr, $path, $count, $xferdesc) #}))

(de vlEndTransfer (svr path)
    ((-gptr- "VLServer") svr)
    ((-int-) path)
    (int #{ vlEndTransfer($svr, $path) #}))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(dhc-make ()
          vlOpenVideo vlCloseVideo vlGetNode 
          vlCreatePath vlDestroyPath vlSetupPath vlSetupPaths 
          vlSetControl vlGetControl vlSetVL_PACKING vlSetVL_RATE
          vlSetVL_OFFSET vlSetVL_ZOOM  vlSetVL_SIZE vlGetVL_SIZE 
          vlCreateBuffer vlDestroyBuffer
          vlRegisterBuffer vlDeregisterBuffer 
          vlGetActiveRegion vlGetNextValid vlGetLatestValid vlPutFree 
          vlBeginTransfer vlEndTransfer)

