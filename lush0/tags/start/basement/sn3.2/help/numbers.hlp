#? Numbers.
Numbers are the simplest kind of atoms. They are stored as double precision floating 
point numbers. Numerical computations in TLisp usually are performed in double 
precision. Single precision however is used by some number crunching functions, 
like the matrix calculus operations.

.SEE (+ <n_1> ... <n_m>)
.SEE (1+ <n>)
.SEE (-  [<n_1>] <n_2>)
.SEE (1- <n>)
.SEE (* <n_1> ... <n_m>)
.SEE (2* <n>)
.SEE (/  [<n_1>] <n_2>)
.SEE (2/ <n>)
.SEE (div <n_1> <n_2>)
.SEE (mod <n_1> <n_2>)
.SEE (max <l_1> ... <l_n>)
.SEE (min <l_1> ... <l_n>)
.SEE (** <n> <m>)
.SEE (seed <n>)
.SEE (rand [[<a>] <b>])
.SEE (gauss [[<m>] <s>])
.SEE (solve <min> <max> <f>)
.SEE (sup <l>)
.SEE (inf <l>)
.SEE (rank <list> <target> [<width>])
.SEE (mean <l>)
.SEE (sdev <l>)
.SEE (cov <l_y> <l_x>)
.SEE (regression <l_x> <l_y>)
.SEE (x-estimate <lr> <y>)
.SEE (y-estimate <lr> <x>)
.SEE (sum <l>)
.SEE (add-lists <l_1> <l_2>)
.SEE (diff-lists <l_1> <l_2>)
.SEE (abs-dist <l1 [l2])
.SEE (sqr-dist <l_1> [<l_2>])
.SEE (sup-dist <l_1> [<l_2>])
.SEE (mean-sup-dist <l_1> [<l_2>])
.SEE (mean-abs-dist <l_1> [<l_2>])
.SEE (mean-sqr-dist <l_1> [<l_2>])
.SEE (hamming-dist [<margin>] <l_1> [<l_2>])
.SEE (quadrant-dist <l_1> <l_2>)
.SEE (mean-hamming-dist [<margin>] <l_1> [<l_2>])
.SEE (mean-quadrant-dist <l_1> <l_2>)

.SEE DZ.	
.SEE Predefined DZs.



#? (+ <n_1> ... <n_m>)
Adds numbers <n_1> to <n_m>.
.EX (+ 1 2 3 4)

#? (1+ <n>)
Adds 1 to <n>.

#? (-  [<n_1>] <n_2>)
Subtracts <n_2> from <n_1>. If one argument only is provided, 
returns the opposite of <n_2>.

#? (1- <n>)
Subtracts 1 from <_n>.

#? (* <n_1> ... <n_m>)
Computes the product of <n_1> to <n_m>. 
Here is a memory intensive way of computing a factorial:
.EX (eval (cons '* (range 1 5)))

#? (2* <n>)
Multiplies <n> by 2.

#? (/  [<n_1>] <n_2>)
Divides <n_1> by <n_2>. If one argument only is provided, 
returns the inverse of <n_2>.

#? (2/ <n>)
Divides <n> by 2.

#? (div <n_1> <n_2>)
Returns the quotient of the Euclidian division of <n_1> by <n_2>.

#? (mod <n_1> <n_2>)
Returns the remainder of the Euclidian division of <n_1> by <n_2>.

#? (** <n> <m>)
Returns <n> raised to the <m>th power.

#? (max <l_1> ... <l_n>)	
Return the maximum element within <l_1> ... <l_n>. 
Arguments <l_i> may be numbers or strings.

#? (min <l_1> ... <l_n>)	
Return the minimum element within <l_1> ... <l_n>. 
Arguments <l_i> may be numbers or strings.

#? (seed <n>)
Sets the random number generator seed. The random generator is
replicable. The same seed will produce the same sequence of random
numbers. <n> must be a legal integer number. Returns ().

#? (rand [[<a>] <b>])
Returns a uniform random number between <a> and <b>. If no arguments are provided, 
returns a random number between 0 and 1. If <b> only is given, returns a random 
number between <-b> and <b>.

#? (gauss [[<m>] <s>])
Returns a gaussian number with mean <m> and standard deviation <s>.
The default value for <m> is 0. The default value for <s> is 1.

#? (solve <min> <max> <f>)
Simple dichotomical root finder. <f> is a function with one argument
only. <solve> will return a numerical approximation of the solution of
<f(x)=0> between <min> and <max>.  To ensure the existence of this
solution, <f(min)> and <f(max)> must have different signs.

Example:
.EX (solve 1 2 (lambda(x) (- 2 (* x x))))

#? (sup <l>)
Return the largest element of the list <l>.

#? (inf <l>)
Return the smallest element of the list <l>.

#? (rank <list> <target> [<width>])
Returns the list of the indices of the elements of <list> whose
distance to target is smaller or equal than <width>. If argument
<width> is omitted, 0 is assumed.

Example:
.VP
? (de rank-of-max(l)
      (car (rank l (sup l))) )
= rank-of-max
? (rank-of-max '(2 1 4 5 -4 -3 -2) )
= 3
.PP

#? (mean <l>)
Returns the average of the elements of list <l>.

#? (sdev <l>)
Returns the standard deviation of the elements of list <l>.

#? (cov <l_y> <l_x>)
Returns the covariance of the elements of list <l_x> versus the
elements of list <l_y>.

#? (regression <l_x> <l_y>)
<l_x> and <l_y> are two lists of numbers. <regression> returns a list
of the form <(A B R)>. The function <y=Ax+B> is then the best linear
approximation of dependencies between lists <l_x> and <l_y>. <R> is
the correlation coefficient; the closer <R> is to 1, the better the
approximation.

#? (x-estimate <lr> <y>)
.TYPE DE
.FILE sysenv.sn
.SEE (regression <l_x> <l_y>)
Given the result list <lr> of the <regression>, 
returns a linear estimation of <x> given <y>.

#? (y-estimate <lr> <x>)
.TYPE DE
.FILE sysenv.sn
.SEE (regression <l_x> <l_y>)
Given the result list <lr> of the <regression>, 
returns a linear estimation of <y> given <x>.

#? (sum <l>)
Returns the sum of the elements of the list <l>.

#? (add-lists <l_1> <l_2>)
Return the list of the sums term by term of the elements of lists
<l_1> and <l_2>. This function is equivalent to:
.VP
(mapcar '+ l1 l2)
.PP

#? (diff-lists <l_1> <l_2>)
Return the list of the differences term by term of the elements of
lists <l_1> and <l_2>. This function is equivalent to:
.VP
(mapcar '- l1 l2)
.PP

#? (abs-dist <l_1> [<l_2>])
Returns the absolute (L1) distance between the lists of numbers <l_1>
and <l_2>.  If <l_2> is omitted, a lists of zeros is assummed.

Actually, <abs-dist> adds the absolutes differences between the
elements of <l_1> and <l_2>.

#? (sqr-dist <l_1> [<l_2>])
Returns the eucliudian (L2) distance between the lists of numbers
<l_1> and <l_2>.  If <l_2> is omitted, a lists of zeros is assummed.

Actually, <sqr-dist> adds the squared differences between the elements
of <l_1> and <l_2>.

#? (sup-dist <l_1> [<l_2>])
Returns the supremum (Linfinity) distance between the lists of numbers <l_1>
and <l_2>.  If <l_2> is omitted, a lists of zeros is assummed.

Actually, <sup-dist> returns the maximal absolute difference between
elements of <l_1> and <l_2>.


#? (mean-sup-dist <l_1> [<l_2>])
.TYPE DE
.FILE sysenv.sn
.SEE (sup-dist <l_1> [<l_2>])
Return the average supremum distance between elements of <l_1> and <l_2>.

#? (mean-abs-dist <l_1> [<l_2>])
.TYPE DE
.FILE sysenv.sn
.SEE (abs-dist <l_1> [<l_2>])
Return the average absolute distance between elements of <l_1> and <l_2>.

#? (mean-sqr-dist <l_1> [<l_2>])
.TYPE DE
.FILE sysenv.sn
.SEE (sqr-dist <l_1> [<l_2>])

Return the average squared distance between elements of <l_1> and <l_2>.

#? (hamming-dist [<margin>] <l_1> [<l_2>])
Returns the number of elements of <l_1> and <l_2> whose absolute
difference is greater than margin. 

If <l_2> is omitted, the origin is assumed.

The default value for <margin> is 0.  In this case
<hamming-dist> returns the number of elements strictly different in
<l_1> and <l_2>.

#? (quadrant-dist <l_1> <l_2>)
Returns the number of elements of <l_1> and <l_2> whose sign is
different.

#? (mean-hamming-dist [<margin>] <l_1> [<l_2>])
.TYPE DE
.FILE	sysenv.sn
.SEE (hamming-dist [<margin>] <l_1> [<l_2>])
Averaged versions of <hamming-dist>.
The maximal result thus is 1.

#? (mean-quadrant-dist <l_1> <l_2>)
.TYPE DE
.FILE	sysenv.sn
.SEE (quadrant-dist <l_1> <l_2>)
Averaged versions of <quadrant-dist>.
The maximal result thus is 1.





