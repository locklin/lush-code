#? Control structures.
.SEE (eval <l_1>...<l_n>)
.SEE (apply  <f>  <l>)
.SEE (quote <a>)
.SEE ` <a>, `@ <a>
.SEE (progn  <l_1>...<l_n>)
.SEE (prog1  <l_1>...<l_n>)
.SEE (let  ( (<s_1> <v_1>) ... (<s_n> <v_n>)) <l_1> ... <l_n>)
.SEE (let*  ( (<s_1> <v_1>) ... (<s_n> <v_n>)) <l_1> ... <l_n>)
.SEE (if  <cond> <yes> [<no_1>...<no_n>])
.SEE (when <cond> <yes_1>...<yes_n>)
.SEE (while <cond> <l_1>...<l_n>)
.SEE (do-while <cond> <l_1>...<l_n>)
.SEE (repeat  <n> <l_1>...<l_n>)
.SEE (for (<symb> <start> <end> [<step>]) <l_1>...<l_n>)
.SEE (mapfor (<symb> <start> <end> [<step>]) <l_1>...<l_n>)
.SEE (cond <l_1>...<l_n>)
.SEE (selectq <s> <l_1>...<l_n>)
.SEE (mapc <f>  <l_1>...<l_n>)
.SEE (mapcar <f>  <l_1>...<l_n>)
.SEE (rmapc <f>  <l_1>...<l_n>)
.SEE (rmapcar <f>  <l_1>...<l_n>)
.SEE (each ( (<s_1> <v_1>) ... (<s_n> <v_n>)) <l_1> ... <l_n>)
.SEE (all ( (<s_1> <v_1>) ... (<s_n> <v_n>)) <l_1> ... <l_n>)

#? (eval <l_1>...<l_n>)
The class associated with every object provides two functions for
evaluating an object and a list beginning with this kind of object. So
the Lisp evaluator does not need to know anything about the evaluation
behavior of all the different kinds of objects. In addition, it does
not even need to test the nature of the objects. An indirect call is
considerably more efficient than series of tests. Here is the
evaluation algorithm for evaluating a Lisp object <p>: 
.VP
  eval(p) :
   if (p is nil)
      return nil
   else if (p is a list)
      q = eval(car p)
      if (q is an atom)
           call the class function 'listeval' for q with args (q,p)
      else
           call the default 'listeval' function with args (q,p)
   else if (p is an atom)
      call the class function 'selfeval' for p with arg (p)
.PP
The function <eval> evaluates objects <l_1> to <l_n>, and returns the
result of the last evaluation, <l_n>.
.EX (eval (cons '+ '(3 4)))

#? (apply  <f>  <l>)
.SEE (eval <
Applies function <f> to the argument list <l>.

First of all, <f> is evaluated. The result can be a function, a symbol
whose value is a function, or even a list whose result is a function.
This function is then applied to arguments <l>.

Evaluating <(apply f l)> is quite similar to <(eval (cons f l))>. It
blocks however the evaluation of the arguments stored in list l.

Example:
.EX (apply 'append '((1 2 3) (1 3 5)) )
.EX (apply append '((list 2 3) (list 4 (+ 1 2))) )
.EX (eval (cons append '((list 2 3) (list 4 (+ 1 2))) ))


#? (quote <a>)
.SEE ' <a>
.SEE ` <a>, `@ <a>
Returns its unevaluated argument <a>.  The function <quote> usually is
called by using the quote <'> macro-character. This macro-character
also allows for a simplified back-quote construction, as indicated
with the back-quote documentation.

Example:
.VP
? (quote (+ 2 3))
= (+ 2 3)
? '(a 3 4 5)
= (a 3 4 5)
.PP

#? ' <a>
.TYPE DMC
.FILE sysenv.sn
.SEE (quote <a>)
.SEE ` <a>, `@ <a>
Macro character for the function <quote>.  It usually expand as
<(quote a)>. However, more complex expansions can occur when the quote
macro is used in conjonction with the backquote macro.

Example:
.VP
? (pprint 'a)
a
= t
? (pprint ' '(1 2 `(+ 4 5) (+ 4 5 `@(range 1 4))))
(list '1 '2 (+ 4 5) (append '(+ 4 5) (range 1 4)))
= t


#? ` <a>, `@ <a>
The backquote <`> macro is the reverse of the quote <'> macro. 
It forces the evaluation of the backquoted expression, inside
a quoted expression.

If a "at" character <@> is inserted between the backquote macro and
the expression, the list returned by the evaluation of the expression
will be merged within the list where the backquote macro.

The backquote macro cannot be used outside a quoted expression.  

Examples
.VP
? '(1 2 `(+ 4 5) (+ 4 5 `(range 1 4))))
= (1 2 9 (+ 4 5 (1 2 3 4)))
?
? '(1 2 `(+ 4 5) (+ 4 5 `@(range 1 4))))
= (1 2 9 (+ 4 5 1 2 3 4))
.PP
	 
This evaluation is the result of the cooperation of the quote and
backquote macros. Actually, when a backquote macro is present, the
quote macro returns a lisp expression composed of calls to <list>,
<append> and <cons>, which builds the result.

Example:
.VP
? (pprint ' '(1 2 `(+ 4 5) (+ 4 5 `@(range 1 4))))
(list '1 '2 (+ 4 5) (append '(+ 4 5) (range 1 4)))
= t


#? (progn  <l_1>...<l_n>)
Evaluates <l_1> to <l_n> and returns the result of the evaluation of <l_n>.

#? (prog1  <l_1>...<l_n>)
Evaluates <l_1> to <l_n> and returns the result of the evaluation of <l_1>.


#? (let  ( (<s_1> <v_1>) ... (<s_n> <v_n>)) <l_1> ... <l_n>)
This call is equivalent to 
.VP
  ((lambda(<s_1>...<s_n>) <l_1>...<l_n>) v1...vn)
.PP
First, it simultaneously evaluates <v_1>...<v_n>, save the values of
symbols <s_1>...<s_n>, and assign <v_1>...<v_n> to symbols
<s_1>...<s_n>. It then evaluates <l_1>...<l_n>, restores the saved
values of <s_1>...<s_n>, and returns the result of the evaluation of
<l_n>.

The <let> function is used to define local variables.

Example:
.EX (let ((s 0)) (for (i 1 10) (setq s (+ s i)) ))


#? (let*  ( (<s_1> <v_1>) ... (<s_n> <v_n>)) <l_1> ... <l_n>)
First, the <let*> function sequentially evaluates the <v_i>, save the
value of symbol <s_i> and assign the result of the evaluation of <v_i>
to symbol <s_i>. Like the <let> function, it evaluates then
<l_1>...<l_n>, restores the saved values of <s_1>...<s_n>, and returns
the result of the evaluation of <l_n>.

Example:
.EX (let* ((i 1)(j (1+ i)) ) (print i j) (* 2 j) )



#? (if  <cond> <yes> [<no_1>...<no_n>])
First, <cond> is evaluated. If the result is not the empty list, <yes>
is evaluated, otherwise the remaining lists <no_1>...<no_n> are
evaluated. <if> returns the result of the last evaluation.



#? (when <cond> <yes_1>...<yes_n>)
First, <cond> is evaluated. If the result is not the empty list,
<yes_1>...<yes_n> are evaluated and the result of <yes_n> is returned.


#? (while <cond> <l_1>...<l_n>)
While the evaluation of <cond> gives a result different from the
empty list, <l_1>...<l_n> are evaluated in a loop.

If the result of the evaluation of <cond> is always the empty list,
<l_1> .. <l_n> are never evaluated, and <while> returns the empty
list. Otherwise <while> returns the result of the last <l_n>
evaluation.

Example:
.EX (let ((l (range 2 5))) (while l (print (car l) (sqrt (car l))) (setq l (cdr l)) ))


#? (do-while <cond> <l_1>...<l_n>)
This function makes evaluates <l_1>...<l_n> and loops while the
evaluation of <cond> gives a result different from the empty list.

If the result of the evaluation of <cond> is always the empty list,
<l_1> .. <l_n> are evaluated only once. Anyway, <do-while> always
returns the result of the last <l_n> evaluation.

#? (repeat  <n> <l_1>...<l_n>)
Repeats <n> times the evaluation of <l_1> to <l_n>. <repeat> returns the
result of the last <l_n> evaluation.

#? (for (<symb> <start> <end> [<step>]) <l_1>...<l_n>)
A good old classical ``for'' loop.
 
The value of symbol <symb> is first saved. Then <symb> takes numeric
values from <start> to <end> stepping by <step> (default 1). For each
value, <l_1>...<l_n> are evaluated. The value of <symb> is then
restored.  <for> returns the result of last evaluation of <l_n>.

Example:
.EX (for (i 2 5) (print i (sqrt i)))

#? (mapfor (<symb> <start> <end> [<step>]) <l_1>...<l_n>)
.TYPE DMD
.FILE sysenv.sn
.SEE (for (<symb> <start> <end> [<step>]) <l_1>...<l_n>)
This ``for'' loop returns the list of the <l_n> evaluation results. 

Example:
.EX (mapfor (i 2 5) (sqrt i))


#? (cond <l_1>...<l_n>)
Standard lisp ``cond'' form. The arguments <l_1>...<l_n> are lists of
the form <(cond . body)>. The conditions <cond> are evaluated
sequentially until one returns a non-nil result. The function
<progn> is applied to the corresponding <body> and the result is
returned.


#? (selectq <s> <l_1>...<l_n>)

The arguments <l_1>...<l_n> are lists of the form <(case . body)>. The
argument <s> is first evaluated. The lists <l_1>...<l_n> are then
checked until <s> is equal to <case>, or <s> is a member of the list
<case>, or <case> is equal to <t>. The function <progn> is applied to
the corresponding <body> and the result is returned.

Example:
.VP
? (selectq x
    (0             (print "zero"))
    ((2 4 6 8)     (print "even"))
    ((1 2 3 5 7)   (print "prime"))
    (t             (print "nothing interesting")) )
.PP


#? (mapc <f>  <l_1>...<l_n>)

Applies the function <f> to a list of arguments taken from lists <l_1>
to <l_n>. Function <mapc> returns the result of the last evaluation.

Example:
.EX (mapc print '(1 2 3)) 

#? (mapcar <f>  <l_1>...<l_n>)
Applies the function <f> to a list of arguments taken from lists <l_1>
to <l_n>. Function <mapc> returns the list of the results.

Example:
.EX (mapcar '+ '(1 2 3) '(4 5 6))

#? (rmapc <f>  <l_1>...<l_n>)
.SEE (mapc <f>  <l_1>...<l_n>)
<rmapc> works like <mapc>, but is able to 
recursively scan sublists in <l_1>..<l_n>.

Example:
.EX (rmapc 'prin '(1 2 (3 (4)) 5))

#? (rmapcar <f>  <l_1>...<l_n>)
.SEE (mapcar <f>  <l_1>...<l_n>)
<rmapcar> works  like <mapcar>, but is able to 
recursively scan sublists in <l_1>..<l_n>.

Example:
.EX (rmapcar 'prin '(1 2 (3 (4)) 5))



#? (each ( (<s_1> <v_1>) ... (<s_n> <v_n>)) <l_1> ... <l_n>)
This function is somewhat similar to the <let> function, 
but it loop like <mapcar>.

Example:
.EX (each ((i '(1 2 3 5 7))) (print i (sqrt i)) )


#? (all ( (<s_1> <v_1>) ... (<s_n> <v_n>)) <l_1> ... <l_n>)
This function is somewhat similar to the <let> function, 
but it loop like <mapc>.

Example:
.EX (all ((i '(1 2 3 5 7))) (sqrt i) )


