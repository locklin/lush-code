#? Lists.
List are the elementary data structure in SN. 
Several functions are designed for handling lists.

Lists are stored as pairs (car. cdr). The first element of the pair
(car) is a pointer to the first element of the list; the second
element of the pair (cdr) is a pointer to the list of the remaining
elements.

Lists are enclosed within parenthesis and may contain dotted pairs or
other lists. In TLisp, the empty list is written ().

.SEE (car <l>)
.SEE (cdr <l>)
.SEE (c...r <l>)
.SEE (cons <a1> <a2>)
.SEE (list <a_1> ... <a_n>)
.SEE (makelist <n> <v>)
.SEE (range [<n1>] <n2> [<delta>])
.SEE (length <l>)
.SEE (append <l_1> ... <l_n>)
.SEE (reverse <l>)
.SEE (nth <n> <l>)
.SEE (nthcdr <n> <l>)
.SEE (last <l>)
.SEE (lastcdr <l>)
.SEE (member <e> <l>)
.SEE (flatten <x>)

.SEE (assoc <key> <alist>)

.SEE (rplaca <l> <e>)
.SEE (rplacd <l> <e>)
.SEE (displace <l_1> <l_2>)
.SEE (nconc <l_1> ... <l_n>)
.SEE (nconc1 <l> <e>)

.SEE (list2array <l>)

.SEE (new-unode [<doc>])
.SEE (unode-eq <u1> <u2>)
.SEE (unode-unify <u1> <u2> [<combine>])
.SEE (unode-val <u>)



#? (car <l>)	
.SEE (c...r <l>)
Returns the first element of a list or dotted pair <l>.

Example:
.EX (car '(a b c d))


#? (cdr <l>)	
.SEE (c...r <l>)
Returns the next elements of a list or dotted pair <l>.

Example:
.EX (cdr '(a b c d))


#? (c...r <l>)	
.SEE (cdr <l>)
.SEE (car <l>)
"..." stands for any combination of two or three a's or d's. All
the combinations of two car or cdr functions are written in C. The
combination of three are written in Lisp in <"sysenv.sn">.

Example:
.EX (cadr '(a b c d))


#? (cons <a1> <a2>)	
.SEE (cdr <l>)
.SEE (car <l>)
Builds a list whose car is <a1> and cdr <a2>.

Examples: 
.EX (cons '+ '(2 3))
.EX (cons 'a 'b)

#? (list <a_1> ... <a_n>)	
Builds a list with its arguments <a_1> to <a_n>. <list> can use
dotted pairs in some cases.

Example:
.EX (list 'a '(b c) 'd)


#? (makelist <n> <v>)	
Returns a list of <n> times <v>'s. In order to avoid memory allocator
confusion, <n> can't be greater than 32767.

Example:
.EX (makelist 4 'e)


#? (range [<n1>] <n2> [<delta>])	
Returns a list of all the numbers between <n1> and <n2>, stepping by
<delta>. The default value for <n1> and delta is <1>.

Example:
.EX (range 2 5)


#? (length <l>)	
Returns the length of the list <l>.

Example: 
.EX (length '(a b c d e))



#? (append <l_1> ... <l_n>)	
Concatenates lists <l_1> to <l_n>. 

<(append l ())> may be used to get a fresh copy of the list <l>.

Example:
.EX (append '(1 2 3) '(4 5 6))


#? (reverse <l>)	
Returns a list <l> in reverse order.

Example:
.EX (reverse '(1 2 3))


#? (nth <n> <l>)	
.SEE (nthcdr <n> <l>)
Returns the <n>th elements of the list <l>. The first element is
numbered 0. For compatibility with the previous versions of TLisp, the
syntax <(nth l n)> is allowed, and in this case, the first element is
numbered one. We strongly encourage you to avoid this old-fashioned
form of <nth>.

Example:
.EX (nth 3 '(a b c d e))


#? (nthcdr <n> <l>)	
.SEE (nth <n> <l>)
Returns the <n>th pair of the list <l>. The first pair is numbered 0.
This function is equivalent to <n> calls of the <cdr> functions.

Example:
.EX (nthcdr 3 '(a b c 3 e f))



#? (last <l>)	
.SEE (lastcdr <l>)
Returns the last element of the list <l>.



#? (lastcdr <l>)	
.SEE (last <l>)
Returns the last pair of the list <l>.

Example:
.EX (lastcdr '(a b c 3 e f))
.EX (last '(a b c 3 e f))



#? (member <e> <l>)	
Searches list <l> for element <e>. If <e> is not in <l>, it returns
<()>. Otherwise it returns the first sublist of <l> whose first
element is equal to <e>. The equality test is unique in TLisp and is
able to recursively compare lists.

Example:
.EX (member 'e (range 1 4))
.EX (member 'e '(a b c d e f g h i j))


#? (flatten <x>)	
Returns all the atoms in <x>, linked in a single list.

Example :
.EX (flatten '2)
.EX (flatten '(1 2 (3 (6 7)) 4))


#? (assoc <key> <alist>)
.SEE (rplacd <l> <e>)
An alist is a list of pairs <(key . value)>. Given an alist <alist>,
the <assoc> function returns the first pair whose key is equal to <key>.
The value then can be changed with a <rplacd> function.

If no matching key is found, <assoc> returns the empty list.

Example:
.VP
 ; this function adds a pair, or change a pair in a alist
 ; and returns the new alist...
 (de alist-add(key value alist)
   (let ((pair (assoc key alist)))
      (if pair
	  (rplacd pair value)	
        (setq alist (cons (cons key value) alist)) )
      alist ) )

 ; this function returns the value associated to a key
 (de alist-get(key alist)
   (let ((pair (assoc key alist)))
      (when pair
         (cdr pair) ) ) )
.PP








#? (rplaca <l> <e>)	
.SEE (rplacd <l> <e>)
Physically replaces the <"car"> of list <l> by <e>.


#? (rplacd <l> <e>)	
.SEE (rplaca <l> <e>)
Physically replaces the cdr of list <l> by <e>. This function may be
used to build circular lists.


#? (displace <l_1> <l_2>)	
Replaces both the car and cdr of <l1> by the car and cdr and <l2>. The
main purpose of this function is the implementation of DMD functions.


#? (nconc <l_1> ... <l_n>)	
.TYPE DE
.FILE sysenv.sn
.SEE (nconc1 <l> <e>)
Physically concatenates the lists <l_1> to <l_n>.



#? (nconc1 <l> <e>)	
.TYPE DE
.FILE sysenv.sn
.SEE (nconc <l_1> ... <l_n>)	
Appends the element <e> at the end of the list <l>.

Example:
.VP
? (setq a '(a b c d e))
= (a b c d e)
? (nconc1 a 'f)
= (a b c d e f)
? a
= (a b c d e f)
.PP




#? (new-unode [<doc>])
.SEE (new-unode [<doc>])
.SEE (unode-eq <u1> <u2>)
.SEE (unode-unify <u1> <u2> [<combine>])
.SEE (unode-val <u>)

U-nodes are basic constructions for an unification algorithm.  An
u-node is a pair whose car is another u-node, or the empty-list.  In
this latter case, the u-node is a terminal u-node. A user defined
information can be stored in the cdr of a u-node.

Function <new-unode> creates a new terminal u-node.  The lisp object
<doc> is stored in the cdr of this u-node.  In fact this function is
equivalent to <(cons () <doc>)>.


#? (unode-eq <u1> <u2>)
.SEE (new-unode [<doc>])
.SEE (unode-eq <u1> <u2>)
.SEE (unode-unify <u1> <u2> [<combine>])
.SEE (unode-val <u>)

This function tests if two u-nodes are unified.

If <u1> and <u2> are the same u-node, or if <u1> and <u2> are unified,
<unode-eq> returns a pair <(() . <doc>)> whose cdr is the user defined
information object associated to these u-nodes.


#? (unode-unify <u1> <u2> [<combine>])
.SEE (new-unode [<doc>])
.SEE (unode-eq <u1> <u2>)
.SEE (unode-unify <u1> <u2> [<combine>])
.SEE (unode-val <u>)

U-nodes are basic constructions for an unification algorithm.  An
u-node is a pair whose car is another u-node, or the empty-list.  In
this latter case, the u-node is a terminal u-node. 

The function <unode-unify> unifies u-nodes <u1> and <u2>.
It also merges the user defined documentation associated with
u-nodes <u1> and <u2>, using the user provided function <combine>.

The unification is an equivalence relation. 
.IP
Any <unode> is unified with itself. 
.IP
If <a> is unified with <b>, then <b> is unified with <a>.
.IP
If <a> and <b> have been unified, and if <b> and <c>
have been unified, then u-nodes <a> and <c> are unified.
.PP
Therefore, it makes sense to provide a commutative and associative
<combine> function, like <and>, <or>, or even <append> if you handle
the documentation lists as unordered sets.

The unification function, <unode-unify> constructs a reversed tree by
creating a new u-node and physically replacing the car of the terminal
u-nodes of <u1> and <u2> by pointers to this new u-node.

Assume we have four u-nodes, named <a>, <b>, <c>,  and <d>.
.VP
       a     b     c    d
       |     |     |    |
      (.)   (.)   (.)  (.)
.PP
Unifying <a> and <b> gives the following structure:
.VP
       a     b     c    d
       |     |     |    |
      (.)   (.)   (.)  (.)
        \   / 
         \ /
         (.)
.PP
Then, unifying <b> and <c> gives the following structure:
.VP
       a     b     c    d
       |     |     |    |
      (.)   (.)   (.)  (.)
        \   /     /
         \ /     /
         (.)    /
           \   /
            \ /
            (.)
.PP
The equality test, <unode-eq> works by comparing the terminal
u-nodes of its arguments. In this example, according to 
<unode-eq>, u-nodes <a> and <c> are equal.

Limitations: 
.IP
At the moment, these functions do not allow backtracking.
This simple package, however, could be extended in the future.


#? (unode-val <u>)
.SEE (new-unode [<doc>])
.SEE (unode-eq <u1> <u2>)
.SEE (unode-unify <u1> <u2> [<combine>])
.SEE (unode-val <u>)
Return the information associated with unode <u>.


#? (list2array <l>)
Return a new array (index of AT objects) whose elements are the 
elements of the list <l>.

