#? Booleans Operators.
.SEE t
.SEE (<> <n_1> <n_2>)
.SEE (= <n_1> <n_2>)
.SEE (0= <n>)
.SEE (0<> n)
.SEE (<= <n_1> <n_2>)
.SEE (< <n_1> <n_2>)
.SEE (>= <n_1> <n_2>)
.SEE (> <n_1> <n_2>)
.SEE (and <l_1> ... <l_n>)
.SEE (or <l_1> ... <l_n>)
.SEE (null <l>)
.SEE (not <l>)
.SEE ~ <l>
.SEE Predicates.

Boolean expression in SN are considered ``false'' when their evaluation
returns the empty list. All other lisp object has a ``true'' meaning.
The symbol <t> however is preferred for this meaning.


#? t
.TYPE VAR
This symbol means TRUE. Its value is itself.

#? (<> <n_1> <n_2>)	
Tests if <n_1> is different from <n_2>. There is only one
equality test in TLisp. It is able to compare numbers, strings, lists.
Comparison of others kinds of objects tests only the physical
identity.

#? (= <n_1> <n_2>)	
Test if <n_1> is equal to <n_2>. There is only one equality test in
TLisp. It is able to compare numbers, strings, lists. Comparison of
others kinds of objects tests only the physical identity.

#? (0= <n>)	
Test if <n> is equal to 0.

#? (0<> n)	
Test if <n> is different from 0.

#? (<= <n_1> <n_2>)
Test if <n_1> is less or equal than <n_2>. Arguments <n_1> or <n_2> 
may be strings or numbers.

#? (< <n_1> <n_2>)	
Test if <n_1> is less than <n_2>. Arguments <n_1> or <n_2> 
may be strings or numbers.

#? (>= <n_1> <n_2>)	
Test if <n_1> is greater or equal than <n_2>. Arguments <n_1> or <n_2> 
may be strings or numbers.

#? (> <n_1> <n_2>)
Test if <n_1> is greater equal than <n_2>. Arguments <n_1> or <n_2> 
may be strings or numbers.


#? (and <l_1> ... <l_n>)	
Evaluates sequentially <l_1> .. <l_n>. 
If a result is (), immediately returns (). 
Returns <l_n> otherwise.

#? (or <l_1> ... <l_n>)	
Evaluates sequentially <l_1> .. <l_n>. 
If a result is not the empty list, it is immediately returned.
The empty list is returned otherwise.

#? (null <l>)
Returns <t> if the result of evaluating <l> is the empty list. 
Returns the empty list otherwise. 

The macro character <|~|> may be used for that purpose.

#? (not <l>)
.SEE (null <
The <null> and <not> functions are identical.


#? ~ <l>
.TYPE MCHAR
.FILE sysenv.sn
.SEE (null <
This macro-character expand to <(null l)>.




#? Predicates.
.SEE (listp <l>)
.SEE (consp <l>)
.SEE (numberp <l>)
.SEE (atomp <l>)
.SEE (symbolp <l>)
.SEE (externp <l>)
.SEE (classp <l>)
.SEE (functionp  <n>)
.SEE Relational and Booleans Operators
These predicates test the type of any lisp object.


#? (listp <l>)	
Returns a non-nil result when <l> is a list, including the case of the
empty list.

#? (consp <l>)	
Returns a non-nil result when <l> is a non-empty list.

#? (numberp <l>)	
Returns a non-nil result when <l> is a number.

#? (atomp <l>)	
Returns a non-nil result when <l> is an atom.

#? (symbolp <l>)	
Returns a non-nil when <l> is a symbol.

#? (externp <l>)	
Returns a non-nil result item when <l> is a non numerical atom.

#? (classp <l>)	
Returns a non-nil item when <l> is a class.

#? (functionp  <n>)
Returns <t> if <n> is a function.

#? (stringp <s>)
Returns a non nil result if <s> is a string.
