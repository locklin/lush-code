
(defclass bibi object
  ((-idx1- (-flt-)) idx1flt)
  ((-idx1- (-int-)) idx1int)
  ((-str-) str) )


(defmethod bibi bibi()
  (setq idx1flt (matrix 1))
  (setq idx1int (int-matrix 1))
  (setq str "hello") )

(defclass toto object
  ((-idx2- (-flt-)) idx2flt)
  ((-list- (-flt-) (-obj- (bibi))) lst) )

(defmethod toto toto()
  (setq idx2flt (matrix 2 2))
  (setq lst (list 3.14 (new bibi))) )

(de foo (a b z) 
    ((-idx1- (-flt-)) a b)
    ((-obj- (toto)) z)
    (new bibi) )

(de foow (a b z) 
    ((-idx1- (-flt-)) a b)
    ((-obj- (toto)) z)
    (setq :z:lst (list 2.718 (new bibi))) )

(de bar1 (a)
    (-idx1- a)
    (let ((b (matrix 5))
	  (c (new toto)) )
      (foow a b c)
      1))

(de bar2 ()
    (let ((a (matrix 4))
	  (b (matrix 5))
	  (c (new toto)) )
      (foow a b c)
      a))

(de bar3 ()
    (let ((a (matrix 4))
	  (b (matrix 5))
	  (c (new toto)) )
      (foo a b c)
      c))


(dhc-make () (bibi bibi) (toto toto) foo foow bar1 bar2 bar3)
