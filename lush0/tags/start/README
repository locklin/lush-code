------------------------------------------------------------------------
LUSH: The Lisp Universal SHell
------------------------------------------------------------------------

Lush is an object-oriented Lisp interpreter/compiler with features
designed to please people who want to prototype large numerical 
applications. Lush includes an extensive library of vector/matrix/tensor
manipulation, a set of graphic functions, a simple GUI toolkit,
and interfaces to various libraries such as OpenGL, SDL, the SGI
Multimedia library (video/audio grabbing) , the Numerical Recipes 
library, and others. Lush is an ideal frontend script language for 
programming projects written in C or other languages.

What sets Lush apart from other languages such as Python, Perl
or Matlab is the efficiency of its compiled numerical code, and its 
almost seamless integration with C. It is very easy to interface an 
existing C library to Lush and call its functions from the interpreter. 
It is even possible to freely intermix Lisp and C code within one function.
Another advantage of Lush is the extreme simplicity of its syntax
(a far cry from, say, Perl or Matlab).

Historically, Lush has been used mainly in R&D environments to develop
applications in signal processing, machine learning data analysis, 
computer vision, optimization, image processing, statistics, 
visualisation, etc.... But Lush is a general language that can be used
for a variety of applications. For example, Lush has been used to
write simple video games, or to teach kids to program (being an 
interpreter with a very simple syntax).

Some may say "this sounds like Matlab, or S+, or Python". The difference 
is that Lush is much more efficient than these systems, both in terms of 
memory and execution time, thanks to its efficient compilation to C and
its rather unusual memory management. This efficiency allows 
semi-real-time applications such as audio and video processing or 
real-time computer games (using OpenGL and/or SDL).

Lush is the direct descendent of the SN system which was originally
developed by Leon Bottou and Yann LeCun as the front-end of a neural 
network simulator. Various incarnations of SN have been developed 
continuously since 1987, some of which were sold commercially by
Neuristique S.A. in France, and eventually grew into a full-fledged
prototyping and development environment.

The version developed at AT&T Bell Labs, and then at AT&T Labs 
was used to build many succesful technologies and products.
The most notable ones are:
- a handwriting recognition system used by many banks 
  across the world to read checks automatically.
  In fact, some ATM machines made by NCR (that can read 
  checks) run compiled SN code on embedded DSP boards.
- the prototype of the DjVu image compression system.
- numerous machine learning algorithms developed 
  at AT&T since 1988, including the "LeNet" family of
  convolutional neural networks and some early 
  implementations of the Support Vector Machine 
  algorithm.

------------------------------------------------------------------------
WHAT IS IN THIS DISTRIBUTION
------------------------------------------------------------------------

config: contains configuration scripts and information
src: source code of the interpreter
lib: .a or .so files (currently unused)
etc: various shell scripts and utilities
include: .h files

sys: core libraries (lush sources) without which Lush cannot run.
     A minimal/customized version of Lush needs only that directory to run.
lsh: library files (lush sources) that are part of the standard distribution.
     Although they are not required for Lush to run, life would 
     really suck without them.
packages: library files (lush sources) for special applications or platforms, or
     programs that have been contributed by users and cannot be assumed to be 
     present/working in all installations of Lush.
local: (empty) lush libraries that are specific to your site.

doc: documentation and on-line help files.

basement: libraries from SN3.2 that are meant to be ported 
     to Lush in the future.

------------------------------------------------------------------------
COMPILING AND INSTALLING LUSH UNDER UNIX
------------------------------------------------------------------------

1) COMPILATION

cd to the directory where Lush was unpacked 
(say /usr/local/lush), then type:

  configure
  make

Scan the output of `make' for possible error messages.  

There is no `make install', as Lush is designed to 
run directly from the <lushdir>/bin/<os> directory. it is 
recommended to create a symbolic link from somewhere in your 
path (say /usr/local/bin/lush) to bin/<os>/lush in the Lush 
directory (/usr/local/lush/bin/lush in our example).
As root, type:

  % ln -s /usr/local/lush/bin/lush /usr/local/bbin/mips-sgi-irix6.5/lush


2) CONFIGURATION SCRIPT OPTIONS.

The script `configure' understands many options.  
Type `configure --help' to see a full list of options.  
The most important options are summarized below.

 --prefix=PREFIX      specify target installation directory 
                      (default: /usr/local)
 --with-compiler=CC   specify which compiler should be used
                      (default: gcc if available, cc otherwise)
 --enable-debug       enable debug symbols and disable optimization
		      (default: optimize)
 --without-x          compile lush without X11 support


------------------------------------------------------------------------
RUNNING LUSH INTERACTIVELY
------------------------------------------------------------------------

You can then run the executable "bin/lush". Online help on the standard
library is available by typing (helptool) at the Lush prompt. You can 
leave Lush by typing CTRL-D at the prompt.

On startup, Lush loads various libraries from the sys and lsh 
directories, as well as a .lushrc file in the user's home directory.
It is recommended to add a directory lsh in your home directory and
to include the line (addpath "your-home-directory/lsh") to your .lushrc
so that your own Lush programs are found in Lush's search path.

It is quite convenient to run Lush from within Emacs, 
which can be done by creating somewhere in your path a symbolic 
link named "lisp to the lush executable. Then, type ESC-X run-lisp
in Emacs. It is probably a good idea to add the following line
in your .emacs so Emacs switches to Lisp mode when editing a Lush file:

  (setq auto-mode-alist (append (cons "\\.lsh$" 'lisp-mode) auto-mode-alist))

------------------------------------------------------------------------
RUNNING NON-INTERACTIVE LUSH SCRIPTS
------------------------------------------------------------------------

In Unix, Lush can be used to write scripts that can be
called from a shell prompt (like shell or Perl scripts).
A list of command-line arguments are put in the argv variable.

Here is an example: create a file (say "capargs") with the following 
content (replacing the first line by the path to your lush executable):

  #!/usr/local/bin/lush @@
  (printf "capitalizing the arguments:\n")
  (each ((arg argv)) (printf "%s %s\n" arg (upcase arg)))

then, make capargs executable: chmod a+x capargs.
You can now invoke capargs at the shell prompt:

  % capargs asd gfdf
  capitalizing the arguments:
  capargs CAPARGS
  asd ASD
  gfdf GFDF

------------------------------------------------------------------------
HISTORY
------------------------------------------------------------------------

Lush is the direct descendant of the SN system. SN was first developed 
as a neural network simulator with a Lisp-like scripting language.
The project was started in 1987 by Leon Bottou and Yann LeCun, and 
rewritten several times since then. SN was used at AT&T for many research 
projects in machine learning, pattern recognition, and image processing. 
Its various incarnations were used at AT&T Bell Labs, AT&T Labs, the Salk 
Institute, the University of Toronto, Universite of Montreal, UC Berkeley, 
and many other research institutions. The commercial versions of SN were 
used in several large companies as a prototyping tool: Thomson-CSF, ONERA,....

Contributors include: Leon Bottou, Yann LeCun, Patrice Simard,
Yoshua Bengio, Jean Bourrelly, Patrick Haffner, Pascal Vincent,
Sergey Ioffe, and many others.

Here is a family tree of the various incarnations of SN and Lush:

SN(1987) neural network simulator for AmigaOS (Leon Bottou, Yann LeCun)
 |
SN1(1988) ported to SunOS. added shared-weight neural nets and graphics (LeCun)
 |    \
 |   SN1.3(1989) commercial version for Unix (Neuristique)
 |
SN2(1990) with new lisp interpreter and graphic functions (Bottou)
   |   \
   | SN2.2(1991) commercial version (Neuristique)
   |    |
   | SN2.5(1991) with ogre GUI toolkit (Neuristique)
   |   / \
    \ /  SN2.8(1993+) enhanced version (Neuristique)
     |     \
     |   TL3(1993+) lisp interpreter only for Unix and Win32 (Neuristique)
     |      [GPL]
     |        \_______________________________________________
     |                                                        |
   SN27ATT(1991) custom AT&T version (Yann LeCun, AT&T)       |
     |                                                        |
   SN3(1992) IDX matrix engine, Lisp->C compiler/loader and   |
     |       gradient-based learning library                  |
     |       (Bottou, LeCun, AT&T)                            |
     |                                                        |
   SN3.1(1995) redesigned compiler, added OpenGL and SGI VL   |
     |         support (Bottou, LeCun, Simard, AT&T Labs)     |
     |                                                        |
   SN3.2(2000) hardened/cleanup SN3.x code,                   |
     |         added SDL support (LeCun)                      |
     | _______________________________________________________|
     |/
     |
   LUSH1.0(2001) merging of TL3 interpreter + SN3.2 compiler
   [GPL]         and libraries (Bottou, LeCun, AT&T Labs).



