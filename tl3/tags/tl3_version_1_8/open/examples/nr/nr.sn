#? **** File "nr.sn".
;; This file loads the Numerical Recipes extension
;; (a TL/Open extension) and documents the provided functions.
;;
;; The first lines of this file locate the TL/Open module
;; with suffix <".dll"> under Windows and <".so"> under Unix.
;; This file is then loaded using function <mod-load>.


;; --------- Locate and load DLL

(let* ((here (dirname file-being-loaded))
       (base (basename file-being-loaded "sn")) )
  ;; Search along path
  (let ((oldpath (path)))
    (path (concat-fname here)
	  (concat-fname here "Debug")
	  (concat-fname here "Release") 
	  (concat-fname tl3dir "bin") )
    (setq here (filepath base ".so|.sl|.dll"))
    (apply path oldpath ) )
  ;; Go
  (when ~here 
    (error 'mod-load "TL/Open extension not found" base) )
  (when wintl3p 
    (setq here (upcase here)) )
  (when (not (member here (mod-list)))
    (printf " [+%s]\n" base)
    (mod-load here) ) )


#? *** Numerical Recipes Interface.
;; This TL3 extension provides an interface with some
;; of the function of the well known Numerical Recipes
;; book. These functions are very briefly documented in
;; file <"nr.sn">. Please read the book for more information.
;;
;; Note that this interface aims at providing an exemple
;; of interface to the NR library. These functions have not 
;; been as thoroughly tested than the rest of TL3.
;; It also relies on an old version of the NR routines that not
;; exempt of bugs. We plan to improve this in the future.




;; ---- Documentation



#? (nr-flmoon <n> <nph> <jd> <frac>)
;; Calls function <flmoon> from the NR library.
;;.PP
;; Arguments <n> and <nph> are numbers.
;; Arguments <jd> and <frac> are symbols whose
;; value will be set by the function.


#? (nr-julday <m> <d> <y>)
;;.SEE Dates.
;; Calls function <julday> from the NR library
;;.PP
;; Returns the Julian day number for date <m>, <d>, <y>.
;; Note that TL3 provides a set of functions for dealing with dates

#? (nr-caldat <julday> <sm> <sd> <sy>)
;;.SEE Dates.
;; Calls function <caldat> from the NR library
;;.PP
;; Computes the date from the Julian day number <julday>.
;; The month, day and year numbers are stored into symbols <sm>, <sd>, <sy>.
;; Note that TL3 provides a set of functions for dealing with dates

#? (nr-gaussj <a> <b>)
;; Calls function <gaussj> from the NR library.
;;.PP
;; The NR arguments <m> and <n> are implicitely defined
;; by the dimensions of matrix <a> and <b>.

#? (nr-ludcmp <a> <indx>)
;; Calls function <ludcmp> from the NR library.
;;.PP
;; This function performs the in-place LU decomposition of the
;; square matrix <a> of size <n>x<n>. The pivoting permutation is stored 
;; into integer vector <indx> of size <n>. Argument <n> is computed
;; implicitely from the matrix sizes. This function returns
;; the polarity of the pivoting permutation.

#? (nr-lubksb <a> <indx> <b>)
;;.SEE (nr-ludcmp <a> <indx>)
;; Calls function <lubksb> from the NR library.
;;.PP
;; This function solves equation <Ax=b> using the 
;; LU decomposition of matrix <A> specified by 
;; arguments <a> and <indx> returned by <nr-ludcmp>.
;; The equation right hand side is provided in vector <b>. 
;; This function stores the result into matrix <b>.


#? (nr-lusolve <a> <b>)
;;.SEE (nr-lubksb <a> <indx> <b>)
;;.SEE (nr-ludcmp <a> <indx>)
;; Solve linear system of equations.
;;.PP
;; Calls functions <ludcmp> and <lubksb> from the NR library.
;; This function solves the linear system of equations <ax=b>.
;; It uses functions <nr-ludcmp> and <nr-lubksb>. It returns
;; the result without modifying matrix <a> or vector <b>.

(de nr-lusolve(a b)
  (let* ((n (car (bound a)))
	 (alu (copy-matrix a))
	 (ilu (imatrix n))
	 (x (copy-matrix b)) )
    (nr-ludcmp alu ilu)
    (nr-lubksb alu ilu x)
    x ) )


#? (nr-tridag <a> <b> <c> <r> <u>)
;; Calls function <tridag> from the NR library.
;;.PP
;; Arguments are all one-dimenensional matrix with identical sizes.


#? (nr-mprove <a> <alud> <indx> <b> <x>)
;; Calls function <mprove> from the NR library.
;;.PP
;; Arguments <a> and <alud> are matrices <n>x<n>.
;; Argument <indx> is an integer vector of size <n>.
;; Arguments <b> and <x> are vectors of size <n>.


#? (nr-vander <x> <w> <q>)
;; Calls function <vander> from the NR library.
;;.PP
;; Arguments <x>, <w> and <q> are three vectors
;; of size <n>.


#? (nr-toeplz <x> <w> <q>)
;; Calls function <toeplz> from the NR library.
;;.PP
;; Arguments <x>, <w> and <q> are three vectors
;; of size <n>.


#? (nr-svdcmp <a> <w> <v>)
;; Calls function <svdcmp> from the NR library.
;;.PP
;; This function performs the Singular Value Decomposition
;; of the <m>x<n> matrix <a>. This function stores the result
;; into matrix <a>, into the vector <w> of size <n> and into 
;; the <n>x<n> square matrix <v>.  Arguments <n> and <m>
;; are implicitely specified by the matrix dimensions.


#? (nr-svbksb <a> <w> <v> <b> <x>)
;;.SEE (nr-svdcmp <a> <w> <v>)
;; Calls function <svbksb> from the NR library.
;;.PP
;; This function solves equation <Ax=b> using the 
;; SVD decomposition of matrix <A> specified by 
;; arguments <a>, <w> and <v> returned by function <nr-svdcmp>.
;; The equation right hand side is provided in vector <b>. 
;; This function stores the result into matrix <x>.


#? (nr-sparse <b> <x> <asub> <atsub>)
;; Calls function <sparse> from the NR library.
;;.PP
;; This functions solves equation <Ax=b> where <A>
;; is a sparse matrix specified via functions <asub> and <atsub>.
;; The right hand side is provided as vector <b>.
;; The result is stored into vector <x>.
;;.IP
;; Function <asub> is a function taking two vectors <x> and <y>
;; as argument. This function fills vector <y> with the product
;; of matrix <A> and vector <x>.
;;.IP
;; Function <atsub> is a function taking two vectors <x> and <y>
;; as argument. This function fills vector <y> with the product
;; of the transposed matrix <A> and vector <x>.
;;.PP
;; This function returns the residual squared error <rsq>
;; returned by the conjugate gradient algorithm.


#? (nr-sort <a>)
;;.SEE Matrix Sorting and Searching.
;; Calls function <sort> from the NR library.
;;.PP
;; This functions sorts the elements of vector <a> 
;; in ascending order using the Heapsort algorithm.


#? (nr-qcksrt <a>)
;;.SEE Matrix Sorting and Searching.
;; Calls function <qcksrt> from the NR library.
;;.PP
;; This functions sorts the elements of vector <a> 
;; in ascending order using the Quicksort algorithm.


#? (nr-sort2 <a> <b>)
;;.SEE Matrix Sorting and Searching.
;; Calls function <sort> from the NR library.
;;.PP
;; This functions sorts the elements of vector <a> 
;; in ascending order.  It also applies the same
;; permutation to the elements of vector <b>.


#? (nr-sort3 <a> <b> <c>)
;;.SEE Matrix Sorting and Searching.
;; Calls function <sort> from the NR library.
;;.PP
;; This functions sorts the elements of vector <a> 
;; in ascending order.  It also applies the same
;; permutation to the elements of vector <b> and <c>.


#? (nr-indexx <a> <indx>)
;;.SEE Matrix Sorting and Searching.
;; Calls function <indexx> from the NR library.
;;.PP
;; This functions sorts the elements of vector <a> 
;; in ascending order.  It also stores a permutation
;; index into integer matrix <indx>.


#? (nr-rank <indx> <irank>)
;; Calls function <rank> from the NR library.
;;.PP
;; Both arguments <indx> and <irank> are integer vectors
;; of identical size. Argument <n> is implicitely computed
;; from the vector sizes.


#? (nr-mnbrak <ax> <bx> <cx> <fa> <fb> <fc> <func>)
;; Calls function <mnbrak> from the NR library.
;;.PP
;; Arguments <ax>, <bx>, <cx>, <fa>, <fb> and <fc>
;; are symbols whose value is used to intialize
;; and store the results of the minimum bracketing 
;; algorithm. 
;; Argument <func> is a function of one numeric argument 
;; returning a numerical value.


#? (nr-golden <ax> <bx> <cx> <func> <tol> <xmin>)
;; Calls function <golden> from the NR library.
;;.PP
;; Arguments <ax>, <bx> and <cx> contain the initial
;; guess of the minimum location. Argument <tol> specifies
;; the precision of the search. Argument <xmin> is a symbol
;; where this function will store the location of the minimum.
;; Argument <func> is a function of one numeric argument 
;; returning a numerical value.
;; This function will return the value of the function at
;; the minimum.

#? (nr-brent <ax> <bx> <cx> <func> <tol> <xmin>)
;; Calls function <brent> from the NR library.
;;.PP
;; Arguments <ax>, <bx> and <cx> contain the initial
;; guess of the minimum location. Argument <tol> specifies
;; the precision of the search. Argument <xmin> is a symbol
;; where this function will store the location of the minimum.
;; Argument <func> is a function of one numeric argument 
;; returning a numerical value.
;; This function will return the value of the function at
;; the minimum.


#? (nr-dbrent <ax> <bx> <cx> <func1> <func2> <tol> <xmin>)
;; Calls function <dbrent> from the NR library.
;;.PP
;; Arguments <ax>, <bx> and <cx> contain the initial
;; guess of the minimum location. Argument <tol> specifies
;; the precision of the search. Argument <xmin> is a symbol
;; where this function will store the location of the minimum.
;; Argument <func1> is a function of one numeric argument 
;; returning the numerical value of the function to minimize.
;; Argument <func2> is a function of one numeric argument 
;; returning the derivative of the function to optimize.
;; This function will return the value of the function at
;; the minimum.


#? (nr-amoeba <p> <y> <ftol> <func>)
;; Calls function <amoeba> from the NR library.
;;.PP
;; Argument <p> is a matrix <n+1>x<n> containing 
;; the initial position of the edges of the polyhedra. 
;; Argument <y> contains the value
;; of the function on these edges. Argument <ftol> specifies
;; the precision. 
;; Argument <func1> is a function of one vector argument 
;; returning the numerical value of the function to minimize.
;; This function returns the value stored into variable <nfunk>.


#? (nr-powell <p> <xi> <ftol> <iter> <fret> <func>)
;; Calls function <powell> from the NR library.
;;.PP
;; Argument <p> is a vector of size <n>. Argument <xi>
;; is a matrix of size <n>x<n>. Argument <ftol> is 
;; a number specifying the precision. 
;; Argument <func> is a function of one vector argument 
;; returning the numerical value of the function to minimize.
;; On return this function will store the number of iteration 
;; into symbol <iter> and store the value of the function
;; at the minimum into symbol <fret>.


#? (nr-frprmn <p> <ftol> <iter> <fret> <func> <dfunc>)
;; Calls function <frprmn> from the NR library 
;; implementing the Conjugate Gradient minimisation algorithm.
;;.IP
;; Argument <p> is a vector of size <n> containing the initial
;; guess. 
;;.IP
;; Argument <ftol> is a number specifying the precision. 
;;.IP
;; Argument <func> is a function of one vector argument 
;; returning the numerical value of the function to minimize
;; on that point.
;;.IP
;; Argument <dfunc> is a function taking two vectors as argument.
;; It must return the value of the function on the point represented
;; by the first vector. It must also store the gradient of the
;; function into the second vector.
;;.PP
;; On return this function will store the number of iteration 
;; into symbol <iter> and store the value of the function
;; at the minimum into symbol <fret>.


#? (nr-dfpmin <p> <ftol> <iter> <fret> <func> <dfunc>)
;; Calls function <dfpmin> from the NR library 
;; implementing the BFGS minimization algorithm.
;;.IP
;; Argument <p> is a vector of size <n> containing the initial
;; guess. 
;;.IP
;; Argument <ftol> is a number specifying the precision. 
;;.IP
;; Argument <func> is a function of one vector argument 
;; returning the numerical value of the function to minimize
;; on that point.
;;.IP
;; Argument <dfunc> is a function taking two vectors as argument.
;; It must return the value of the function on the point represented
;; by the first vector. It must also store the gradient of the
;; function into the second vector.
;;.PP
;; On return this function will store the number of iteration 
;; into symbol <iter> and store the value of the function
;; at the minimum into symbol <fret>.


#? (nr-simplx <a> <m1> <m2> <m3> <icase> <izrov> <iposv>)
;; Calls function <simplx> from the NR library
;; implementing a simple variant of the simplex algorithm.
;;.PP
;; The objective function and constraint table is specified
;; by matrix <a> of size <m+2>x<n+1>. 
;; Arguments <m1>, <m2>, <m3> specify the
;; number of constraint of each type. Their sum should be <m>.
;; This function will store a return code into symbol <icase> 
;; and the indices of the zero and non zero variables into vectors
;; <izrov> (of size <n>) and <iposv> (of size <m>).
;;.PP
;; This function relies on non trivial convention. 
;; Do not hope to use it without reading the book.
;; The Numerical Recipes implementation of the simplex
;; algorithm is very crude and should be limited to
;; simple problems.


#? (nr-jacobi <a> <d> <v>)
;; Calls function <jacobi> from the NR library.
;;.PP
;; Argument <a> and <v> are <n>x<n> matrices. 
;; Argument <v> is a vector of size <n>.
;; This function returns the contents of the variable <nrot>
;; set by function <jacobi>.


#? (nr-eigsrt <d> <v>)
;; Calls function <eigsrt> from the NR library.
;;.PP
;; Argument <d> is a vector of size <n> containing the eigenvalues.
;; Argument <v> is a <n>x<n> matrix containing the eigenvectors.


#? (nr-tred2 <a> <d> <e>)
;;.SEE (mseigvv <m>)
;; Calls functions <tred2> from the NR library.
;;.PP
;; Argument <a> is a <n>x<n> matrix.
;; Arguments <d> and <e> are vectors of size <n>
;; where this function will store the tridiagonal
;; reduction of symetric matrix <a>.


#? (nr-tqli <d> <e> <z>)
;;.SEE (mseigvv <m>)
;; Calls function <tqli> from the NR library.
;;.PP
;; Argument <d> and <e> are vectors of size <n>
;; representing the tridiagonal reduction of a symetric matrix <a>.
;; This function will store the eigenvectors of matrix <a>
;; into the <n>x<n> matrix <z>.


#? (nr-balanc <a>)
;; Calls function <balanc> from the NR library.
;;.PP
;; Argument <a> is a <n>x<n> matrix.


#? (nr-elmhes <a>)
;; Calls function <elmhes> from the NR library.
;;.PP
;; Argument <a> is a <n>x<n> matrix.


#? (nr-hqr <a> <wr> <wi>)
;; Calls function <hqr> from the NR library.
;;.PP
;; Argument <a> is a <n>x<n> matrix.
;; Arguments <wr> and <wi> are vectors of size <n>.


#? (nr-four1 <data> <isign>)
;; Calls function <four1> from the NR library
;; implementing a monodimensional Fourier transform.
;;.PP
;; Argument <data> is a vector whose size is a power of two.
;; Argument <isign> is an integer specifying the direction
;; of the Fourier transform.


#? (nr-twofft <data1> <data2> <fft1> <fft2>)
;; Calls function <twofft> from the NR library
;; implementing  double Fourier transform.
;;.PP
;; Arguments <data1>, <data2>, <fft1> and <fft2>
;; are vectors whose common size is a power of two.


#? (nr-realft <data> <isign>)
;; Calls function <realft> from the NR library
;; implementing a real Fourier transform.
;;.PP
;; Argument <data> is a vector whose size is a power of two.
;; Argument <isign> is an integer specifying the direction
;; of the Fourier transform.


#? (nr-sinft <data>)
;; Calls function <realft> from the NR library
;; implementing a real sine transform.
;;.PP
;; Argument <data> is a vector whose size is a power of two.


#? (nr-convlv <data> <respns> <m> <isign> <ans>)
;; Calls function <convlv> from the NR library.
;;.PP
;; Argument <data> and <respns> are two vectors whose 
;; common size is a power of two. Arguments <m> 
;; and <isgn> are integers. Argument <ans> is a vector
;; whose size is twice the size of vector <data>.


#? (nr-correl <data1> <data2> <ans>)
;; Calls functon <correl> from the NR library.
;;.PP
;; Argument <data1> and <date2> are two vectors whose 
;; common size is a power of two. Argument <ans> is a vector
;; whose size is twice the size of vectors <data1> and <data2>.


#? (nr-memcof <data> <cof>)
;; Calls function <memcof> from the NR library.
;;.PP
;; Argument <data> and <cof> are two vectors of possibly
;; different sizes. This function returns the number <pm>.


#? (nr-evlmem <fdt> <cof> <pm>)
;; Calls function <evlmem> from the NR library.
;;.PP
;; Arguments <fdt> and <pm> are real numbers.
;; Argument <cof> is a vector.
;; This function returns the result of the NR function <evlmem>.


#? (nr-predic <data> <poles> <future>)
;; Calls function <predic> from the NR library.
;;.PP
;; Arguments <data>, <poles> and <future> are three
;; vectors with possibly different sizes. These sizes
;; are implicitely passed to the function <predic>.


#? (nr-fourn <data> <isign>)
;; Calls function <fourn> from the NR library
;; implementing a multidimensional Fourier transform.
;;.PP
;; Argument <data> is a multidimensional matrix
;; whose dimensions are all power of two. Argument <isign>
;; is an integer specifying the direction of the Fourier
;; transform. The dimensions of matrix <data> are
;; retrieved and passed to the NR function <fourn>.



