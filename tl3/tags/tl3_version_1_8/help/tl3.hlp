$Id: tl3.hlp,v 1.1.1.1 2002-04-16 17:37:32 leonb Exp $
#? **** TL3.


#? *** Introduction to TL3.

The core part of most numerical programs is small and clear. However,
enhancing them with a nice and powerful user interface often requires
a considerable amount of programming. The purpose of TL3 is to
provide a consistent textual and graphical interfaces to many
programs.

TL3 has been first developped for the SN connectionist simulator.
Textual commands were read, interpreted and dispatched to C functions
by the interpreter. The third major version, TL3, has gained a 
graphical interface library and object-oriented extensions. 
Its basic philosophy, however, remains unchanged.


#? ** TLisp Interpreter.

The kernel of TL3 is a compact and portable lisp interpreter. It
gives the user a powerful command language for its programs. This
interpreter is intentionnally small and simple. It however features
all the usual Lisp functions, as well as unusual ones:
.IP
TL3 is especially designed to interface smoothly with 
C subroutines and data structures. This is the
purpose of TL3 to be merged with other programs.
.IP
TL3 is object-oriented. All elementary lisp objects are instances
either of predefined classes, either of user defined classes. These
object-oriented extensions have been designed with the C++ semantic in
mind.
.IP
TL3 has many efficient numerical functions. It is able to perform
matrix calculus operations. Various numerical libraries (eg. the
``Numerical Recipes in C'' library) can be loaded as TL3 extensions.
.PP
The TLisp interpreter is quite similar to other lisps like ``Le_Lisp''
and ``UCI-Lisp''. It significantly differs from ``Common Lisp''. From
the user's point of view, new functions are defined with function 
<de> rather than <defun>.



#? ** TLisp Libraries.

Several libraries have been written using the TL3 language.
Most of them are related to a specific program based on TL3, 
like the SN2.8 connectionist simulator.

A couple of libraries however are part of the core TL3:
.IP
The library <"graphenv.sn"> is a set of simple plotting functions, for
defining axes and plotting curves.
.IP
The library <"ogre.sn"> is an object-oriented toolkit for
programming mouse driven graphics interfaces. Two lines are enough to
setup a window with a button linked to any TL3 function. The user
then is able to click on the button and activate this function.
.IP
The library <"miscenv.sn"> provides a number of miscellaneous
functions for the TL3 environment.
.IP
The library <"help.sn"> parses the comments found in the TL3 program
files and produces an automatic online help.
.PP
Libraries are stored in files located directory <"<tl3dir>/lib">. 
These files are identified by the suffix <".sn"> characteristic
of the TL3 programs.  

Some library files are duplicated in
directory <"<tl3dir>/lib"> with suffix <".snc">. 
These SNC files (created with function <tokenize>)
contain pre-parsed TL3 programs and are faster to 
load.


#? *** TLisp Environment.


#? ** TLisp Basics.

The TLisp language works on data structures referred to as TL3
objects.  The main data structure is the ``list''. A list is an
ordered sequence of TL3 objects of any type including other lists.

All other TL3 objects are collectively referred to as ``atoms''.
There are in fact many kind of atoms used for implementing various
TL3 features. For instance:
.IP
A number represents a numerical value.
.IP
A symbols is just a name used for naming other lisp objects.
.IP
A string is a sequence of characters useful for storing text.
.PP

A TL3 program is stored as a collection of ``functions'' which are
just another kind of TL3 object. When a function is called, a
predefined sequence of operations is applied to a couple of lisp
objects (the function arguments) and a new lisp object is returned
(the function result).

Once TL3 is started, a loop is entered which ``reads'' a TL3
object, ``evaluates'' it and displays the resulting TL3 object.  The
evaluation of a list consists in calling the function named after the
head of the list with the rest of the list as arguments.

Examples:
.IP
Typing <(+ 3 4)> prints <7> which is the result of calling a function
named <+> on the two numbers <3> and <4>.
.IP
Typing <(de sqr(x) (* x x))> defines a function named <sqr> with one
argument referred to as symbol <x>. This functions calls the
multiplication function <*> with two arguments both equal to <x>. The
result of this call is then returned.
.IP
Typing <(sqr 4)> then calls function <sqr> on the number <4>. The
number <16> is then returned.



#? ** TLisp Startup.
.SEE (dump <fname>)
.SEE (startup <...argv...>)
.SEE (toplevel)
At startup time, TL3 locates the executable file and
goes up in the directory hierarchy until it finds a suitable
initialization file.
.IP
If there is a file named <"lib/sysenv.dump">
TL3 loads this binary dump file (created with function <dump>) and
proceed with the startup procedure. 
.IP
If there is a file named <"sysenv.snc"> or <"sysenv.sn"> in directory
<"lib">, TL3 loads this text or binary lisp file and 
proceed with the startup procedure.
.PP
You can force a specific startup file using the TL3 command line
arguments.  If the first argument is a filename preceded by character
<@> (like <"@<filename>">), TL3 loads the specified file as either a
dump file or a TL3 file and proceed with the startup procedure.

TL3 calls then the lisp function <startup> with the TL3 command line
argument as arguments. This function must be defined by the system file
loaded above. In the default system file, this procedure loads the files
given as argument to the TL3 command.  If no files are specified, file
<"stdenv.sn"> is searched and loaded. This file loads default library files
(including a file <".tlrc"> in the user's home directory of Unix systems.)

TL3 then calls function <toplevel>, which is currently defined in
TLisp language by the <"sysenv.sn"> file. This function sets up some
debugging code, and waits for user commands.

The toplevel function continuously prints a question mark prompt,
reads a lisp expresion, evaluates this object and prints the result on
the standard output. This process is repeated until you enter an end
of file character. The global variable result always contains the last
result printed by toplevel.

If the outermost list has not been completed when you enter a carriage
return, toplevel prompts you for rest of the list, by displaying a few
spaces instead of displaying a question mark prompt.

Example: Starting TL3
.VP
% tl3
TL3 version f 1.0 (February 1997)
Copyright (C) Neuristique and Leon Bottou 1991-1997

... loaded as 'tl3'

... using system directory "/home/neuristique/tl3.f".
... using 'tl3.f' product directory "/files1/home/users/neuristique/tl3.f".
... TL3 licensed to NSA.

... loading startup file "/home/neuristique/tl3.f/lib/sysenv.sn".
... loading library file "/home/neuristique/tl3.f/lib/stdenv.sn"
 [graphenv.sn]
 [miscenv.sn]
 [ogre.sn]
 [.tlrc]
 [help.sn]

? 
.PP

#? ** The TLisp Reader.

At this point you can type a textual representation of certain lisp
object.  The reader is a program which converts this textual
representation into an actual lisp object.

TL3 input is composed of words separated by blank delimiters (i.e.
<space>, <tab> or <end-of-line>) by parentheses, or macro-characters.
Any character between a semicolon (;) and an end-of-line is considered
as a comment and is ignored by the interpreter.
.IP
A numerical word is interpreted as a number.
.IP
A word surrounded by double quotes is considered as a string.
.IP
Any other words is interpreted as a symbol name.
.IP
A list is read as a sequence of words enclosed within parenthesis.
The empty list is written <()>.
.PP
The exact syntax for lisp objects is defined later in this manual.
Moreover, the behavior of the reader can be modified by defining
``macro-characters''. Whenever the TL3 reader reaches a macro-character,
it executes immediately an attached function which often calls the Lisp
reader recursively.  For instance, the character quote (') is a
macro-character.


#? ** The TLisp Evaluator.

The evaluator is a program which computes a new lisp object from
another lisp object using a very simple rule. Every kind of object is
in fact defined by a class (yet another TL3 object). The class
defines what happens when this object is evaluated and what happens
when a list starting with this object name is evaluated.

The Lisp evaluator thus does not need to know anything about the
evaluation behavior of all the different kinds of objects. In
addition, it does not even need to test the nature of the objects. An
indirect call is considerably more efficient than series of tests.
Here is the evaluation algorithm for evaluating a Lisp object <p> :

.IFTEX
\goodbreak
.VP
  eval(p) :
   if (p is the empty list)
      return the empty list
   else if (p is a list)
      q = eval(car p)
      if (q is an atom)
           call the class function 'listeval' for q with args (q,p)
      else
           call the default 'listeval' function with args (q,p)
   else if (p is an atom)
      call the class function 'selfeval' for p with arg (p)
.PP

#? ** Errors in TLisp.
.SEE Interruptions in TLisp.
.SEE (on-error <p> <l1> ... <ln>)
.SEE (errname)
.SEE (debug-hook)

The evaluation of the lists sometimes leads to an error.  When an
error occurs, TL3 then executes the <debug-hook> function, which
has been set on startup by function <toplevel>.

This function prints an error message, followed by the top elements of
the evaluation stack (i.e. the list whose evaluation has caused the
error, the list whose evaluation has caused the evaluation of the list
that causes the error, etc... ). 

You are then prompted for a ``Debug toplevel''.
.IP
If you answer <n>, or simply type a carriage return, TL3 aborts any
current evaluation, resets the stack, and restarts the toplevel
function.
.IP	
If you answer <y>, a prompt <"[Debug] ?"> is displayed, and you are
able to type TL3 commands for examining the current variables,
display the current evaluation stack or perform any useful debugging
tasks.  You can leave this debugging toplevel by typing <Ctrl-D> or
using the function <exit>.



#? ** Interruptions in TLisp.
.SEE Errors in TLisp.
.SEE (on-break <p> <l1> ... <ln>)
.SEE (errname)
.SEE (break-hook)

TL3 can be interrupted at any time by typing <Ctrl-C> or <Ctrl-Break>.  
Interruption handling is essentially similar to error handling.  
First, TL3 runs the function <break-hook> function which typically has 
been set up on startup by function <toplevel>.

This function prints an error message. You are then prompted for a
``Break toplevel" which is basically a special kind of debug
toplevel. When you leave the break toplevel by typing <Ctrl-D> or by
using function <exit>, you get a chance to resume the execution at the
interruption point.

Example: 
.VP
? (for (i 1 100)
     (for (j 1 100)
        (if (= i j) (print (* i j))))))
1
4
^C9

*** Break
** in:   (if (= i j) (print (* i j)))
** from: (for (j 1 100) (if (= i j) (print (* i j))))
** from: (for (i 1 100) (for (j 1 100) (if (= i j) (print (* i j))))) ...
** from: (load "$stdin" "$stdout")
** from: (let ((break-hook (lambda () (beep) (if (not (ask "Break top ...
Break toplevel [y/n] ?y
[Break] ? i
= 3
[Break] ? j
= 4
[Break] ? (* i j)
= 12
[Break] ? (where)
Current eval stack:
** in:   (where)
** from: (load "$stdin" "$stdout" "[Break] ? ")
** from: (if (not (ask "Break toplevel")) (error "Stopped") (load "$s ...
** from: (if (= i j) (print (* i j)))
** from: (for (j 1 100) (if (= i j) (print (* i j))))
** from: (for (i 1 100) (for (j 1 100) (if (= i j) (print (* i j))))) ...
** from: (load "$stdin" "$stdout")
** from: (let ((break-hook (lambda () (beep) (if (not (ask "Break top ...
= ()
[Break] ? ^D
Resume execution [y/n] ?y
Resuming execution
16
25
36
49
64....
.PP
Break toplevels and debug toplevels cannot be nested. If an error or
an interruption occurs when you are working in a break or debug
toplevel, TL3 will clean up the evaluation stack, and restart the
toplevel function.

On Unix systems, TL3 is inconditionnally interrupted by typing
<Ctrl-\>. This method however may leave TL3 with inconsistent
internal states. Use it only when <Ctrl-C> does not work for some
reason.


#? ** Leaving TLisp.

For leaving TL3, just type <Ctrl-D> or use the <exit> function.
Type <y> and a carriage return when the confirmation request is
displayed.

Example: 
.VP
? (exit)
= ()

Really quit [y/n] ?y 
Bye
%
.PP

#? ** TLisp Memory Management.

Under normal use, TL3 uses a fast reference counting garbage
collector. Cells are allocated and deallocated on the fly. Each cell
has a counter which contains the number of pointers that can access
it, when the counter is equal to 0, the cell is free; when it is
greater than 0, the cell is left for later use. The free cells are
linked in a free list.

Careful use of these counters and of the free list allow the current
TL3 to be two to three times faster than the previous versions. You
will probably notice the lack of bothersome pauses while the garbage
collector takes effect.

If an error occurs, these counters are no longer right, and a
classical garbage collector rebuilds the free-list and recomputes the
counter values.  Cells are allocated in the core memory by chunks.
Once all allocated cells are used, TL3 gets a new chunk from the
system, and appends them in its free-list. This allocation scheme is
used by all objects in TL3.


#? ** TLisp Runtime.
.SEE TLisp Startup.
.SEE (dump <fname> [<exec>])
.SEE (startup <...argv...>)
.SEE (toplevel)

Using function <dump>, it is possible to create a binary image of the
lisp structures contained in a TL3 process. Such binary dump files
are useful for distributing TL3 based programs without providing an
extensive list of TL3 library files.

TL3 indeeds undumps file <"sysenv.dump"> before even searching for the
regular startup library <"sysenv.sn">. You can also request TL3 to load a
specific dump file by typing <"@<filename>"> as the first command line
argument to the TL3 program.

It is then useful to redefine functions <startup> and <toplevel> in
order to redefine the startup sequence and the interactive loop.  The
following function dumps a binary file for a typical Ogre application:
.VP
(de dump-cold(s)
    ;; save functions <toplevel> and <startup>.
    (unlock-symbol toplevel)
    (unlock-symbol startup)
    (setq old-toplevel toplevel)
    (setq old-startup startup)

    ;; Redefining <startup> gives you a chance
    ;; to initalize your application and parse the
    ;; command line arguments
    (de startup argv
        ;; Disable <CTRL-C>
        (unlock-symbol break-hook)
        (setq break-hook (lambda() t))
        ;; Initialize the OGRE library
        (ogre)
        ;; Parse arguments and create the main window.
        (init-my-application argv) )
    
    ;; Redefining <toplevel> gives you a chance to
    ;; alter the user interaction loop. This function
    ;; is reentered whenever an error occurs.
    ;; The default <toplevel> waits for lisp commands.
    ;; The following function just accepts OGRE events.
    (de toplevel()
        (process-pending-events)
        (while my-application-mainwindow
          (waitevent)
          (process-pending-events) )
        (exit 0) )
    
    ;; We can then dump a binary file.
    (dump s) 
    
    ;; And restore the previous status.
    (setq toplevel old-toplevel)
    (setq startup old-startup)
    (lock-symbol toplevel)
    (lock-symbol startup) )

.PP
Redefining function toplevel prevents the user to enter 
TL3 commands and gives total control to your program.  
The above example, for instance, restricts user interaction
to graphics interfaces. The user cannot enter lisp expressions.


#? *** << list.hlp
#? *** << numbers.hlp
#? *** << boolean.hlp
#? *** << symbol.hlp
#? *** << control.hlp
#? *** << functions.hlp
#? *** << strings.hlp
#? *** << matrix.hlp
#? *** << objects.hlp
#? *** << htable.hlp
#? *** << date.hlp
#? *** << inputoutput.hlp
#? *** << miscellaneous.hlp
#? *** << graphics.hlp
#? *** << ../lib/help.sn
