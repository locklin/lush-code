;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; LUSH Lisp Universal Shell
;;;   Copyright (C) 2002 Leon Bottou, Yann Le Cun, AT&T Corp, NECI.
;;; Includes parts of TL3:
;;;   Copyright (C) 1987-1999 Leon Bottou and Neuristique.
;;; Includes selected parts of SN3.2:
;;;   Copyright (C) 1991-2001 AT&T Corp.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 2 of the License, or
;;; (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with this program; if not, write to the Free Software
;;; Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111, USA
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; $Id: mnist-kernel.lsh,v 1.4 2004-11-26 15:24:42 leonb Exp $
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(libload "svm/kernel")
(libload "libidx/idx-float")
(libload "libidx/idx-double")
(libload "libidx/idx-int")

(defclass MnistRBFKernel SVMKernel
  ((-idx2- (-ubyte-)) x)
  ((-idx1- (-ubyte-)) y)
  ((-double-) gamma) 
  ((-int-) count) )

(defmethod MnistRBFKernel MnistRBFKernel(trx try tex tey g)
  ((-idx3- (-ubyte-)) trx)
  ((-idx1- (-ubyte-)) try)
  ((-idx3- (-ubyte-)) tex)
  ((-idx1- (-ubyte-)) tey)
  ((-double-) g) 
  (setq x (ubyte-matrix 70000 (* 28 28)))
  (setq y (ubyte-matrix 70000))
  (copy-any-matrix trx (narrow x 0 60000 0))
  (copy-any-matrix tex (narrow x 0 10000 60000))
  (copy-any-matrix try (narrow y 0 60000 0))
  (copy-any-matrix tey (narrow y 0 10000 60000))
  (setq gamma g)
  (setq count 0) )

(defmethod MnistRBFKernel vector(i)
  ((-int-) i)
  (select x 0 i) )

(defmethod MnistRBFKernel label(i)
  ((-int-) i)
  (to-double (y i)) )

(defmethod MnistRBFKernel call(i j)
  ((-int-) i j)
  (incr count)
  (let ((sum 0)
	(x1 (select x 0 i))
	(x2 (select x 0 j)) )
    ((-int-) sum)
    (cinline-idx1loop2 x1 "unsigned char" x2 "unsigned char" "p1" "p2" "k"
		       #{{ int d = (int)( (int)*p1 - (int)*p2 );
		           $sum += d * d; }#} ) 
    (exp (- (* (/ gamma 16384) sum))) ) )

(delete mnist-kernel)

(let ((dhc-make-lushflags (concat dhc-make-lushflags " -funroll-all-loops")))
  (dhc-make () (MnistRBFKernel MnistRBFKernel vector label call) ) )

(de load-mnist() 
  (when (not  mnist-train-x)
    (defvar mnist-train-x (load-matrix "mnist/train-images-idx3-ubyte")) )
  (when (not mnist-test-x)
    (defvar mnist-test-x (load-matrix "mnist/t10k-images-idx3-ubyte")) )
  (when (not mnist-train-y)
    (defvar mnist-train-y (load-matrix "mnist/train-labels-idx1-ubyte")) )
  (when (not mnist-test-y)
    (defvar mnist-test-y (load-matrix "mnist/t10k-labels-idx1-ubyte")) ) 
  (when (not mnist-kernel)
    (defvar mnist-kernel 
      (new MnistRBFKernel 
	   mnist-train-x mnist-train-y
	   mnist-test-x mnist-test-y
	   0.005 ) ) ) )

(load-mnist)
