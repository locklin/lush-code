(libload "opengl/glut")
(libload "inventor/inventor")

(eval `(de dummy_conepp () ,inventor-cpheader-cmd ()))
;; create a glut window 
(defclass iv-demo-window glutwindow
  ((-obj- (SoSeparator)) root)
  ((-obj- (SbViewportRegion)) vp))
 
(defmethod iv-demo-window iv-demo-window ()
  (setq root  (new soseparator ()))
  (setq vp    (new sbviewportregion ()))
  (glut-init-display-mode @(bitor @GLUT_RGB @GLUT_DOUBLE @GLUT_DEPTH @GLUT_MULTISAMPLE))
  (==> this create 0 0 400 400 "")
  (let ((mycamera   (new soperspectivecamera ()))
	(mylight    (new sodirectionallight ())))
    (SoDB_init)
    (==> root ref)
    (==> root addchild :mycamera:p)
    (==> root addchild :mylight:p)
    (==> mycamera viewall_node :root:p :vp:p 1.0)

    (glenable @GL_DEPTH_TEST)
    (glclearcolor 0.132 0.542 0.132 1.0)
    ))

(defmethod iv-demo-window cone-scene ()
  (let* ((mymaterial (new somaterial ()))
	(mycone     (new socone ())))

    (==> (==> mymaterial getmf_diffusecolor) setvalue 1.0 0.0 0.0)
;;    (mycolor (==> mymaterial getmf_diffusecolor))
;;    (==> mycolor setvalue 1.0 0.0 0.0)
    (==> root addchild :mymaterial:p)
    (==> root addchild :mycone:p)
    ))


(defmethod iv-demo-window glut-display ( ) 
  (let  ((myrenderer (new soglrenderaction () :vp:p)))
    (glclear @(bitor @GL_COLOR_BUFFER_BIT @GL_DEPTH_BUFFER_BIT))
    (==> this cone-scene)
    (==>  myrenderer apply_node :root:p)
    (glut-swap-buffers)))

(dhc-make-with-c++ () (list inventor-libinventor)
	  dummy_conepp
	  (iv-demo-window iv-demo-window cone-scene  glut-display))
