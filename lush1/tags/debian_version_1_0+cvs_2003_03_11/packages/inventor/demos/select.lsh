(libload "opengl/glut")
(libload "inventor/inventor")

(de myselectioncb ( s p)
  ((-gptr-) s p)
  #{ printf("hello, selected.\n"); #}
  ())

(de mydeselectioncb (s p)
  ((-gptr-) s p)
  #{ printf("hello, deselected.\n"); #}
  ())

(dhc-make () myselectioncb mydeselectioncb)

;; create a glut window 
(defclass mill-window glutwindow
  ((-obj- (SoSelection)) selectionroot)
  ((-obj- (SoSeparator)) root)
  ((-obj- (SbViewportRegion)) vp)
  ((-obj- (SoPerspectiveCamera)) mycamera))

 
(defmethod mill-window mill-window ()
  (SoDB_init)
  (setq selectionroot (new soselection ()))
  (setq root  (new soseparator ()))
  (setq vp    (new sbviewportregion ()))
  (setq mycamera   (new soperspectivecamera ()))
  (glut-init-display-mode @(bitor @GLUT_RGB @GLUT_DOUBLE @GLUT_DEPTH @GLUT_MULTISAMPLE))
  (==> this create 0 0 400 400 "")
  (==> vp setWindowSize 400 400)
  (let ((mylight    (new sodirectionallight ())))
    (==> selectionroot ref)
    (==> (==> selectionroot getsf_policy) setvalue @SoSelection_SINGLE)
    (==> selectionroot setpickMatching  0)
    (==> selectionroot addSelectionCallback (gptr myselectioncb) (gptr ()))
    (==> selectionroot adddeselectioncallback  (gptr mydeselectioncb) (gptr ()))
    (==> selectionroot addchild :root:p)
;;    (==> (==> mycamera getsf_position) setvalue 0.0 0.0 9.0)
    (==> root addchild :mycamera:p)
    (==> root addchild :mylight:p)

    (glenable @GL_DEPTH_TEST)
    (glclearcolor 0.132 0.542 0.132 1.0)

    (==> this water-scene)
    ))

(defmethod mill-window water-scene ()
  (let* ((sphereroot (new SoSeparator ()))
	 (spheretransform (new SoTransform ()))
	 (spherematerial  (new SoMaterial ()))
	 (mysphere (new SoSphere ()))
	 )
    (==> (==> spheretransform getsf_translation) setvalue 17 17 0)
    (==> (==> spheretransform getsf_scalefactor) setvalue 8 8  8)
    (==> sphereroot addchild :spheretransform:p)
    
    (==> (==> spherematerial getmf_diffusecolor) setvalue 0.8 0.8 0.8)
    (==> sphereroot addchild :spherematerial:p)

    (==> sphereroot addchild :mysphere:p)
    (==> root addchild :sphereroot:p)    

    (==> mycamera viewall_node :root:p :vp:p 1.0)
    ))


(defmethod mill-window glut-display ( ) 
  (let ((myrenderer (new soglrenderaction () :vp:p)))
    (glclear @(bitor @GL_COLOR_BUFFER_BIT @GL_DEPTH_BUFFER_BIT))
    (==>  myrenderer apply_node :root:p)
    (glut-swap-buffers)))

;;(dhc-make-with-c++ () ()  dummy_water  (iv-demo-window water-scene   iv-demo-window  glut-display))
;; (setq sm (new soscenemanager ()))
;; (==> sm setscenegraph :a:root:p)
;; (setq k (new sokeyboardevent ()))
;; (==> sm processevent :k:p)
;; (setq mo (new SoMouseButtonEvent ()))
;; (==> mo setPosition    )
;; (==> mo setButton 1)
;; (==> mo setState @SoButtonEvent_UP)
;; (setq b (new sbvec2s ()))
;; (==> b setvalue 100 100)
;; (==> mo setposition :b:p)
