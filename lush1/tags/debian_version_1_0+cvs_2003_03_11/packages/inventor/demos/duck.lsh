(libload "opengl/glut")
(libload "inventor/inventor")

(de mykey () 
  #{ printf("hello world.\n"); #}
  ())

(dhc-make () mykey)

(defclass duck-window glutwindow
  ((-obj- (SoSeparator)) root)
  ((-obj- (SbViewportRegion)) vp)
  ((-obj- (SoPerspectiveCamera)) mycamera))
 
(defmethod duck-window duck-window ()
  (setq root  (new soseparator ()))
  (setq vp    (new sbviewportregion ()))
  (setq mycamera (new SoPerspectiveCamera ()))
  (glut-init-display-mode @(bitor @GLUT_RGB @GLUT_DOUBLE @GLUT_DEPTH @GLUT_MULTISAMPLE))
  (==> this create 0 0 400 400 "")
  (==> vp  setWindowSize 400 400)
  (SoDB_init)
  (==> root ref)
  (==> this duck-scene)
  (glenable @GL_DEPTH_TEST)
  (glclearcolor 0.132 0.542 0.132 1.0)
  (glut-keyboard-func (gptr mykey))
  ))

(defmethod duck-window duck-scene ()
  (let ((mylight (new SoDirectionalLight ()))
	(globalRotXYZ (new SoRotationXYZ ()))
	(duck (new SoSeparator ()))
	(myrotor (new SoRotor ())))

    (==> (==> mycamera getsf_position) setvalue 0.0 -4.0 8.0)
    (==> (==> mycamera getsf_heightAngle) setvalue (/ 3.14159 2.5))
    (==> (==> mycamera getsf_nearDistance) setvalue 1.0)
    (==> (==> mycamera getsf_farDistance) setvalue  15.0)
    (==> root addChild :mycamera:p)

    (==> root addChild :mylight:p)

    (==> (==> globalRotXYZ getsf_axis) setvalue @SoRotationXYZ_X)
    (==> (==> globalRotXYZ getsf_angle) setvalue (/ 3.14159 9))
    (==> root addChild :globalRotXYZ:p)

    (==> (==> myrotor getsf_rotation) setvalue 0 1 0 0)
    (==> (==> myrotor getsf_speed) setvalue 0.2)
    (==> root addChild :myrotor:p)

    (let ((myinput (new SoInput ()))
	  (duckRotXYZ (new SoRotationXYZ ()))
	  (initialTransform (new SoTransform ())))
	
      (==> (==> duckRotXYZ getsf_axis) setvalue @SoRotationXYZ_Y)
      (==> (==> duckRotXYZ getsf_angle) setvalue 0.0)
      (==> duck addChild :duckRotXYZ:p)

      (==> (==> initialTransform getsf_translation) setvalue 0.0 0.0 3.0)
      (==> (==> initialTransform getsf_scaleFactor) setvalue 6.0 6.0 6.0)
      (==> duck addChild :initialTransform:p)


      (==> myinput openFile "duck.iv" 0)
      (progn-without-fpe (==> duck addChild (SoDB_readAll :myinput:p)))
      )
    (==> root addChild :duck:p)
    ))


(defmethod duck-window glut-display ( ) 
  (let  ((myrenderer (new soglrenderaction () :vp:p)))
    (glclear @(bitor @GL_COLOR_BUFFER_BIT @GL_DEPTH_BUFFER_BIT))
    (==>  myrenderer apply_node :root:p)
    (glut-swap-buffers)))


