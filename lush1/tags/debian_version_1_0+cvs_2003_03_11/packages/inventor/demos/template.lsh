(libload "opengl/glut")
(libload "inventor/inventor")

;; create a glut window 
(defclass mill-window glutwindow
  ((-obj- (SoSeparator)) root)
  ((-obj- (SbViewportRegion)) vp)
  ((-obj- (SoPerspectiveCamera)) mycamera))

 
(defmethod mill-window mill-window ()
  (setq root  (new soseparator ()))
  (setq vp    (new sbviewportregion ()))
  (setq mycamera   (new soperspectivecamera ()))
  (glut-init-display-mode @(bitor @GLUT_RGB @GLUT_DOUBLE @GLUT_DEPTH @GLUT_MULTISAMPLE))
  (==> this create 0 0 400 400 "")
  (==> vp setWindowSize 400 400)
  (let ((mylight    (new sodirectionallight ())))
    (SoDB_init)
    (==> root ref)
    (==> (==> mycamera getsf_position) setvalue 0.0 0.0 9.0)
    (==> root addchild :mycamera:p)
    (==> root addchild :mylight:p)

    (glenable @GL_DEPTH_TEST)
    (glclearcolor 0.132 0.542 0.132 1.0)

    (==> this water-scene)
    ))

(defmethod mill-window water-scene ()
  (let* ((myinput (new SoInput ()))
	 (windmillTower (new SoSeparator ()))
	 (myRotor (new SoRotor ()))
	 (windmillVanes (new SoSeparator ()))
	 )
    
    (==> myinput openFile "windmillTower.iv" 0)
    (progn-without-fpe (==> root addChild (SoDB_readAll :myinput:p)))
    (==> myinput closeFile)

 
    (==> (==> myrotor getsf_rotation) setvalue 0 1 0 0)
    (==> (==> myrotor getsf_speed) setvalue 0.2)
    (==> root addChild :myrotor:p)

    (==> myinput openFile "windmillVanes.iv" 0)
    (progn-without-fpe (==> root addChild (SoDB_readAll :myinput:p)))
    (==> myinput closeFile)
  
    ))


(defmethod mill-window glut-display ( ) 
  (let ((myrenderer (new soglrenderaction () :vp:p)))
    (glclear @(bitor @GL_COLOR_BUFFER_BIT @GL_DEPTH_BUFFER_BIT))
    (==>  myrenderer apply_node :root:p)
    (glut-swap-buffers)))

;;(dhc-make-with-c++ () ()  dummy_water  (iv-demo-window water-scene   iv-demo-window  glut-display))
