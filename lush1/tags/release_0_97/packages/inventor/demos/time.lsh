(libload "opengl/glut")
(libload "inventor/inventor")

;; create a glut window 
(defclass time-window glutwindow
  ((-obj- (SoSeparator)) root)
  ((-obj- (SbViewportRegion)) vp)
  ((-obj- (SoPerspectiveCamera)) mycamera))

 
(defmethod time-window time-window ()
  (setq root  (new soseparator ()))
  (setq vp    (new sbviewportregion ()))
  (setq mycamera   (new soperspectivecamera ()))
  (glut-init-display-mode @(bitor @GLUT_RGB @GLUT_DOUBLE @GLUT_DEPTH @GLUT_MULTISAMPLE))
  (==> this create 0 0 400 400 "")
  (==> vp setWindowSize 400 400)
  (let ((mylight    (new sodirectionallight ())))
    (SoDB_init)
    (==> root ref)
;;    (==> (==> mycamera getsf_position) setvalue 0.0 0.0 9.0)
    (==> root addchild :mycamera:p)
    (==> root addchild :mylight:p)

    (glenable @GL_DEPTH_TEST)
    (glclearcolor 0.132 0.542 0.132 1.0)

    (==> this time-scene)
    ))

(defmethod time-window time-scene ()
  (let* ((mymaterial (new SoMaterial ()))
	 (mytext (new SoText3 ())))

    (==> (==> mymaterial getmf_diffusecolor) setvalue 1.0 0.0 0.0)
    (==> root addChild :mymaterial:p)

    (==> (==> mytext getmf_string) connectfrom_field (sodb_getglobalfield "realTime"))
    (==> root addChild :mytext:p)  
    ))


(defmethod time-window glut-display ( ) 
  (let ((myrenderer (new soglrenderaction () :vp:p)))
    (glclear @(bitor @GL_COLOR_BUFFER_BIT @GL_DEPTH_BUFFER_BIT))
    (==>  myrenderer apply_node :root:p)
    (glut-swap-buffers)))

;;(dhc-make-with-c++ () ()  dummy_water  (iv-demo-window water-scene   iv-demo-window  glut-display))
