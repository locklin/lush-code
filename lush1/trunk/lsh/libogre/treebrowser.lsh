
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;;  Tree Explorer class for Lush

#? *** treebrowser
;;  This provides an easy way to navigate ltree structures
;;  similar to the familiar file/directory explorers found on
;;  various desktop environments.
;;  See {hlink "ltree"}.


(libload "ogre")
(libload "ldoc/ltree")


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defclass Scroller Viewer)

(defmethod Scroller Scroller(w h contenu)
  (==> this Viewer w h contenu t t)
  (==> vscroll setdrag 
       (eval `(lambda (c) (==> ,this vscroll (==> c getdata))))))

(defmethod Scroller vscroll (pv)
  (let (((xx yy ww hh) :inside:rect)
	((x y w h) :view:rect) )
    (setq pv (max 0 (min pv (- hh h))))
    (when (<> vpos pv)
      (setq vpos pv)
      (==> inside move (- x hpos) (- y vpos))
      (==> this expose rect) 
      ; (==> this advertize) 
      ) ) )
  
(defmethod Scroller vcenter (pv)
  (let (((xx yy ww hh) :inside:rect)
	((x y w h) :view:rect) )
    (when (or (> (- pv vpos) (- h 30)) (< (- pv vpos) 15))
      (==> this vscroll (- pv (/ h 2))))))

;; same as viewer, but scrollbar on the left
(defmethod Scroller manage-geometry()
  (let (((x y ww hh) rect))
    (when hscroll (incr hh -21))
    (when vscroll (incr ww -21))
    (==> view geometry (+ x 2 (if vscroll 21 0)) (+ y 2)
      (- ww (if vscroll 6 4))
      (- hh (if hscroll 6 4)) )
    (when hscroll
      (==> hscroll geometry (+ x (if vscroll 21 0))(+ y hh)
	(if vscroll (1+ ww) ww) 21 ) )
    (when vscroll
      (==> vscroll geometry x  y
	21 (if hscroll (1+ hh) hh) ) ) )
  (==> this setpos hpos vpos)
  (==> this advertize) )
  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defclass Explorer VisualObject
  (textfont font-8f)
  charw					; width of typical character
  charh					; height of typical character
  lineh					; distance between lines
  baseline				; ordinate of text baseline from top
  selcolor				; highligthed color of selected item
  iconcolor				; bg color of open/close icons
  iconcolor-d				; bg color of disabled open/close icons
  txtcolor				; text color
  txtcolor-d				; disabled text color
  nlin					; number of lines (open items in tree)
  ncol					; number of column to display entire tree
  tree					; root node of currently displayed ltree
  current-item				; item under cursor (highlighted)
  data					; content of selected item
  enter-call				; call when enter key is pressed on an item
  open-call				; call when right arrow key is pressed
  close-call				; call when left arrow key is pressed
  move-call				; call shen up/down arrows are pressed

  icon-open				; string for open item "-"
  icon-closed				; string for closed item "+"
  icon-width				; width of icon string
  tabs					; indentation between levels

  min-nlin				; minimum number of lines
  min-ncol				; minimum number of columns
  current-filter			; function to filter nodes
)

;;; Constructor

(defmethod Explorer explorer(ltree &optional ecall ocall ccall mcall)
  (let ((noop (lambda (c) ())))
    (setq enter-call (if (functionp ecall) ecall noop))
    (setq open-call (if (functionp ocall) ocall noop))
    (setq close-call (if (functionp ccall) ccall noop))
    (setq move-call (if (functionp mcall) mcall noop)))
  (setq icon-open "- ")
  (setq icon-closed "+ ")
  (setq min-nlin 20)
  (setq min-ncol 32)
  (setq tabs 2)
  (setq tree ltree)
  (setq current-item tree))

;;; Aspect

(defmethod Explorer compute-geometry()
  (when window
    (textfont)
    (when (not icon-width)
      (setq selcolor (color-rgb 0.9 0.93 1.0))
      (setq iconcolor (color-rgb 0.9 0.7 0.7))
      (setq iconcolor-d (color-rgb 1 0.9 0.9))
      (setq txtcolor (color-rgb 0 0 0))
      (setq txtcolor-d (color-rgb 0.6 0.6 0.6))
      (setq icon-width (text-width icon-open))
      (setq charh (text-height "0"))
      (setq lineh (int (* 1.6 charh)))
      (setq charw (- (text-width "00") (text-width "0")))
      (setq baseline (- (int (* 0.3 charh)) (cadr (rect-text 0 0 "0"))))
      (setq nlin 0) (setq ncol 0))
    (==> this shrink-wrap)
    rect ))

(defmethod Explorer shrink-wrap()
  (setq nlin (max min-nlin (ltree-count-lines tree)))
  (setq ncol (max min-ncol (ltree-count-columns tree 0 tabs)))
  (==> this resize (+ (* charw ncol) icon-width 8)  (+ (* lineh nlin) 8)))

(defmethod Explorer recenter(v)
  (==> v vcenter (* lineh (ltree-where tree current-item))))

(defmethod Explorer backpaint-bw()
  (let (((x y w h) rect))
    (cls)
    (draw-rect x y (1- w) (1- h)) 
    (draw-rect (+ x 2) (+ y 2) (- w 5) (- h 5)) ) )

(defmethod Explorer repaint-bw()
  (let (((x y w h) rect))
    (ltree-paint-bw tree current-item (+ x 2) (+ y 2) (- w 5) (- h 5) 
		   (+ x 4) (+ y 4) charw lineh baseline 
		   icon-open icon-closed icon-width tabs 
		   selcolor)))

(defmethod Explorer backpaint-color()
  (let (((x y w h) rect))
    (fill-down-rect x y w h color-bg)))

(defmethod Explorer set-current(c)
  (when (<> c current-item)
    (setq current-item c)
    (==> this expose)
    (when move-call (move-call this))))

(defmethod Explorer repaint-color()
  (let (((x y w h) rect))
    (ltree-paint-color tree current-item (+ x 2) (+ y 2) (- w 5) (- h 5) 
		   (+ x 4) (+ y 4) charw lineh baseline 
		   icon-open icon-closed icon-width tabs 
		   selcolor iconcolor iconcolor-d txtcolor txtcolor-d)))

(defmethod Explorer keypress(c x y)
  (selectq c
    ("c" (==> this close-all))
    ("\r" (==> this next-hit))))

(defmethod Explorer arrow-left(x y)
  (let ((changep ()))
    (if  (==> current-item openp)
	(progn
	  (==> current-item close)
	  (setq changep t))
      (let ((p (==> current-item getparent)))
	(when p (==> p close) (setq current-item p) (setq changep t))))
    (when changep
      (==> this shrink-wrap)
      (==> this expose) 
      (when close-call (close-call this)))))

(defmethod Explorer arrow-right(x y)
  (==> current-item open)
  (when  (==> current-item openp)
    (==> this shrink-wrap)
    (==> this expose) 
    (when open-call (open-call this)))
  (when enter-call (enter-call this)))


(defmethod Explorer arrow-down(x y)
  (let ((c current-item))
    (setq current-item (ltree-next current-item ))
    (when (<> c current-item)
      (==> this expose) 
      (when move-call (move-call this)))))

(defmethod Explorer arrow-up(x y)
  (let ((c current-item))
    (setq current-item (ltree-previous current-item))
    (when (<> c current-item)
      (==> this expose) 
      (when move-call (move-call this)))))

(defmethod Explorer mouse-up(x1 y1 x2 y2)
    (let (((x y w h) rect))
      (let* ((n (div (- y2 (+ y 2)) lineh))
	     (tx (ltree-nth (cons tree 0) n)))
	(when (and tx (not (numberp tx))) 
	  (let ((ctx (car tx)))
	    (==> this set-current ctx)
	    (when enter-call (enter-call this))	    
	    (when (< (- x2 (+ x 2)) (* 2 charw (1+ (cdr tx))))
		(if (==> ctx openp) 
		    (progn
		      (==> ctx close)
		      (==> this shrink-wrap)
		      (==> this expose) 
		      (when close-call (close-call this)))
		  (==> ctx open)
		  (==> this shrink-wrap)
		  (==> this expose) 
		  (when open-call (open-call this)))))))))

(defmethod Explorer next-hit()
  (let ((c current-item))
    (if current-filter
	(setq current-item (or (ltree-next-hit current-item current-filter) tree))
      (when (not (==> current-item openp)) (==> current-item open))
      (setq current-item (ltree-next current-item)))
    (when (<> c current-item)
      (==> this shrink-wrap)
      (==> this expose) 
      (when move-call (move-call this))
      (when enter-call (enter-call this)))))

(defmethod Explorer close-all()
  (ltree-close-all tree)
  (setq current-item tree)
  (==> this shrink-wrap)
  (==> this expose) 
  (when move-call (move-call this)))

;; set filter to a function that returns t if the
;; regular expression <f> is present in any of
;; the key phrases (as returned by method getkey).
(defmethod Explorer setfilter(f) 
  (if (or (not f) (= f ""))
      (setq current-filter ())
    (setq current-filter 
	  (eval
	   `(lambda (c)
	      (let ((s (==> c getkey)) (r ())) 
		(while (and s (not r)) 
		  (when (regex-seek ,f (cleanup-regex (car s))) (setq r t)) 
		  (setq s (cdr s))) r))))))


(defmethod Explorer getdata() current-item)

(defmethod Explorer hasdata() this )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defclass TreeBrowser form
  tree
  tree-viewer
  tree-explorer
  text-pane
  text-vscroller
  text-hscroller
  search-string
  closeall-btn
  findnext-btn
  clear-btn
  filter-btn

  srchbtn
  srchbtn-tree
  srchbtn-tree-text
  )

(de closeall-func (c) (==> tree-explorer close-all))
(de findnext-func (c) 
    (==> tree-explorer setfilter (==> search-string getdata))
    (==> tree-explorer next-hit))
(de clear-func (c)  
    (==> search-string setdata "")
    (==> tree-explorer setfilter (==> search-string getdata)))
(de filter-func (c) ())
(de enter-func (c) 
    (let* ((curr (==> tree-explorer getdata))
	   (hn (when curr (==> curr getdata))))
      ;; (pretty (==> hn getdata))
      ;; (setq *asd*  (==> hn getdata))
      (==> *ldoc-text* render (==> hn getdata))
      ;; (==> *ldoc-html* render (==> hn getdata))
      (when hn (==> text-pane setdata (==> hn getdata)))))
(de open-func (c) ())
(de close-func (c) 
    (==> tree-explorer recenter tree-viewer))
(de move-func (c) (==> tree-explorer recenter tree-viewer))
;;(de move-func (c) (==> tree-explorer recenter tree-viewer) (enter-func c))


;; intree must be the root node of an ltree, i.e. an object
;; that implements the required methods listed in
;; the class ltree-node. intree does not need to be an ltree-node,
;; it just needs to implement the interface.
(defmethod TreeBrowser TreeBrowser (w h1 h2 intree &optional horiz)
  (setq tree intree)
  (==> tree open)
  (setq tree-explorer 
	(new explorer tree enter-func open-func close-func move-func))
  (setq tree-viewer (new scroller w h1 tree-explorer))
  (setq text-pane 
	(new textpane (/ w 7) (/ h2 9)() () 
	     (setq text-vscroller (new VScrollbar 0 ()))
	     (setq text-hscroller (new HScrollbar 0 ()))))
  (setq search-string (new editstring 24))
  (==> search-string setcall findnext-func)
  (setq findnext-btn (new stdbutton "Next" findnext-func))
  ;; (setq filter-btn (new stdbutton "Filter" filter-func))
  (setq closeall-btn (new stdbutton "Collapse" closeall-func))
  (setq clear-btn (new stdbutton "Reset" clear-func))
  (setq srchbtn (new row (new string "search:") 
		     search-string findnext-btn 
		     ;; filter-btn 
		     closeall-btn clear-btn))
  (setq srchbtn-tree (new column srchbtn tree-viewer))
  (if horiz
      (setq srchbtn-tree-text (new row srchbtn-tree text-pane))
    (setq srchbtn-tree-text (new column srchbtn-tree text-pane)))
  (==> this (form . insert) srchbtn-tree-text))
  
  


