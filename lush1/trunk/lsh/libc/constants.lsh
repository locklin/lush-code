;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; LUSH Lisp Universal Shell
;;;   Copyright (C) 2002 Leon Bottou, Yann Le Cun, AT&T Corp, NECI.
;;; Includes parts of TL3:
;;;   Copyright (C) 1987-1999 Leon Bottou and Neuristique.
;;; Includes selected parts of SN3.2:
;;;   Copyright (C) 1991-2001 AT&T Corp.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 2 of the License, or
;;; (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with this program; if not, write to the Free Software
;;; Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111, USA
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; $Id: constants.lsh,v 1.1 2002-08-09 16:31:56 leonb Exp $
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



#? *** Symbolic constants.
;; This file provides a means to define symbolic constants
;; and refer to them using a well defined syntax.

(when (not |*CONSTANTS|)
  (defvar |*CONSTANTS| (htable)) )

#? (defconstant <identifier> <val>)
;; Defines a symbolic constant named <identifier> and equal to <val>.
;; Argument <identifier> must be a string or a symbol.
;; Argument <val> must be a number or a string.
;; These constant values are not accessible as variables
;; but are accessible using the |@| macro-character.
(dm defconstant(fn var val)
  (when (symbolp var)
    (setq var (pname var)) )
  (when (not (stringp var))
    (error 'defconstant "Constant name is not a string or a symbol" var) )
  (when (not (or (numberp val) (stringp val)))
    (error 'defconstant "Constant value has illegal type" var) )
  `(progn (|*CONSTANTS| ',var ,val) ',var) )


#? @<identifier>
;; Macro-character expands to an expression that retrieves the
;; value of the symbolic constant named <identifier>.
;; The retrieval is performed at macro-expansion time.  
;; This is particularly useful for using symbolic constants 
;; in compiled code.
;;
;; Argument <identifier> must be a legal C identifier name.
;;
;; Compatibility notes:
;;.IP
;; If <identifier> has not been defined using <defconstant>,
;; the global value of the symbol named <identifier> will be used.
;;.IP
;; If the macro-character <|@|> cannot read a legal C identifier name, 
;; it reads a lisp expression and arranges for that expression to 
;; be evaluated during the macro expansion time.
;;.IP
;; Previous version of <|@|> used to process the expression at reading time.
;; This behavior causes problems when files are tokenized because the parsing
;; process depends on the execution of the previous expressions.


(dmc |@|
     (let ((expr (read-string "A-Za-z_$")))
       (cond
        ;; found a legal c identifier
        ((<> expr "")
         (setq expr (concat expr (read-string "A-Za-z0-9_$")))
         (when (not (index (skip-char "") " \t\n\r()[];"))
           (printf "*** Warning\007: unexpected character after @%s\n" expr) 
           (printf "*** Warning\007: insert a space to remove this warning\n") )
         (list (eval `(mlambda |_Args| 
                        (or (:|*CONSTANTS| ,expr) 
                            (apply scope (cons (named (downcase ,expr)) ())))))) )
        ;; found an expression
        (t
         (setq expr (read))
         (list (eval `(mlambda |_Args| ,expr))) ) ) ) )
