;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; class definitions and specification for a basic 
;; training/test database 

(libload "idx-int")
(libload "idx-sort")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(de permute-db-shuffle (map)
    ((-idx1- (-int-)) map)
    (let ((n (idx-dim map 0)))
      (-int- n)
      (for (i 0 (- n 2))
	   (let ((j (int (rand i (- n 0.01))))
		 (v (map i)))
	     (-int- j v)
	     (map i (map j))
	     (map j v))))
    ())

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#? * base-db
;; This is the base class used by the workbench/trainer 
;; objects as training and test databases.
;; real databases can be derived from this class.
;; and override just the get-input, get-label, get-info
;; and size methods. The other methods rarely need to be
;; overrided.
;;.P
(defclass base-db object 
  current)

#? (new base-db <inp> <lab>)
;; make a new base-db.
;; <inp> must be a 4D tensor of floats where
;; each 3D slice is a sample. <lab> must
;; be a 2D int-matrix where each slice is
;; a target vector (or something).
(defmethod base-db base-db ()
  (setq current 0))

;; These methods must be implemented by subclasses
;; size, get-input, get-label. The other default methods
;; will work fine in most cases.

#? (==> <base-db> get-input <n>)
;; returns <n>-th item
(defmethod base-db get-input (n) ())

#? (==> <base-db> get-label <n>)
;; returns the <n>-th label.
(defmethod base-db get-label (n) ()) 

#? (==> <base-db> get-info <n>)
;; returns extra information about <n>-th item
(defmethod base-db get-info (n) ())

#? (==> <base-db> size)
;; reutnrs the size of the database
(defmethod base-db size () 0)

;; these methods generally do not need to be re-implemented
;; for subclasses (unless those subclasses do wierd things).
#? (==> <base-db> tell <i>) 
;; set pointer to <i>-th item
(defmethod base-db tell () current)

#? (==> <base-db> next)
;; move pointer to next item
(defmethod base-db next ()
  (incr current)
  (when (>= current (==> this size)) (setq current 0))
  current)

#? (==> <base-db> seek <i>) 
;; set pointer to <i>-th item
(defmethod base-db seek (i) 
  (if (or (< i 0) (> i (1- (==> this size))))
      (error "database item number out of bound")
    (setq current i)))

#? (==> <base-db> get-input-current)
;; returns current item as a rawchar
(defmethod base-db get-input-current () (==> this get-input current))

#? (==> <base-db> get-label-current)
;; returns labels (ASCII codes) of <n>-th item
;; in an idx1 of ints.
(defmethod base-db get-label-current () (==> this get-label current))

#? (==> <base-db> get-info-current)
;; returns extra information about current item
(defmethod base-db get-info-current () (==> this get-info current))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; these methods are provided as a convenience but are
;; not required by the interface with the learning library

#? (==> <base-db> filter <func>)
;; return a matrix with the indices of all the patterns
;; for which (func <label>) returns non-nil
(defmethod base-db filter (func)
  (let* ((s (==> this size))
	 (m (int-matrix s))
	 (n 0))
    (for (i 0 (1- s))
	 (when (func (==> this get-label i)) 
	   (m n i) (incr n)))
    (narrow m 0 n 0)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; these methods are here for backward compatibility
;; but are not used by the learning library
(defmethod base-db get (n what)
  (selectq what
	   (input (==> this get-input n))
	   (desired (==> this get-label n))
	   (info (==> this get-info n))))

#? (==> <base-db> get-current <what>)
;; This is an obsolete method provided for
;; backward compatibility with ancient code.
;; get current item. if <what> is equal to 'input,
;; the input item is returned (most likely a rawchar),
;; if it is equal to 'desired, the label is returned
;; (most likely an ASCII code), if it is 'info
;; extra information on the item is returned
;; (format is not standardized).
(defmethod base-db get-current (what) (==> this get current what))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; these methods are obsolete and need updating.

(defmethod base-db display (n x y zoom &optional labelvec2str)
  (let* ((rc (==> this get-input n))
         (labelvec (==> this get-label n))
         (st (labelvec2str labelvec))
         (dims (rect-text 0 0 "000")))
    (graphics-batch
     (draw-text x (+ y lh) st)
     (rgb-draw-matrix x y rc zoom zoom)
     (list (+ x (* zoom (idx-dim rc 1)))
           (+ y 2 (* zoom (idx-dim rc 0)))))))

(defmethod base-db display-page (from zoom)
  (let* ((winw (xsize)) (winh (ysize))
         (lmargin 10) (xx lmargin) (yy 10)
         (goon t)
          (maxdeltay 0))
    (cls)
    (while goon
      (let (( (nx ny) (==> this display from xx yy zoom)))
        (setq maxdeltay (max maxdeltay (- ny yy)))
        (if (> (+ nx (- nx xx) 8) winw)
            (progn
              (setq xx lmargin)
              (when (> (+ yy (* 2 (- ny yy)) 8) winh) (setq goon ()))
              (setq yy (+ yy maxdeltay 4)))
          (setq xx (+ nx 4))))
      (incr from)
      (when (= from (==> this size)) (setq goon ()))
      )
    from))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#? * idx-db
;; a database where each pattern is an idx, and each
;; label is also an idx (of any type). All patterns
;; must have the same size.
;;.P
(defclass idx-db base-db
  inputs
  labels)

#? (new idx-db <inp> <lab>)
;; make a new idx-db.
;; <inp> must be a vector/matrix/tensor where
;; each slice is a sample. <lab> must
;; be a vector/matrix/tensor where each slice is
;; a target vector (or something).
(defmethod idx-db idx-db (inp lab)
  (setq current 0)
  (when (<> (idx-dim inp 0) (idx-dim lab 0)) 
    (error "input matrix and label matrix have different sizes"))
  (setq inputs inp)
  (setq labels lab) ())

#? (==> <idx-db> size)
;; reutnrs the size of the database
(defmethod idx-db size () (idx-dim inputs 0))

#? (==> <idx-db> get-input <n>)
;; returns <n>-th item
(defmethod idx-db get-input (n) (idx-copy (select inputs 0 n)))


#? (==> <idx-db> get-label <n>)
;; returns labels (ASCII codes) of <n>-th item
;; in an idx1 of ints.
(defmethod idx-db get-label (n) (idx-copy (select labels 0 n)))

(defmethod idx-db get-info (n) ())

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#? * multi-db
;; A db formed by the concatenation of multiple dbs.
;; The dbs must understand the methods get-input, get-label,
;; get-info, and size.
(defclass multi-db base-db
  base-array
  size-matrix
  size)

#? (new multi-db <base-list>)
;; make a new base-db compatible object by concatenating
;; all the base-db compatible objects in list <base-list>.
(defmethod multi-db multi-db (base-list)
  (let* ((n-base (length base-list)))
    (setq base-array (array n-base))
    (base-array () base-list)
    (setq size-matrix (int-matrix n-base)))
  (==> this make-size-table)
  (setq current 0))

(defmethod multi-db make-size-table ()
  (let ((p 0))
    (for (i 0 (1- (idx-dim base-array 0)))
      (size-matrix i p)
      (incr p (==> (base-array i) size)))
    (setq size p)))

(defmethod multi-db size () size)

(defmethod multi-db get-input (i)
  (let ((n (idx-i1bsearch size-matrix i)))
    (==> (base-array n) get-input (- i (size-matrix n)))))

(defmethod multi-db get-label (i)
  (let ((n (idx-i1bsearch size-matrix i)))
    (==> (base-array n) get-label (- i (size-matrix n)))))

(defmethod multi-db get-info (i)
  (let ((n (idx-i1bsearch size-matrix i)))
    (==> (base-array n) get-info (- i (size-matrix n)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#? * narrow-db
;; a db constructed by taking patterns in
;; an existing db whose indices are within a given range
;; that what is passed is a db
(defclass narrow-db base-db
  base
  offset
  size)

#? (new narrow-db <base> <size> <offset>)
;; make a new base-db compatible object by taking
;; a range of items from the db passed as argument
(defmethod narrow-db narrow-db (b siz off)
  ;; ((-obj- (base-db)) b)
  ;; ((-int-) siz off)
  (when (> (+ siz off) (==> b size)) (error "illegal range for narrow-db"))
  (when (or (< off 0) (< siz 0)) 
    (error "offset and size of narrow-db must be positive"))
  (setq base b)
  (setq offset off)
  (setq size siz)
  (setq current 0))

(defmethod narrow-db size () size)

(defmethod narrow-db get-input (n)
  ;; ((-int-) n)
  (==> base get-input (+ offset n)))

(defmethod narrow-db get-label (n)
  ;; ((-int-) n)
  (==> base get-label (+ offset n)))

(defmethod narrow-db get-info (n)
  (==> base get-info (+ offset n)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#? * permute-db
;; a db built by permuting the samples of an existing db
;; no actual movement of data is performed, the samples
;; are simply accessed through apermutation table.
(defclass permute-db base-db
  base
  map)

#? (new permute-db <base-db>)
;; create a new permute-db. The permutation
;; map is initially set to the indentity.
;; the shuffle method performes a random shuffling.
(defmethod permute-db permute-db (b)
  (setq base b)
  (setq map (int-matrix (==> base size)))
  (idx-i1fill-with-index map)
  (setq current 0)
  ())

(defmethod permute-db size () (idx-dim map 0))

(defmethod permute-db get-input (n)
  (==> base get-input (map n)))

(defmethod permute-db get-label (n)
  (==> base get-label (map n)))

(defmethod permute-db get-info (n)
  (==> base get-info (map n)))

#? (==> permute-db shuffle)
;; randomly shuffles the samples of the db.
(defmethod permute-db shuffle ()
  (permute-db-shuffle map))

#? (==> permute-db set-map (m)
;; sets the permutation map to <m>. <m> must be
;; a vector of ints. The size of the db will be
;; the dimension of <m>, and the i-th element of
;; the db will be the (m i)-th element of
;; the base db.
(defmethod permute-db set-map (m) 
  (setq map m)
  (setq current 0))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(dhc-make ()
	  ;; (base-db base-db seek tell size get-input get-label)
	  permute-db-shuffle)
