;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; LUSH Lisp Universal Shell
;;;   Copyright (C) 2002 Leon Bottou, Yann Le Cun, AT&T Corp, NECI.
;;; Includes parts of TL3:
;;;   Copyright (C) 1987-1999 Leon Bottou and Neuristique.
;;; Includes selected parts of SN3.2:
;;;   Copyright (C) 1991-2001 AT&T Corp.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 2 of the License, or
;;; (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with this program; if not, write to the Free Software
;;; Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111, USA
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; $Id: glut.lsh,v 1.10 2002-08-13 02:18:39 leonb Exp $
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(libload "dh-compile")
(libload "libc/constants")

(libload "opengl-config")
(libload "opengl")
(libload "openglu")


#? *** Glut.
;; Provides an interface to opengl using the glut library.
;; See <http://www.opengl.org/developers/documentation/glut/spec3/spec3.html>
;; for a documentation of Glut.
;;
;; There is no need to call <glutMainLoop> ever.  This file uses the 
;; Lush polling facilities in order to organize the glut event processing.  Glut
;; does not implement an event model and therefore does not insert events into
;; the Lush event queue.  The callback functions are directly called by Glut
;; when Lush executes the polling function.


;; ----------------------------------------
;; GLUT3 API CONSTANTS
;; ----------------------------------------

(progn
  ;; Extracted from glut-3.7 by cparse
  (defconstant "GLUT_API_VERSION" 3)
  (defconstant "GLUT_XLIB_IMPLEMENTATION" 13)
  (defconstant "GLUT_RGB" 0)
  (defconstant "GLUT_RGBA" 0)
  (defconstant "GLUT_INDEX" 1)
  (defconstant "GLUT_SINGLE" 0)
  (defconstant "GLUT_DOUBLE" 2)
  (defconstant "GLUT_ACCUM" 4)
  (defconstant "GLUT_ALPHA" 8)
  (defconstant "GLUT_DEPTH" 16)
  (defconstant "GLUT_STENCIL" 32)
  (defconstant "GLUT_MULTISAMPLE" 128)
  (defconstant "GLUT_STEREO" 256)
  (defconstant "GLUT_LUMINANCE" 512)
  (defconstant "GLUT_LEFT_BUTTON" 0)
  (defconstant "GLUT_MIDDLE_BUTTON" 1)
  (defconstant "GLUT_RIGHT_BUTTON" 2)
  (defconstant "GLUT_DOWN" 0)
  (defconstant "GLUT_UP" 1)
  (defconstant "GLUT_KEY_F1" 1)
  (defconstant "GLUT_KEY_F2" 2)
  (defconstant "GLUT_KEY_F3" 3)
  (defconstant "GLUT_KEY_F4" 4)
  (defconstant "GLUT_KEY_F5" 5)
  (defconstant "GLUT_KEY_F6" 6)
  (defconstant "GLUT_KEY_F7" 7)
  (defconstant "GLUT_KEY_F8" 8)
  (defconstant "GLUT_KEY_F9" 9)
  (defconstant "GLUT_KEY_F10" 10)
  (defconstant "GLUT_KEY_F11" 11)
  (defconstant "GLUT_KEY_F12" 12)
  (defconstant "GLUT_KEY_LEFT" 100)
  (defconstant "GLUT_KEY_UP" 101)
  (defconstant "GLUT_KEY_RIGHT" 102)
  (defconstant "GLUT_KEY_DOWN" 103)
  (defconstant "GLUT_KEY_PAGE_UP" 104)
  (defconstant "GLUT_KEY_PAGE_DOWN" 105)
  (defconstant "GLUT_KEY_HOME" 106)
  (defconstant "GLUT_KEY_END" 107)
  (defconstant "GLUT_KEY_INSERT" 108)
  (defconstant "GLUT_LEFT" 0)
  (defconstant "GLUT_ENTERED" 1)
  (defconstant "GLUT_MENU_NOT_IN_USE" 0)
  (defconstant "GLUT_MENU_IN_USE" 1)
  (defconstant "GLUT_NOT_VISIBLE" 0)
  (defconstant "GLUT_VISIBLE" 1)
  (defconstant "GLUT_HIDDEN" 0)
  (defconstant "GLUT_FULLY_RETAINED" 1)
  (defconstant "GLUT_PARTIALLY_RETAINED" 2)
  (defconstant "GLUT_FULLY_COVERED" 3)
  (defconstant "GLUT_RED" 0)
  (defconstant "GLUT_GREEN" 1)
  (defconstant "GLUT_BLUE" 2)
  (defconstant "GLUT_NORMAL" 0)
  (defconstant "GLUT_OVERLAY" 1)
  (defconstant "GLUT_WINDOW_X" 100)
  (defconstant "GLUT_WINDOW_Y" 101)
  (defconstant "GLUT_WINDOW_WIDTH" 102)
  (defconstant "GLUT_WINDOW_HEIGHT" 103)
  (defconstant "GLUT_WINDOW_BUFFER_SIZE" 104)
  (defconstant "GLUT_WINDOW_STENCIL_SIZE" 105)
  (defconstant "GLUT_WINDOW_DEPTH_SIZE" 106)
  (defconstant "GLUT_WINDOW_RED_SIZE" 107)
  (defconstant "GLUT_WINDOW_GREEN_SIZE" 108)
  (defconstant "GLUT_WINDOW_BLUE_SIZE" 109)
  (defconstant "GLUT_WINDOW_ALPHA_SIZE" 110)
  (defconstant "GLUT_WINDOW_ACCUM_RED_SIZE" 111)
  (defconstant "GLUT_WINDOW_ACCUM_GREEN_SIZE" 112)
  (defconstant "GLUT_WINDOW_ACCUM_BLUE_SIZE" 113)
  (defconstant "GLUT_WINDOW_ACCUM_ALPHA_SIZE" 114)
  (defconstant "GLUT_WINDOW_DOUBLEBUFFER" 115)
  (defconstant "GLUT_WINDOW_RGBA" 116)
  (defconstant "GLUT_WINDOW_PARENT" 117)
  (defconstant "GLUT_WINDOW_NUM_CHILDREN" 118)
  (defconstant "GLUT_WINDOW_COLORMAP_SIZE" 119)
  (defconstant "GLUT_WINDOW_NUM_SAMPLES" 120)
  (defconstant "GLUT_WINDOW_STEREO" 121)
  (defconstant "GLUT_WINDOW_CURSOR" 122)
  (defconstant "GLUT_SCREEN_WIDTH" 200)
  (defconstant "GLUT_SCREEN_HEIGHT" 201)
  (defconstant "GLUT_SCREEN_WIDTH_MM" 202)
  (defconstant "GLUT_SCREEN_HEIGHT_MM" 203)
  (defconstant "GLUT_MENU_NUM_ITEMS" 300)
  (defconstant "GLUT_DISPLAY_MODE_POSSIBLE" 400)
  (defconstant "GLUT_INIT_WINDOW_X" 500)
  (defconstant "GLUT_INIT_WINDOW_Y" 501)
  (defconstant "GLUT_INIT_WINDOW_WIDTH" 502)
  (defconstant "GLUT_INIT_WINDOW_HEIGHT" 503)
  (defconstant "GLUT_INIT_DISPLAY_MODE" 504)
  (defconstant "GLUT_ELAPSED_TIME" 700)
  (defconstant "GLUT_WINDOW_FORMAT_ID" 123)
  (defconstant "GLUT_HAS_KEYBOARD" 600)
  (defconstant "GLUT_HAS_MOUSE" 601)
  (defconstant "GLUT_HAS_SPACEBALL" 602)
  (defconstant "GLUT_HAS_DIAL_AND_BUTTON_BOX" 603)
  (defconstant "GLUT_HAS_TABLET" 604)
  (defconstant "GLUT_NUM_MOUSE_BUTTONS" 605)
  (defconstant "GLUT_NUM_SPACEBALL_BUTTONS" 606)
  (defconstant "GLUT_NUM_BUTTON_BOX_BUTTONS" 607)
  (defconstant "GLUT_NUM_DIALS" 608)
  (defconstant "GLUT_NUM_TABLET_BUTTONS" 609)
  (defconstant "GLUT_DEVICE_IGNORE_KEY_REPEAT" 610)
  (defconstant "GLUT_DEVICE_KEY_REPEAT" 611)
  (defconstant "GLUT_HAS_JOYSTICK" 612)
  (defconstant "GLUT_OWNS_JOYSTICK" 613)
  (defconstant "GLUT_JOYSTICK_BUTTONS" 614)
  (defconstant "GLUT_JOYSTICK_AXES" 615)
  (defconstant "GLUT_JOYSTICK_POLL_RATE" 616)
  (defconstant "GLUT_OVERLAY_POSSIBLE" 800)
  (defconstant "GLUT_LAYER_IN_USE" 801)
  (defconstant "GLUT_HAS_OVERLAY" 802)
  (defconstant "GLUT_TRANSPARENT_INDEX" 803)
  (defconstant "GLUT_NORMAL_DAMAGED" 804)
  (defconstant "GLUT_OVERLAY_DAMAGED" 805)
  (defconstant "GLUT_VIDEO_RESIZE_POSSIBLE" 900)
  (defconstant "GLUT_VIDEO_RESIZE_IN_USE" 901)
  (defconstant "GLUT_VIDEO_RESIZE_X_DELTA" 902)
  (defconstant "GLUT_VIDEO_RESIZE_Y_DELTA" 903)
  (defconstant "GLUT_VIDEO_RESIZE_WIDTH_DELTA" 904)
  (defconstant "GLUT_VIDEO_RESIZE_HEIGHT_DELTA" 905)
  (defconstant "GLUT_VIDEO_RESIZE_X" 906)
  (defconstant "GLUT_VIDEO_RESIZE_Y" 907)
  (defconstant "GLUT_VIDEO_RESIZE_WIDTH" 908)
  (defconstant "GLUT_VIDEO_RESIZE_HEIGHT" 909)
  (defconstant "GLUT_ACTIVE_SHIFT" 1)
  (defconstant "GLUT_ACTIVE_CTRL" 2)
  (defconstant "GLUT_ACTIVE_ALT" 4)
  (defconstant "GLUT_CURSOR_RIGHT_ARROW" 0)
  (defconstant "GLUT_CURSOR_LEFT_ARROW" 1)
  (defconstant "GLUT_CURSOR_INFO" 2)
  (defconstant "GLUT_CURSOR_DESTROY" 3)
  (defconstant "GLUT_CURSOR_HELP" 4)
  (defconstant "GLUT_CURSOR_CYCLE" 5)
  (defconstant "GLUT_CURSOR_SPRAY" 6)
  (defconstant "GLUT_CURSOR_WAIT" 7)
  (defconstant "GLUT_CURSOR_TEXT" 8)
  (defconstant "GLUT_CURSOR_CROSSHAIR" 9)
  (defconstant "GLUT_CURSOR_UP_DOWN" 10)
  (defconstant "GLUT_CURSOR_LEFT_RIGHT" 11)
  (defconstant "GLUT_CURSOR_TOP_SIDE" 12)
  (defconstant "GLUT_CURSOR_BOTTOM_SIDE" 13)
  (defconstant "GLUT_CURSOR_LEFT_SIDE" 14)
  (defconstant "GLUT_CURSOR_RIGHT_SIDE" 15)
  (defconstant "GLUT_CURSOR_TOP_LEFT_CORNER" 16)
  (defconstant "GLUT_CURSOR_TOP_RIGHT_CORNER" 17)
  (defconstant "GLUT_CURSOR_BOTTOM_RIGHT_CORNER" 18)
  (defconstant "GLUT_CURSOR_BOTTOM_LEFT_CORNER" 19)
  (defconstant "GLUT_CURSOR_INHERIT" 100)
  (defconstant "GLUT_CURSOR_NONE" 101)
  (defconstant "GLUT_CURSOR_FULL_CROSSHAIR" 102)
  (defconstant "GLUT_KEY_REPEAT_OFF" 0)
  (defconstant "GLUT_KEY_REPEAT_ON" 1)
  (defconstant "GLUT_KEY_REPEAT_DEFAULT" 2)
  (defconstant "GLUT_JOYSTICK_BUTTON_A" 1)
  (defconstant "GLUT_JOYSTICK_BUTTON_B" 2)
  (defconstant "GLUT_JOYSTICK_BUTTON_C" 4)
  (defconstant "GLUT_JOYSTICK_BUTTON_D" 8)
  (defconstant "GLUT_GAME_MODE_ACTIVE" 0)
  (defconstant "GLUT_GAME_MODE_POSSIBLE" 1)
  (defconstant "GLUT_GAME_MODE_WIDTH" 2)
  (defconstant "GLUT_GAME_MODE_HEIGHT" 3)
  (defconstant "GLUT_GAME_MODE_PIXEL_DEPTH" 4)
  (defconstant "GLUT_GAME_MODE_REFRESH_RATE" 5)
  (defconstant "GLUT_GAME_MODE_DISPLAY_CHANGED" 6)
  t )

(progn
  ;; Hack for bitmap fonts
  (defconstant "GLUT_BITMAP_9_BY_15" 0)		;(&glutBitmap9By15)
  (defconstant "GLUT_BITMAP_8_BY_13" 1)		;(&glutBitmap8By13)
  (defconstant "GLUT_BITMAP_TIMES_ROMAN_10" 2)	;(&glutBitmapTimesRoman10)
  (defconstant "GLUT_BITMAP_TIMES_ROMAN_24" 3)	;(&glutBitmapTimesRoman24)
  (defconstant "GLUT_BITMAP_HELVETICA_10" 4)	;(&glutBitmapHelvetica10)
  (defconstant "GLUT_BITMAP_HELVETICA_12" 5)	;(&glutBitmapHelvetica12)
  (defconstant "GLUT_BITMAP_HELVETICA_18" 6)	;(&glutBitmapHelvetica18)




;; ----------------------------------------
;; INTERNAL FUNCTIONS
;; ----------------------------------------


(de glutint-poll()
  (cpheader "#include <X11/Xlib.h>")
  (cheader "#include <GL/glut.h>")
  (cheader "#include <sys/time.h>")
  (cheader "jmp_buf glut_event_jmp;")
  (cheader "void glut_idle_jmp(void) { longjmp(glut_event_jmp, 1); }")
  ;; This function is quite dependent on the internals GLUT-3.7. 
  ;; But this is mostly for implementing timers.
  (cheader "extern Display *__glutDisplay;")
  (cheader "extern int __glutWindowListSize;")
  (cheader "extern void *__glutWindowWorkList;")
  (cheader "extern struct{void*next;struct timeval tv;}*__glutTimerList;")
  ;; Go
  (let ((ms (* 24 3600 1000)))
    ((-int-) ms)
    #{
       if (__glutDisplay && __glutWindowListSize) {
         do {
           do {
             if (! setjmp(glut_event_jmp) ) {
               glutIdleFunc(glut_idle_jmp);
               glutMainLoop();
               glutIdleFunc(0);
             } 
           } while (__glutWindowWorkList);
           if (__glutTimerList) {
             struct timeval tv;
             gettimeofday(&tv, 0);
             $ms = ((int)__glutTimerList->tv.tv_sec - (int)tv.tv_sec - 1) * 1000 
                 + (1000000 + (int)__glutTimerList->tv.tv_usec - (int)tv.tv_usec)/1000;
           }
         } while ($ms < 0);
       }
     #}
    ms ) )

(de glutint-init()
  (let ((flag ()))
    ((-bool-) flag)
    (cheader "static at *glhandlers = 0;")
    (cheader "static at *glhandle = 0;")
    #{
       if (! __glutDisplay) {
         char *argv[2];
         int argc = 1;
         argv[0] = "lush";
         argv[1] = 0;
         glutInit(&argc, argv);
         register_poll_functions( C_glutint_poll, 0, 0, 0,
                                  ConnectionNumber(__glutDisplay) );
         $flag = 1;
       }
       if (! glhandlers) {
         glhandlers = var_define("*GLHANDLERS");
         glhandle = var_define("glhandle");
       }
    #}
   flag ) )

(de glutint-check()
  (if (not (gptr #{ __glutDisplay #}))
      (error "Glut is not initialized") )
  () )

(de glutint-font(glutfont)
  ((-int-) glutfont)
  (let ((fptr (to-gptr ())))
    #{ switch($glutfont) {
        case 0: $fptr = (&glutBitmap9By15); break;
        case 1: $fptr = (&glutBitmap8By13); break;
        case 2: $fptr = (&glutBitmapTimesRoman10); break;
        case 3: $fptr = (&glutBitmapTimesRoman24); break;
        case 4: $fptr = (&glutBitmapHelvetica10); break;
        case 5: $fptr = (&glutBitmapHelvetica12); break;
        case 6: $fptr = (&glutBitmapHelvetica18); break;
        default: run_time_error("Unknown glut font"); break;
       } #}
    fptr ) )



;; ----------------------------------------
;; GLUT API FUNCTIONS
;; ----------------------------------------


#? ** Glut3 API Functions
;; See <http://www.opengl.org/developers/documentation/glut/spec3/spec3.html>
;; for the documentation of the following functions.

(de glut-init-display-mode(mode)
  ((-int-) mode)
  #{ glutInitDisplayMode($mode) #}
  t )

(de glut-init-window-size(w h)
  ((-int-) w h)
  #{ glutInitWindowSize($w, $h) #}
  t )

(de glut-init-window-position(x y)
  ((-int-) x y)
  #{ glutInitWindowPosition($x, $y) #}
  t )

(de glut-main-loop()
  (error "Calling glutMainLoop() from Lush is forbidden")
  () )

(de glut-create-window(name)
  ((-str-) name)
  (glutint-check)
  (cheader "static void glclear(void) { glClear(GL_COLOR_BUFFER_BIT); }")
  (let ((wid (to-int #{ glutCreateWindow($name->data) #})))
    #{ glutDisplayFunc(glclear); #}
    wid ) ) )

(de glut-create-sub-window(win x y w h)
  ((-int-) win x y w h)
  (glutint-check)
  (let ((wid (to-int #{ glutCreateSubWindow($win, $x, $y, $w, $h) #})))
    #{ glutDisplayFunc(glclear); #}
    wid ) ) )

(de glut-set-window(win)
  ((-int-) win)
  #{ glutSetWindow($win); #}
  () )

(de glut-get-window()
  (to-int #{ glutGetWindow() #}) )

(de glut-destroy-window(win)
  ((-int-) win)
  #{ glutDestroyWindow($win); #}
  () )

(de glut-post-redisplay()
  #{ glutPostRedisplay(); #}
  () )

(de glut-swap-buffers()
  #{ glutSwapBuffers(); #}
  () )

(de glut-set-window-title(title)
  ((-str-) title)
  #{ glutSetWindowTitle($title->data); #}
  () )

(de glut-set-icon-title(title)
  ((-str-) title)
  #{ glutSetIconTitle($title->data); #}
  () )

(de glut-position-window(x y)
  ((-int-) x y)
  #{ glutPositionWindow($x, $y); #}
  () )

(de glut-reshape-window(w h)
  ((-int-) w h)
  #{ glutReshapeWindow($w, $h); #}
  () )

(de glut-pop-window()
  #{ glutPopWindow(); #}
  () )

(de glut-push-window()
  #{ glutPushWindow(); #}
  () )

(de glut-iconify-window()
  #{ glutIconifyWindow(); #}
  () )

(de glut-show-window()
  #{ glutShowWindow(); #}
  () )

(de glut-hide-window()
  #{ glutHideWindow(); #}
  () )

(de glut-full-screen()
  #{ glutFullScreen(); #}
  () )

(de glut-set-cursor(cursor)
  ((-int-) cursor)
  #{ glutSetCursor($cursor); #}
  () )

(de glut-establish-overlay()
  #{ glutEstablishOverlay(); #}
  () )

(de glut-remove-overlay()
  #{ glutRemoveOverlay(); #}
  () )

(de glut-use-layer(layer)
  ((-int-) layer)
  #{ glutUseLayer($layer); #}
  () )

(de glut-post-overlay-redisplay()
  #{ glutPostOverlayRedisplay(); #}
  () )

(de glut-show-overlay()
  #{ glutRemoveOverlay(); #}
  () )

(de glut-hide-overlay()
  #{ glutRemoveOverlay(); #}
  () )

(de glut-create-menu(func)
  ((-gptr-) func)
  (to-int #{ glutCreateMenu($func) #}) )

(de glut-destroy-menu(menu)
  ((-int-) menu)
  #{ glutDestroyMenu($menu); #}
  () )

(de glut-get-menu()
  (to-int #{ glutGetMenu() #}) )

(de glut-set-menu(menu)
  ((-int-) menu)
  #{ glutSetMenu($menu); #}
  () )

(de glut-add-menu-entry(label value)
  ((-str-) label)
  ((-int-) value)
  #{ glutAddMenuEntry($label->data, $value); #}
  () )

(de glut-add-sub-menu(label submenu)
  ((-str-) label)
  ((-int-) submenu)
  #{ glutAddSubMenu($label->data, $submenu); #}
  () )

(de glut-change-to-menu-entry(entry label value)
  ((-int-) entry)
  ((-str-) label)
  ((-int-) value)
  #{ glutChangeToMenuEntry($entry, $label->data, $value); #}
  () )

(de glut-change-to-sub-menu(entry label submenu)
  ((-int-) entry)
  ((-str-) label)
  ((-int-) submenu)
  #{ glutChangeToSubMenu($entry, $label->data, $submenu); #}
  () )

(de glut-remove-menu-item(item)
  ((-int-) item)
  #{ glutRemoveMenuItem($item); #}
  () )

(de glut-attach-menu(button)
  ((-int-) button)
  #{ glutAttachMenu($button); #}
  () )

(de glut-detach-menu(button)
  ((-int-) button)
  #{ glutDetachMenu($button); #}
  () )

(de glut-display-func(func)
  ((-gptr-) func)
  #{ glutDisplayFunc($func); #}
  () )

(de glut-reshape-func(func)
  ((-gptr-) func)
  #{ glutReshapeFunc($func); #}
  () )

(de glut-keyboard-func(func)
  ((-gptr-) func)
  #{ glutKeyboardFunc($func); #}
  () )

(de glut-mouse-func(func)
  ((-gptr-) func)
  #{ glutMouseFunc($func); #}
  () )

(de glut-motion-func(func)
  ((-gptr-) func)
  #{ glutMotionFunc($func); #}
  () )

(de glut-passive-motion-func(func)
  ((-gptr-) func)
  #{ glutPassiveMotionFunc($func); #}
  () )

(de glut-entry-func(func)
  ((-gptr-) func)
  #{ glutEntryFunc($func); #}
  () )

(de glut-visibility-func(func)
  ((-gptr-) func)
  #{ glutVisibilityFunc($func); #}
  () )

(de glut-idle-func(func)
  ((-gptr-) func)
  (error "Calling glutIdleFunc() from Lush is forbidden")
  func )

(de glut-timer-func(millis func value)
  ((-int-) millis value)
  ((-gptr-) func)
  #{ glutTimerFunc($millis, $func, $value); #}
  () )

(de glut-menu-state-func(func)
  ((-gptr-) func)
  #{ glutMenuStateFunc($func); #}
  () )

(de glut-special-func(func)
  ((-gptr-) func)
  #{ glutSpecialFunc($func); #}
  () )

(de glut-spaceball-motion-func(func)
  ((-gptr-) func)
  #{ glutSpaceballMotionFunc($func); #}
  () )

(de glut-spaceball-rotate-func(func)
  ((-gptr-) func)
  #{ glutSpaceballRotateFunc($func); #}
  () )

(de glut-spaceball-button-func(func)
  ((-gptr-) func)
  #{ glutSpaceballButtonFunc($func); #}
  () )

(de glut-button-box-func(func)
  ((-gptr-) func)
  #{ glutButtonBoxFunc($func); #}
  () )

(de glut-dials-func(func)
  ((-gptr-) func)
  #{ glutDialsFunc($func); #}
  () )

(de glut-tablet-motion-func(func)
  ((-gptr-) func)
  #{ glutTabletMotionFunc($func); #}
  () )

(de glut-tablet-button-func(func)
  ((-gptr-) func)
  #{ glutTabletButtonFunc($func); #}
  () )

(de glut-menu-status-func(func)
  ((-gptr-) func)
  #{ glutMenuStatusFunc($func); #}
  () )

(de glut-overlay-display-func(func)
  ((-gptr-) func)
  #{ glutOverlayDisplayFunc($func); #}
  () )

(de glut-set-color(cell r g b)
  ((-int-) cell)
  ((-flt-) r g b)
  #{  glutSetColor($cell, $r, $g, $b); #}
  () )

(de glut-get-color(cell comp)
  ((-int-) cell comp)
  (to-flt #{ glutGetColor($cell, $comp) #} ) )

(de glut-copy-colormap(win)
  ((-int-) win)
  #{ glutCopyColormap($win); #}
  () )

(de glut-get(type)
  ((-int-) type)
  (to-int #{ glutGet($type) #} ) )

(de glut-device-get(type)
  ((-int-) type)
  (to-int #{ glutDeviceGet($type) #} ) )

(de glut-layer-get(type)
  ((-int-) type)
  (to-int #{ glutLayerGet($type) #} ) )

(de glut-extension-supported(name)
  ((-str-) name)
  (to-int #{ glutExtensionSupported($name->data) #} ) )

(de glut-get-modifiers()
  (to-int #{ glutGetModifiers() #}) )

(de glut-bitmap-character(font char)
  ((-int-) font char)
  #{ glutBitmapCharacter( $(glutint_font font), $char ); #}
  () )

(de glut-bitmap-width(font char)
  ((-int-) font char)
  (to-int #{ glutBitmapWidth( $(glutint_font font), $char ) #}) )

(de glut-stroke-character(font char)
  ((-int-) font char)
  #{ glutStrokeCharacter( $(glutint_font font), $char ); #}
  () )

(de glut-stroke-width(font char)
  ((-int-) font char)
  (to-int #{ glutStrokeWidth( $(glutint_font font), $char ) #}) )

(de glut-wire-sphere(radius slices stacks)
  ((-real-) radius)
  ((-int-) slices stacks)
  #{ glutWireSphere($radius, $slices, $stacks); #}
  () )

(de glut-solid-sphere(radius slices stacks)
  ((-real-) radius)
  ((-int-) slices stacks)
  #{ glutSolidSphere($radius, $slices, $stacks); #}
  () )

(de glut-wire-cone(base height slices stacks)
  ((-real-) base height)
  ((-int-) slices stacks)
  #{ glutWireCone($base, $height, $slices, $stacks); #}
  () )

(de glut-solid-cone(base height slices stacks)
  ((-real-) base height)
  ((-int-) slices stacks)
  #{ glutSolidCone($base, $height, $slices, $stacks); #}
  () )

(de glut-wire-cube(size)
  ((-real-) size)
  #{ glutWireCube($size); #}
  () )

(de glut-solid-cube(size)
  ((-real-) size)
  #{ glutSolidCube($size); #}
  () )

(de glut-wire-torus(innerRadius outerRadius sides ringssize)
  ((-real-) innerRadius outerRadius)
  ((-int-) sides ringssize)
  #{ glutWireTorus($innerRadius, $outerRadius, $sides, $ringssize); #}
  () )

(de glut-solid-torus(innerRadius outerRadius sides ringssize)
  ((-real-) innerRadius outerRadius)
  ((-int-) sides ringssize)
  #{ glutSolidTorus($innerRadius, $outerRadius, $sides, $ringssize); #}
  () )

(de glut-wire-teapot(size)
  ((-real-) size)
  #{ glutWireTeapot($size); #}
  () )

(de glut-solid-teapot(size)
  ((-real-) size)
  #{ glutSolidTeapot($size); #}
  () )

(de glut-wire-dodecahedron()
  #{ glutWireDodecahedron(); #}
  () )

(de glut-solid-dodecahedron()
  #{ glutSolidDodecahedron(); #}
  () )

(de glut-wire-octahedron()
  #{ glutWireOctahedron(); #}
  () )

(de glut-solid-octahedron()
  #{ glutSolidOctahedron(); #}
  () )

(de glut-wire-tetrahedron()
  #{ glutWireTetrahedron(); #}
  () )

(de glut-solid-tetrahedron()
  #{ glutSolidTetrahedron(); #}
  () )

(de glut-wire-icosahedron()
  #{ glutWireIcosahedron(); #}
  () )

(de glut-solid-icosahedron()
  #{ glutSolidIcosahedron(); #}
  () )



#? (glut-init-display-mode <mode>)
#? (glut-init-window-size <w> <h>)
#? (glut-init-window-position <x> <y>)
#? (glut-create-window <name>)
#? (glut-create-sub-window <win> <x> <y> <w> <h>)
#? (glut-set-window <win>)
#? (glut-get-window)
#? (glut-destroy-window <win>)
#? (glut-post-redisplay)
#? (glut-swap-buffers)
#? (glut-set-window-title <title>)
#? (glut-set-icon-title <title>)
#? (glut-position-window <x> <y>)
#? (glut-reshape-window <w> <h>)
#? (glut-pop-window)
#? (glut-push-window)
#? (glut-iconify-window)
#? (glut-show-window)
#? (glut-hide-window)
#? (glut-full-screen)
#? (glut-set-cursor cursor)
#? (glut-establish-overlay)
#? (glut-remove-overlay)
#? (glut-use-layer layer)
#? (glut-post-overlay-redisplay)
#? (glut-show-overlay)
#? (glut-hide-overlay)
#? (glut-create-menu <func>)
#? (glut-destroy-menu <menu>)
#? (glut-get-menu)
#? (glut-set-menu <menu>)
#? (glut-add-menu-entry <label> <value>)
#? (glut-add-sub-menu <label> <submenu>)
#? (glut-change-to-menu-entry <entry> <label> <value>)
#? (glut-change-to-sub-menu <entry> <label> <submenu>)
#? (glut-remove-menu-item <item>)
#? (glut-attach-menu <button>)
#? (glut-detach-menu <button>)
#? (glut-display-func <func>)
#? (glut-reshape-func <func>)
#? (glut-keyboard-func <func>)
#? (glut-mouse-func <func>)
#? (glut-motion-func <func>)
#? (glut-passive-motion-func <func>)
#? (glut-entry-func <func>)
#? (glut-visibility-func <func>)
#? (glut-timer-func <millis> <func> <value>)
#? (glut-menu-state-func <func>)
#? (glut-special-func <func>)
#? (glut-spaceball-motion-func <func>)
#? (glut-spaceball-rotate-func <func>)
#? (glut-spaceball-button-func <func>)
#? (glut-button-box-func <func>)
#? (glut-dials-func <func>)
#? (glut-tablet-motion-func <func>)
#? (glut-tablet-button-func <func>)
#? (glut-menu-status-func <func>)
#? (glut-overlay-display-func <func>)
#? (glut-set-color <cell> <r> <g> <b>)
#? (glut-get-color <cell> <comp>)
#? (glut-copy-colormap <win>)
#? (glut-get <type>)
#? (glut-device-get <type>)
#? (glut-layer-get <type>)
#? (glut-extension-supported <name>)
#? (glut-get-modifiers)
#? (glut-bitmap-character <font> <char>)
#? (glut-bitmap-width <font> <char>)
#? (glut-stroke-character <font> <char>)
#? (glut-stroke-width <font> <char>)
#? (glut-wire-sphere <radius> <slices> <stacks>)
#? (glut-solid-sphere <radius> <slices> <stacks>)
#? (glut-wire-cone <base> <height> <slices> <stacks>)
#? (glut-solid-cone <base> <height> <slices> <stacks>)
#? (glut-wire-cube <size>)
#? (glut-solid-cube <size>)
#? (glut-wire-torus <innerRadius> <outerRadius> <sides> <ringssize>)
#? (glut-solid-torus <innerRadius> <outerRadius> <sides> <ringssize>)
#? (glut-wire-teapot <size>)
#? (glut-solid-teapot <size>)
#? (glut-wire-dodecahedron)
#? (glut-solid-dodecahedron)
#? (glut-wire-octahedron)
#? (glut-solid-octahedron)
#? (glut-wire-tetrahedron)
#? (glut-solid-tetrahedron)
#? (glut-wire-icosahedron)
#? (glut-solid-icosahedron)




;; ----------------------------------------
;; GLUT_WINDOW
;; ----------------------------------------


#? ** Glut3 API Functions
;; The following class provides an easy way
;; to create glut windows and handle glut callbacks.

(when (not (is-of-class |*GLHANDLERS| |HTABLE|))
  (setq |*GLHANDLERS| (htable)) )

(de glutint-glhandle(name lexp)
  ((-gptr- "const char*") name)
  ((-gptr- "at*") lexp)
  (let ((wid (glut-get-window)))
    ;; This is mostly interpreter code...
    #{{
       at *m = var_get(glhandlers);
       if (EXTERNP(m, &htable_class)) {
         at *w = NEW_NUMBER($wid);
         at *h = htable_get(m, w);
         if (h && (h->flags & C_EXTERN)) {
           UNLOCK(m);
           m = checksend(h->Class, glhandle);
           if (m) {
             $lexp = cons(named((char*)$name),$lexp);
             argeval_ptr = eval_nothing;
             UNLOCK(w);
             w = send_message(NIL,h,glhandle,$lexp);
             argeval_ptr = eval_std;
           }
         }
         UNLOCK(h);
         UNLOCK(w);
       }
       UNLOCK(m);
       UNLOCK($lexp);
    }#}
    () ) )

(de glutint-set-funcs()
  (cheader "extern_c char C_glutint_glhandle(const char *, at *);")
  (cheader "static at *make1i(int x)\n\
 { return cons(NEW_NUMBER(x),NIL); }")
  (cheader "static at *make2i(int x, int y)\n\
 { return cons(NEW_NUMBER(x),make1i(y)); }")
  (cheader "static at *make3i(int x, int y, int z)\n\
 { return cons(NEW_NUMBER(x),make2i(y,z)); }")
  (cheader "static at *make4i(int x, int y, int z, int k)\n\
 { return cons(NEW_NUMBER(x),make3i(y,z,k)); }")
  (cheader "static void gDisplay(void)\n\
 { C_glutint_glhandle(\"glut-display\",NIL);}")
  (cheader "static void gReshape(int w, int h)\n\
 { C_glutint_glhandle(\"glut-reshape\", make2i(w,h));}")
  (cheader "static void gKeyboard(unsigned char key, int x, int y)\n\
 { C_glutint_glhandle(\"glut-keyboard\", make3i(key,x,y));}")
  (cheader "static void gMouse(int btn, int state, int x, int y)\n\
 { C_glutint_glhandle(\"glut-mouse\", make4i(btn,state,x,y));}")
  (cheader "static void gMotion(int x, int y)\n\
 { C_glutint_glhandle(\"glut-motion\", make2i(x,y));}")
  (cheader "static void gEntry(int state)\n\
 { C_glutint_glhandle(\"glut-entry\", make1i(state));}")
  (cheader "static void gVisibility(int state)\n\
 { C_glutint_glhandle(\"glut-visibility\", make1i(state));}")
  (cheader "static void gMenuState(int state)\n\
 { C_glutint_glhandle(\"glut-menu-state\", make1i(state));}")
  (cheader "static void gSpecial(int key, int x, int y)\n\
 { C_glutint_glhandle(\"glut-special\", make3i(key,x,y));}")
  (cheader "static void gSpaceballButton(int btn, int state)\n\
 { C_glutint_glhandle(\"glut-spaceball-button\", make2i(btn,state));}")
  (cheader "static void gButtonBox(int btn, int state)\n\
 { C_glutint_glhandle(\"glut-button-box\", make2i(btn,state));}")
  (cheader "static void gDials(int dial, int val)\n\
 { C_glutint_glhandle(\"glut-dials\", make2i(dial,val));}")
  (cheader "static void gTabletButton(int btn, int state, int x, int y)\n\
 { C_glutint_glhandle(\"glut-tablet-button\", make4i(btn,state,x,y));}")
  (cheader "static void gMenuStatus(int status, int x, int y)\n\
 { C_glutint_glhandle(\"glut-menu-status\", make3i(status,x,y));}")
  (cheader "static void gOverlayDisplay(void)\n\
 { C_glutint_glhandle(\"glut-overlay-display\",NIL);}")
  #{
  glutDisplayFunc(gDisplay);
  glutReshapeFunc(gReshape);
  glutKeyboardFunc(gKeyboard);
  glutMouseFunc(gMouse);
  glutMotionFunc(gMotion);
  glutEntryFunc(gEntry);
  glutVisibilityFunc(gVisibility);
  glutMenuStateFunc(gMenuState);
  glutSpecialFunc(gSpecial);
  glutSpaceballButtonFunc(gSpaceballButton);
  glutButtonBoxFunc(gButtonBox);
  glutDialsFunc(gDials);
  glutTabletButtonFunc(gTabletButton);
  glutMenuStatusFunc(gMenuStatus);
  glutOverlayDisplayFunc(gOverlayDisplay);
  #}
  () )

(de glutint-set-motion-funcs()
  (cheader "static void gPassiveMotion(int x, int y)\n\
 { C_glutint_glhandle(\"glut-passive-motion\", make2i(x,y));}")
  (cheader "static void gSpaceballMotion(int x, int y, int z)\n\
 { C_glutint_glhandle(\"glut-spaceball-motion\", make3i(x,y,z));}")
  (cheader "static void gSpaceballRotate(int x, int y, int z)\n\
 { C_glutint_glhandle(\"glut-spaceball-rotate\", make3i(x,y,z));}")
  (cheader "static void gTabletMotion(int x, int y)\n\
 { C_glutint_glhandle(\"glut-tablet-motion\", make2i(x,y));}")
  #{ glutPassiveMotionFunc(gPassiveMotion);
  glutSpaceballMotionFunc(gSpaceballMotion);
  glutSpaceballRotateFunc(gSpaceballRotate);
  glutTabletMotionFunc(gTabletMotion);
  #}
  () )

(de glutint-clr-motion-funcs()
  #{ glutPassiveMotionFunc(0);
  glutSpaceballMotionFunc(0);
  glutSpaceballRotateFunc(0);
  glutTabletMotionFunc(0);
  #}
  () )



(defclass GlutWindow object
  id )

#? (new GlutWindow [<x> <y> [<w> <h>]] [<name>])
;; Constructs a <GlutWindow> object and optionally
;; creates the associated glut window.
;; Arguments <x>, <y>, <w>, <h> specify the window location and size.  
;; Argument <name> specify the window name.  
(defmethod GlutWindow glutwindow args
  (when args
    (selectq (length args)
      (1 (setq args (list () () () () (car args))))
      (2 (setq args (list () () (car args) (cadr args) ())))
      (3 (setq args (list () () . args)))
      (4 (setq args (append args (list ())))) )
    (apply==> this 'create args) ) )

(defmethod GlutWindow -destructor()
  (==> this destroy) )

#? (==> <glutwindow> create <x> <y> <w> <h> <name>)
;; Creates the actual glut window associated with the object <glutwindow>.  
;; Arguments <x>, <y>, <w>, <h> specify the window location and size.  
;; Argument <name> specify the window name.
;; Passing the empty list leaves an argument unspecified.
(defmethod GlutWindow create(x y w h name)
  (when id (==> this destroy))
  (when (and x y) (glut-init-window-position x y))
  (when (and w h) (glut-init-window-size w h))
  (setq id (glut-create-window (or name "GlutWindow")))
  (|*GLHANDLERS| id this)
  (glutint-set-funcs)
  id )

#? (==> <glutwindow> destroy)
;; Destroys the actual glut window 
;; associated with <glutwindow>.
(defmethod GlutWindow destroy()
  (when id
    (|*GLHANDLERS| id ())
    (glut-destroy-window id)
    (setq id ()) ) )

#? (==> <glutwindow> capture-motion <flag>)
;; Selects whether the <glut-passive-motion>,
;; <glut-spaceball-motion>, <glut-spaceball-rotate>
;; and <glut-tablet-motion> are generated at all.
;; Generating these callbacks potentially creates
;; a lot of traffic between the X server and
;; the currently executing program.
(defmethod GlutWindow capture-motion(flag)
  (when id
    (let ((oid (glut-get-window)))
      (glut-set-window id)
      (if flag
          (glutint-set-motion-funcs)
        (glutint-get-motion-funcs) )
      (glut-set-window oid) ) ) )

#? (==> <glutwindow> glhandle <...glcallback...>)
;; This function gets called whenever Glut 
;; calls a callback for window <glutwindow>.
;; The default implementation immediately calls a method
;; named after the callback selector <glut-xxxx>.
(defmethod GlutWindow glhandle glfunc
  (when (and (consp glfunc) (symbolp (car glfunc))
             (check==> (classof this) (car glfunc)) )
    (apply==> this (car glfunc) (cdr glfunc)) ) )

#? (==> <glutwindow> glut-display)
(defmethod GlutWindow glut-display()
  (glClear @GL_COLOR_BUFFER_BIT) )

#? (==> <glutwindow> glut-reshape <w> <h>)
(defmethod GlutWindow glut-reshape(w h)
  () )

#? (==> <glutwindow> glut-keyboard <key> <x> <y>)
(defmethod GlutWindow glut-keyboard(key x y)
  () )

#? (==> <glutwindow> glut-mouse <n> <state> <x> <y>)
(defmethod GlutWindow glut-mouse(n state x y)
  () )

#? (==> <glutwindow> glut-motion <x> <y>)
(defmethod GlutWindow glut-motion(x y)
  () )

#? (==> <glutwindow> glut-passive-motion <x> <y>)
(defmethod GlutWindow glut-passive-motion(x y)
  () )

#? (==> <glutwindow> glut-entry <state>)
(defmethod GlutWindow glut-entry(state)
  () )

#? (==> <glutwindow> glut-visibility <state>)
(defmethod GlutWindow glut-visibility(state)
  () )

#? (==> <glutwindow> glut-menu-state <state>)
(defmethod GlutWindow glut-menu-state(state)
  () )

#? (==> <glutwindow> glut-special <key> <x> <y>)
(defmethod GlutWindow glut-special(key x y)
  () )

#? (==> <glutwindow> glut-spaceball-button <btn> <state>)
(defmethod GlutWindow glut-spaceball-button(btn state)
  () )

#? (==> <glutwindow> glut-spaceball-motion <x> <y> <z>)
(defmethod GlutWindow glut-spaceball-motion(x y z)
  () )

#? (==> <glutwindow> glut-spaceball-rotate <x> <y> <z>)
(defmethod GlutWindow glut-spaceball-rotate(x y z)
  () )

#? (==> <glutwindow> glut-button-box <btn> <state>)
(defmethod GlutWindow glut-button-box(btn state)
  () )

#? (==> <glutwindow> glut-dials <dial> <val>)
(defmethod GlutWindow glut-dials(dial val)
  () )

#? (==> <glutwindow> glut-tablet-button <btn> <state> <x> <y>)
(defmethod GlutWindow glut-tablet-button(btn state x y)
  () )

#? (==> <glutwindow> glut-tablet-motion <x> <y>)
(defmethod GlutWindow glut-tablet-motion(x y)
  () )

#? (==> <glutwindow> glut-menu-status status <x> <y>)
(defmethod GlutWindow glut-tablet-motion(status x y)
  () )

#? (==> <glutwindow> glut-overlay-display)
(defmethod GlutWindow glut-overlay-display()
  () )




;; ----------------------------------------
;; MAKE
;; ----------------------------------------


(let ((m (mod-search "glut.o")))
  (if (and m (module-executable-p m))
      ;; Attempt to reload glut.o
      ;; Repair damage and cause an error
      (progn
        (module.hook 'init m)
        (error "Module \"glut.o\" can only be loaded once") )
    ;; First load.
    ;; Compile using X11 flags.
    ;; Then initialize
    (let ((dhc-make-lushflags dhc-make-lushflags)
          (libs (list opengl-libgl opengl-libglu opengl-libglut)) )
      (when (getconf "X_CFLAGS")
        (setq dhc-make-lushflags
              (concat dhc-make-lushflags
                      " " (getconf "X_CFLAGS")) ) )
      ;; Make
      (dhc-make-with-libs () libs
                          ;; Utilities
                          glutint-poll glutint-init glutint-check glutint-font
                          ;; Glut API
                          glut-init-display-mode glut-init-window-size glut-init-window-position 
                          glut-main-loop glut-create-window glut-create-sub-window
                          glut-get-window glut-set-window glut-destroy-window glut-post-redisplay
                          glut-swap-buffers glut-set-window-title glut-set-icon-title
                          glut-position-window glut-reshape-window glut-pop-window glut-push-window
                          glut-iconify-window glut-show-window glut-hide-window glut-full-screen
                          glut-set-cursor glut-establish-overlay glut-remove-overlay glut-use-layer
                          glut-post-overlay-redisplay glut-show-overlay glut-hide-overlay
                          glut-create-menu glut-destroy-menu glut-get-menu glut-set-menu
                          glut-add-menu-entry glut-add-sub-menu glut-change-to-menu-entry
                          glut-change-to-sub-menu glut-remove-menu-item glut-attach-menu
                          glut-detach-menu glut-display-func glut-reshape-func glut-keyboard-func
                          glut-mouse-func glut-motion-func glut-passive-motion-func glut-entry-func
                          glut-visibility-func glut-idle-func glut-timer-func glut-menu-state-func
                          glut-special-func glut-spaceball-motion-func glut-spaceball-rotate-func
                          glut-spaceball-button-func glut-button-box-func glut-dials-func
                          glut-tablet-motion-func glut-tablet-button-func glut-menu-status-func
                          glut-overlay-display-func glut-set-color glut-get-color glut-copy-colormap
                          glut-get glut-device-get glut-layer-get glut-extension-supported
                          glut-get-modifiers glut-bitmap-character glut-bitmap-width
                          glut-stroke-character glut-stroke-width glut-wire-sphere glut-solid-sphere
                          glut-wire-cone glut-solid-cone glut-wire-cube glut-solid-cube glut-wire-torus
                          glut-solid-torus glut-wire-teapot glut-solid-teapot glut-wire-dodecahedron
                          glut-solid-dodecahedron glut-wire-octahedron glut-solid-octahedron
                          glut-wire-tetrahedron glut-solid-tetrahedron glut-wire-icosahedron
                          glut-solid-icosahedron
                          ;; Glut window
                          glutint-glhandle 
                          glutint-set-funcs
                          glutint-set-motion-funcs
                          glutint-clr-motion-funcs
                          ) 
      ;; Init
      (module-never-unload (mod-search "glut.o"))
      (glutint-init) ) ) )



