
(libload "ogre")
(libload "ldoc")

(defclass ldoc-pane VisualObject
  data					; ldoc code
  (textfont font-8f)
  pos					; position (line number) of cursor
  charw					; width of typical character
  charh					; height of typical character
  lineh					; distance between lines
  baseline				; ordinate of text baseline from top
  nlin					; number of lines (open items in tree)
  ncol					; number of column to display entire tree
  enter-call				; call when enter key is pressed on an item
  min-nlin				; minimum number of lines
  min-ncol				; minimum number of columns
  hlinks				; list of hyperlink with rectangles
  )

(defmethod ldoc-pane ldoc-pane (code &optional ecall)
  (let ((noop (lambda (c) ())))	
    (setq enter-call (if (functionp ecall) ecall noop)))
  (setq min-nlin 20)
  (setq min-ncol 32)
  (setq data code)
  (setq pos 0))


(defmethod ldoc-pane compute-geometry()
  (when window
    (textfont)
    (setq txtcolor (color-rgb 0 0 0))
    (setq txtcolor-d (color-rgb 0.6 0.6 0.6))
    (setq charh (text-height "0"))
    (setq lineh (int (* 1.6 charh)))
    (setq charw (- (text-width "00") (text-width "0")))
    (setq baseline (- (int (* 0.3 charh)) (cadr (rect-text 0 0 "0"))))
    (setq nlin 0) (setq ncol 0))
  (==> this shrink-wrap)
  rect)

(defmethod ldoc-pane shrink-wrap()
  (setq nlin (max min-nlin something))
  (setq ncol (max min-ncol something))
  (==> this resize (+ (* charw ncol) 8)  (+ (* lineh nlin) 8)))

(defmethod ldoc-pane recenter(v)
  (==> v vcenter (* lineh pos)))

(defmethod ldoc-pane backpaint-bw()
  (let (((x y w h) rect))
    (cls)
    (draw-rect x y (1- w) (1- h)) 
    (draw-rect (+ x 2) (+ y 2) (- w 5) (- h 5)) ) )

(defmethod ldoc-pane backpaint-color()
  (let (((x y w h) rect))
    (fill-down-rect x y w h color-bg)))

(defmethod ldoc-pane repaint-color()
  (let (((x y w h) rect)) (printf "Hi\n")))

