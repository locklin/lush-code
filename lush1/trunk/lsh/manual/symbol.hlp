$Id: symbol.hlp,v 1.5 2002-11-06 22:53:08 leonb Exp $
#? *** Symbols.

Symbols are the only named objects. Symbol names may be up to 40
characters long.

The evaluation of a symbol returns the ``value'' of the symbol.
Function <setq> changes the value of a symbol. The value of a new
symbol is always the empty list.

During a call to a Lush function, or during the execution of certain
special functions (e.g. function <let>) predefined symbols take a
temporary value. The previous values are then restored when the
function exits.

For instance, assume that we define a function <(de sqr(x) (* x x))>.
Evaluating list <(sqr 4)> will perform the following actions:
.IP
save the old values of symbol <x> which is the name of 
a function argument,
.IP
set the value of symbol <x> to <4>,
.IP
execute the function body <(* x x)> and save the result,
.IP
restore the previous value of symbol <x>,
.IP
and return the saved result.
.PP
This dynamical binding makes the interpreter getting faster, but
somewhat precludes the development of efficient compilers.

The textual representation of a symbol is composed by the 
characters of its name. The reader usually converts symbol names
to lowercase and replaces underscores by dashes.  This can be
prevented by quoting the symbol name with vertical bars.
Such vertical bars are useful for defining symbols whose name contains
any character usually forbidden: parenthesis, spaces, semi-colon,
macro-characters, upper-case characters etc....

Examples :
.CODE
  gasp GasP         ; are the same symbol named "gasp"
  |GasP|            ; is different symbol named "GasP"
  |);( '|           ; is a symbol named ");( '"
  "gasp"            ; is a string
  12                ; is a number
  |12|              ; is a symbol named "12"
.PP

Unlike several dialect of lisp, Lush does not provide other fields in
a symbol for storing a specific functional value or a property list.
The value of a symbol is the only storage provided by symbols.

#? (defvar name val)
.TYPE DM
.FILE sysenv.lsh
Defines a new global variable named <name> (a symbol) and initialized with 
value <val>.  Traditionally function <setq> was used for that purpose in 
SN/TLisp. There are cases however when <setq> refuses to create a new 
global variable. Eventually we will completely disallow creating global 
variables with <setq> and require the use of <defvar> for that purpose.


#? (setq <v1> <a1> ... [<vn> <an>])	
Sets the value of symbols <v1>...<vn> to <a1>...<an>.
It is good practice to create the symbol being setq'ed
beforehand using <defvar>, <let>, <let*> or other constructs
that create global or local variables.

The <setq> function has a special behavior when the <vi> are not
symbols. This behavior is documented later, with the scope function.

Example:
.CODE
? (setq a 3)
= 3
? (setq b 6)
= 6
? a b
= 3
= 6
? (setq a b b a)
= 3
? a b
= 6
= 3
.PP


#? (set <v> <a>)	
Sets the value of the symbol <v> to <a>. 
set is different from setq because <v> is evaluated first.

Example:
.CODE
? (setq s 'a)
= a
? (set s 3)
= 3
? s
= a
? a
= 3
.PP

#? (incr <v> [<n>])	
Increments <v> by <n> (default 1). <v> is not evaluated, and must be a
symbol whose value is a number. Number <n> may be a positive or
negative.

Example:
.CODE
? (setq s 0)
= 0
? (incr s)
= 1
? s
= 1
.PP

#? (named <s>)	
Returns a new symbol whose name is the string <s>.

Example:
.EX (named "a")
.EX (named "A")

#? (nameof <s>)
Returns a string containing the name of symbol <s>.
This is the converse of <named>.

Example:
.EX (nameof 'a)
.EX (nameof '|A|)

#? (namedclean <s>)
Returns a new symbol whose name is computed by 
normalizing the string <s> using the same algorithm
as the Lisp reader. This is the converse of function <pname>.

Example:
.EX (namedclean "a")
.EX (namedclean "A")
.EX (namedclean "|A|")


#? (lock-symbol <s1> ... <sn>)	
Locks symbols <s1> to <sn>.  Symbols may be locked. You can no longer
change the value of locked symbols, but you may still modify them
temporarily by using the let function. Some Lush functions and all C
functions are stored in locked symbols. This avoids the accidental
loss of a C function.


#? (unlock-symbol <s1> ... <sn>)
Unlocks symbols <s1> to <sn>.

#? (symblist)	
Returns the list of all the symbol names: i. e. a list of strings.

Example:
.EX (length (symblist))

#? (oblist)	
Returns the list of all the symbols: i. e. a list of symbols.

Example:
.EX (length (oblist))

#? (macrochp <s>)	
Returns <t> if <s> symbol defines a macro-character.

Example:
.EX (macrochp '|'|)


#? (constant <name> <val>)
.FILE miscenv.lsh
This function is similar to <setq> except it locks the symbol <name>.
.PP

#? (swap <s1> <s2>)
.FILE miscenv.lsh
Obsolete function for swapping the value of two symbols <s1> and <s2>.
You may use <(setq s1 s2 s2 s1)> instead.

#? (putp <anything> <name> <value>)
.TYPE DE
.FILE sysenv.lsh
Every Lush object (atoms, cons, etc.) may be enriched by defining properties
identified by a symbolic name.  Function <putp> is used to define such 
properties.  Its first argument is an arbitrary Lush object <anything>.
Function <putp> sets the property named by symbol <name> to value <value>.
Properties can be later retrieved using <getp>.

#? (getp <anything> <name>)
.TYPE DE
.FILE sysenv.lsh
Retrieves the property <name> for the Lush object <anything>.

#? *** Namespaces and Packages

#? (private <..symbols..>)
.TYPE DM
.FILE sysenv.lsh
This function must be used inside a package definition.
It indicates that the symbols <..symbols..> must be considered
private to the package.
.SEE (package <name> <..expressions..>)

#? (package <name> <..expressions..>) 
.AUTHOR Leon Bottou
.TYPE DM
.FILE sysenv.lsh
This construct provides a simple way to make symbols "semi-private"
to a group of functions so as to avoid name clashes.
It basically has the effect of prepending the package <name>
to all the symbols defined within its scope and marked as private
(using the <private> construct).
.P
Example:
.CODE
   (package foobar
      (private foo)   
      (de foo(x) (print x)) 
      (de bar(x) (foo x)) )
.P
defines a global symbol <bar>.
Symbol <foo> however is renamed <foobar.foo> in all 
expressions occuring after <(private foo)>.  Hence the
above expression would be equivalent to:
.CODE
  (de bar (x)
    (toto.foo x) )
  (de toto.foo (x)
    (print x) )
.P
Internals: Symbol <name> is used to identify the group
of functions.  Function <package> maintains a list of hidden symbols declared
with function <private>.  Each expression is first transformed to replace all
occurences of a hidden symbol by a new symbol whose name is composed by
prepending the package name <name>, then evaluated as usual.



