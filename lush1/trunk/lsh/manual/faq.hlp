#? *** How Do I ... ?

#? Read lines from a file into a list
.CODE
 (de read-lines(f)
  (reading f
    (let ((ans ()))
      (while (<> (skip-char "\n\r\f") "\e")
        (setq ans (cons (read-string) ans)))
      (reverse ans))))
.P

#? Apply a function to all elements of a vector
interpreted lisp way:
.CODE
 (idx-bloop ((x v)) (func x))
.P
efficient compiled C code way:
.CODE
  (cidx-bloop ("i" ("v" v)) #{ *v = my_c_fun(*v); #}) ())
.P

#? Get a pointer to the raw data of an idx
just use the <idx-ptr> function.
.CODE
  (idx-ptr <m>)
.P

#? Get a pointer to a function written in Lisp
Some functions in popular libraries take function
pointers as argument (a typical example is the
GSL function minimization routines). To obtain
a pointer to the compiled version is a function written
in Lisp, simply use the function <to-gptr>:
.CODE
 (de myfunc (x) ((-double-) x) (- (* x x) 2))
 (dhc-make () myfunc)
 (some-root-finding-function-in-C (to-gptr myfunc))
.P

#? Know if a function can be used in compiled code
Just use <compilablep>:
.CODE
  ? (compilablep +)
  = t
.P



