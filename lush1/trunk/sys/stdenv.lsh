;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; LUSH Lisp Universal Shell
;;;   Copyright (C) 2002 Leon Bottou, Yann Le Cun, AT&T Corp, NECI.
;;; Includes parts of TL3:
;;;   Copyright (C) 1987-1999 Leon Bottou and Neuristique.
;;; Includes selected parts of SN3.2:
;;;   Copyright (C) 1991-2001 AT&T Corp.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 2 of the License, or
;;; (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with this program; if not, write to the Free Software
;;; Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111, USA
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;  $Id: stdenv.lsh,v 1.2 2003-01-10 22:43:37 leonb Exp $
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; ------------------------------------------------------------
;; Load sysenv as appropriate (must be first)

(when (null (functionp path)) 
  (load "sysenv.lsh") )


;; ------------------------------------------------------------
;; Define startup function

(de startup argv
  ;; ------------------------------
  ;; Determine location of compiled 
  ;; versions of installed lsh files.
  ;; ------------------------------
  (setq varlushdir ())
  (when (and getpid (not wintl3p))
    ;; Check for .lush directory
    (let ((home (getenv "HOME")))
      (when (<> home "")
        (let* ((mylushdir (concat-fname home ".lush"))
               (mylushrc (concat-fname mylushdir "lushrc.lsh")) )
          (when (not (dirp mylushdir))
            (printf "*** First time user: Creating directory %s\n" mylushdir) 
            (mkdir mylushdir) )
          (when (not (filep mylushrc))
            (printf "*** First time user: Creating initial file %s\n" mylushrc)
            (writing mylushrc
              (printf ";;; Customize this LUSHRC file as you see fit.\n") ) )
          ;; Make a decision regarding varlushdir
          (let ((owner (alist-get 'uid (fileinfo lushdir))))
            (when (and getuid owner (<> (getuid) owner))
              (setq varlushdir mylushdir) ) )
          ;; Load lushrc
          (libload mylushrc) ) ) ) )
  ;; ------------------------------
  ;; Process arguments
  ;; ------------------------------
  (when argv
    ;; Usage
    (when (= (car argv) "-h")
      (writing "$stderr"
        (printf "Usage:\n")
        (printf "- Type 'lush' without arguments for the interactive mode.\n")
        (printf "- Type 'lush <lshfile> <...args...>' for script mode\n.")
        (exit 10) ) )
    ;; Check that first argument is a file,
    (when (not (filep (car argv)))
      (writing "$stderr"
        (printf "lush: file not found: %s\n" (car argv))
        (exit 10) ) )
    ;; ... run it,
    (libload (car argv))
    ;; ... and exit with exit code 0.
    (exit 0) ) )


;; ------------------------------------------------------------
;; Setup paths for C include files and libraries

(let ((lprepend (mlambda(fn lname dir)
                  `(let ((dir ,dir))
                     (when (and (dirp dir) (not (member dir ,lname)))
                       (setq ,lname (cons dir ,lname)) ) ) ))
      (lappend  (mlambda(fn lname dir)
                  `(let ((dir ,dir))
                     (when (and (dirp dir) (not (member dir ,lname)))
                       (setq ,lname (append ,lname (list dir))) ) ) ) ) )
  
  (lappend c-include-path      "/usr/local/include")
  (lappend shared-library-path "/usr/local/lib")
  (lappend static-library-path "/usr/local/lib")
  
  (each ((flag (regex-split "[^\t ]+" (or (getconf "LIBS") ""))))
    (when (= (left flag 2) "-L")
      (lprepend shared-library-path (mid flag 3))
      (lprepend static-library-path (mid flag 3)) ) )
  
  (each ((flag (regex-split "[^\t ]+" (or (getconf "X_LIBS") ""))))
    (when (= (left flag 2) "-L")
      (lprepend shared-library-path (mid flag 3))
      (lprepend static-library-path (mid flag 3)) ) )
  
  (each ((flag (regex-split "[^\t ]+" (or (getconf "X_CFLAGS") ""))))
    (when (= (left flag 2) "-I")
      (lprepend c-include-path (mid flag 3)) ) )
  
  (lprepend c-include-path (concat-fname lushdir "include")) 
  
  t )


;; ------------------------------------------------------------
;; Setup paths for lush libraries

(addpath (concat-fname lushdir "lsh"))
(addpath (concat-fname (concat-fname lushdir "lsh") "libstd"))
(addpath (concat-fname (concat-fname lushdir "lsh") "libidx"))
(addpath (concat-fname (concat-fname lushdir "lsh") "compiler"))
(addpath (concat-fname (concat-fname lushdir "lsh") "libogre"))

(each ((d (list "packages" "local")))
  (let ((fd (concat-fname lushdir d)))
    (when (dirp fd) (addpath fd))))


;; ------------------------------------------------------------
;; Load standard library files

(libload "libstd/compat")
(libload "libstd/graphenv")
(libload "libstd/brace")

;; ------------------------------------------------------------
;; Autoload tools and libraries

(autoload "libstd/help" 
  apropos )
(autoload "libogre/ogre" 
  ogre )
(autoload "libogre/helptool"
  helptool )
(autoload "libogre/classtool" 
  classtool )
(autoload "libogre/calctool" 
  calctool )
(autoload "libstd/dz" 
  dz zlambda dz-compile )
(autoload "compiler/dh-compile" 
  dhc-make dhc-make-with-libs dhc-make-with-c++ 
  dhc-make-test compilablep )


  



