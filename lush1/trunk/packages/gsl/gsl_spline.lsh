;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; LUSH Lisp Universal Shell
;;;   Copyright (C) 2002 Leon Bottou, Yann Le Cun, AT&T Corp, NECI.
;;; Includes parts of TL3:
;;;   Copyright (C) 1987-1999 Leon Bottou and Neuristique.
;;; Includes selected parts of SN3.2:
;;;   Copyright (C) 1991-2001 AT&T Corp.
;;;
;;; Includes information derived from the GSL (Gnu Scientific Library)
;;;   header files which are copyrighted and distributed under the GPL
;;;   by their respective authors.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 2 of the License, or
;;; (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with this program; if not, write to the Free Software
;;; Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111, USA
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; $Id: gsl_spline.lsh,v 1.1 2002-09-03 04:56:04 profshadoko Exp $
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(libload "gsl-config")



#? *** gsl_spline

;; dummy function that adds GSL C header files in C file
(eval `(de dummy_gsl_spline () ,gsl-cpheader-cmd ()))

#? * (dummy_gsl_spline)
#? * (gsl_spline_alloc <p> <n>)
#? * (gsl_spline_init <spline> <xa> <ya> <size>)
#? * (gsl_spline_eval_e <spline> <x> <a> <y>)
#? * (gsl_spline_eval <spline> <x> <a>)
#? * (gsl_spline_eval_deriv_e <spline> <x> <a> <y>)
#? * (gsl_spline_eval_deriv <spline> <x> <a>)
#? * (gsl_spline_eval_deriv2_e <spline> <x> <a> <y>)
#? * (gsl_spline_eval_deriv2 <spline> <x> <a>)
#? * (gsl_spline_eval_integ_e <spline> <a> <b> <acc> <y>)
#? * (gsl_spline_eval_integ <spline> <a> <b> <acc>)
#? * (gsl_spline_free <spline>)

;; ********************************************************


(de gsl_spline_alloc (    p  n )
    ((-gptr- "const gsl_interp_type *") p) 
    ((-int-) n)                     ;; size_t -> int
    (gptr #{ gsl_spline_alloc(  $p ,$n) #} )          ;; gsl_spline * -> gptr
)

     
(de gsl_spline_init (    spline  xa  ya  size )
    ((-gptr- "gsl_spline *") spline) 
    ((-gptr- "const double *") xa) 
    ((-gptr- "const double *") ya) 
    ((-int-) size)                     ;; size_t -> int
    (int #{ gsl_spline_init(  $spline ,$xa ,$ya ,$size) #} )
)



(de gsl_spline_eval_e (    spline  x  a  y )
    ((-gptr- "const gsl_spline *") spline) 
    ((-double-) x) 
    ((-gptr- "gsl_interp_accel *") a) 
    ((-gptr- "double *") y) 
    (int #{ gsl_spline_eval_e(  $spline ,$x ,$a ,$y) #} )
)


(de gsl_spline_eval (    spline  x  a )
    ((-gptr- "const gsl_spline *") spline) 
    ((-double-) x) 
    ((-gptr- "gsl_interp_accel *") a) 
    (double #{ gsl_spline_eval(  $spline ,$x ,$a) #} )
)


(de gsl_spline_eval_deriv_e (    spline  x  a  y )
    ((-gptr- "const gsl_spline *") spline) 
    ((-double-) x) 
    ((-gptr- "gsl_interp_accel *") a) 
    ((-gptr- "double *") y) 
    (int #{ gsl_spline_eval_deriv_e(  $spline ,$x ,$a ,$y) #} )
)


(de gsl_spline_eval_deriv (    spline  x  a )
    ((-gptr- "const gsl_spline *") spline) 
    ((-double-) x) 
    ((-gptr- "gsl_interp_accel *") a) 
    (double #{ gsl_spline_eval_deriv(  $spline ,$x ,$a) #} )
)


(de gsl_spline_eval_deriv2_e (    spline  x  a  y )
    ((-gptr- "const gsl_spline *") spline) 
    ((-double-) x) 
    ((-gptr- "gsl_interp_accel *") a) 
    ((-gptr- "double *") y) 
    (int #{ gsl_spline_eval_deriv2_e(  $spline ,$x ,$a ,$y) #} )
)


(de gsl_spline_eval_deriv2 (    spline  x  a )
    ((-gptr- "const gsl_spline *") spline) 
    ((-double-) x) 
    ((-gptr- "gsl_interp_accel *") a) 
    (double #{ gsl_spline_eval_deriv2(  $spline ,$x ,$a) #} )
)


(de gsl_spline_eval_integ_e (    spline  a  b  acc  y )
    ((-gptr- "const gsl_spline *") spline) 
    ((-double-) a) 
    ((-double-) b) 
    ((-gptr- "gsl_interp_accel *") acc) 
    ((-gptr- "double *") y) 
    (int #{ gsl_spline_eval_integ_e(  $spline ,$a ,$b ,$acc ,$y) #} )
)


(de gsl_spline_eval_integ (    spline  a  b  acc )
    ((-gptr- "const gsl_spline *") spline) 
    ((-double-) a) 
    ((-double-) b) 
    ((-gptr- "gsl_interp_accel *") acc) 
    (double #{ gsl_spline_eval_integ(  $spline ,$a ,$b ,$acc) #} )
)


(de gsl_spline_free (    spline )
    ((-gptr- "gsl_spline *") spline) 
    #{ gsl_spline_free(  $spline) #} 
    ()
)


;; ********************************************************

(dhc-make ()
  dummy_gsl_spline
  gsl_spline_alloc
  gsl_spline_init
  gsl_spline_eval_e
  gsl_spline_eval
  gsl_spline_eval_deriv_e
  gsl_spline_eval_deriv
  gsl_spline_eval_deriv2_e
  gsl_spline_eval_deriv2
  gsl_spline_eval_integ_e
  gsl_spline_eval_integ
  gsl_spline_free
)
