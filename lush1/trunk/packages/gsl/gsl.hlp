<
#? *** GSL: The Gnu Scientific Library 
{<author> Fu Jie Huang, Yann LeCun}
This section describes the interface to the popular
Gnu Scientific Library. GSL is a huge library of numerical 
functions (several thousand functions). This is a "raw" 
interface, i.e. if a GSL function takes a pointer to a piece of 
data, and a size, that's what its Lush interface function
will take as well. 

An individual help entry is provided for each function,
but no documentation is given. Users are refered to the
GSL reference manual available at 
{<hlink> http://sources.redhat.com/gsl}
in HTML and .ps.gz (700KB). 

GSL provides its own interface to the BLAS/CBLAS library.

This GSL interface dynamically loads de libraries libgsl.so
and libgslcblas.so (or their static counterparts if the .so
are not available). The interface is designed to work with
version 1.0 and version 1.2 of GSL. The 1.2 version that are
not present in 1.0 exist in the interface, but produce an
error message if called with a version in which they don't
exist.

Each GSL interface file (e.g. <gsl/cheb.lsh>, 
<gsl/eigen.lsh>, etc...) can be loaded independently into 
the interpreter. Loading <gsl/gsl.lsh> will load the entire GSL 
interface. Functions in each file corresponds to the functions
defined in the GSL header file of the same name.

#? ** Using the Lush GSL interface
This is a "raw" interface, so whenever the original GSL
function takes a pointer to a chunk of data and a size, 
the Lush version takes a gptr to a chunk of data and
an integer size. A pointer to a chunk of data contained
in a Lush idx can be obtained easily with <(idx-ptr lush-idx)>.
To call a GSL function that takes <gsl_vector_xxx> pointers
or <gsl_matrix_xxx> pointers as arguments, one can temporarily
allocate such structures so that they point to the data
contained in Lush idx'es. A very easy way to do that is through
the macro <idx2gsl>. <idx2gsl> automagically make GSL functions
accept Lush idx'es directly.

#? ** A note on complex numbers
Complex numbers are treated as a gptr that points
to a pair of doubles or a pair a floats.
The Lush interfaces to GSL functions that return a complex 
number take an extra gptr argument that hold the result
upon exit.

Vectors and Matrices of complex numbers are seen from
the Lush side as matrices of tensors with an additional
dimensions (at the end) with a size of 2. The two elements
contain the real and imaginary parts respectively.

#? ** << gsl/libgsl.lsh
#? ** << gs/gsl-idx.lsh

#? ** << gsl/demos/gsl-demos.hlp
#? ** << gsl/gsl-config.lsh
#? ** << gsl/aux_convert.lsh
#? ** << gsl/aux_globalvar.lsh
#? ** << gsl/aux_macro_func.lsh
#? ** << gsl/aux_structure.lsh
#? ** << gsl/blas.lsh
#? ** << gsl/block.lsh
#? ** << gsl/cheb.lsh
#? ** << gsl/combination.lsh
#? ** << gsl/complex.lsh
#? ** << gsl/const.lsh
#? ** << gsl/dht.lsh
#? ** << gsl/diff.lsh
#? ** << gsl/eigen.lsh
#? ** << gsl/err.lsh
#? ** << gsl/fft.lsh
#? ** << gsl/fit.lsh
#? ** << gsl/gsl_pow_int.lsh
#? ** << gsl/histogram.lsh
#? ** << gsl/ieee_utils.lsh
#? ** << gsl/integration.lsh
#? ** << gsl/interpolation.lsh
#? ** << gsl/linalg.lsh
#? ** << gsl/matrix.lsh
#? ** << gsl/min.lsh
#? ** << gsl/monte.lsh
#? ** << gsl/multifit.lsh
#? ** << gsl/multimin.lsh
#? ** << gsl/multiroots.lsh
#? ** << gsl/ntuple.lsh
#? ** << gsl/ode-initval.lsh
#? ** << gsl/permutation.lsh
#? ** << gsl/poly.lsh
#? ** << gsl/qrng.lsh
#? ** << gsl/randist.lsh
#? ** << gsl/rng.lsh
#? ** << gsl/roots.lsh
#? ** << gsl/siman.lsh
#? ** << gsl/sort.lsh
#? ** << gsl/specfunc.lsh
#? ** << gsl/statistics.lsh
#? ** << gsl/sum.lsh
#? ** << gsl/sys.lsh
#? ** << gsl/vector.lsh
