;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; LUSH Lisp Universal Shell
;;;   Copyright (C) 2002 Leon Bottou, Yann Le Cun, AT&T Corp, NECI.
;;; Includes parts of TL3:
;;;   Copyright (C) 1987-1999 Leon Bottou and Neuristique.
;;; Includes selected parts of SN3.2:
;;;   Copyright (C) 1991-2001 AT&T Corp.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 2 of the License, or
;;; (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with this program; if not, write to the Free Software
;;; Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111, USA
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; $Id: gsl-config.lsh,v 1.1 2002-09-03 04:56:04 profshadoko Exp $
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(when (not gsl-libgsl-loaded)

;; the version should be found automatically
(setq gsl-version 1.0)

;; find gsl library
(cond
 ;; gsl-lib was already defined, don't touch it
 (gsl-libgsl t)
 ;; look for dynamic libgsl.so installed through packages
 ((progn
    (let* ((lib (find-shared-library "libgsl")))
      (when (and lib (filep lib)) (defvar gsl-libgsl lib)))))
 ;; look for static libgsl.a installed through packages
 ((progn
    (let* ((lib (find-static-library "libgsl")))
      (when (and lib (filep lib)) (defvar gsl-libgsl lib)))))
 ;; couldn't find it, complain loudly.
 (t (printf "neither the libgsl.so not libgsl.a could be found\n")
    (printf "You should install the libgsl and libgsl-devel")
    (printf "packages from your operating system distribution.\n")
    (printf "Alternatively, you can download GSL from\n")
    (printf "http://sources.redhat.com/gsl, compile it, and install it\n")
    (printf "by hand (e.g. in /usr/local/lib).\n")
    (printf "If you have installed GSL and still get this message, please do\n")
    (printf "(defvar gsl-libgsl \"yourgsllibrary\") before loading this file\n")      
    (printf "(see %s for more details)\n" file-being-loaded)
    (error "cannot configure GSL")))


;; find the gslcblas library
(cond
 ;; gsl-libgslcblas was already defined, don't touch it
 (gsl-libgslcblas t)
 ;; look for dynamic libgslcblas.so installed through packages
 ((progn
    (let* ((lib (find-shared-library "libgslcblas")))
      (when (and lib (filep lib)) (defvar gsl-libgslcblas lib)))))
 ;; look for static libgslcblas.a installed through packages
 ((progn
    (let* ((lib (find-static-library "libgslcblas")))
      (when (and lib (filep lib)) (defvar gsl-libgslcblas lib)))))
 ;; couldn't find it, complain loudly.
 (t (printf "neither the libgslcblas.so not libgslcblas.a could be found\n")
    (printf "You should install the libgsl and libgsl-devel")
    (printf "packages from your operating system distribution.\n")
    (printf "Alternatively, you can download GSL from\n")
    (printf "http://sources.redhat.com/gsl, compile it, and install it\n")
    (printf "by hand (e.g. in /usr/local/lib).\n")
    (printf "If you have installed GSL and still get this message, please do\n")
    (printf "(defvar gsl-libgslcblas \"yourgslcblaslibrary\") before loading this file\n")      
    (printf "(see %s for more details)\n" file-being-loaded)
    (error "cannot configure GSLCBLAS")))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defvar gsl-cpheader-cmd
      '(progn
	 (cpheader "#include <gsl/gsl_errno.h>")
	 (cpheader "#include <gsl/gsl_math.h>")
	 (cpheader "#include <gsl/gsl_ieee_utils.h>")

	 (cpheader "#include <gsl/gsl_poly.h>")
	 (cpheader "#include <gsl/gsl_blas.h>")
	 (cpheader "#include <gsl/gsl_blas_types.h>")

	 (cpheader "#include <gsl/gsl_block_complex.h>")
	 (cpheader "#include <gsl/gsl_block.h>")
	 (cpheader "#include <gsl/gsl_chebyshev.h>")
	 ;; (cpheader "#include <gsl/gsl_combination.h>")
	 (cpheader "#include <gsl/gsl_complex.h>")
	 (cpheader "#include <gsl/gsl_complex_math.h>")
	 (cpheader "#include <gsl/gsl_const_cgs.h>")
	 (cpheader "#include <gsl/gsl_const.h>")
	 (cpheader "#include <gsl/gsl_const_mks.h>")
	 (cpheader "#include <gsl/gsl_const_num.h>")
	 (cpheader "#include <gsl/gsl_dft_complex_float.h>")
	 (cpheader "#include <gsl/gsl_dft_complex.h>")
	 (cpheader "#include <gsl/gsl_dht.h>")
	 (cpheader "#include <gsl/gsl_diff.h>")
	 (cpheader "#include <gsl/gsl_eigen.h>")

	 (cpheader "#include <gsl/gsl_fft_complex_float.h>")
	 (cpheader "#include <gsl/gsl_fft_complex.h>")
	 (cpheader "#include <gsl/gsl_fft.h>")
	 (cpheader "#include <gsl/gsl_fft_halfcomplex_float.h>")
	 (cpheader "#include <gsl/gsl_fft_halfcomplex.h>")
	 (cpheader "#include <gsl/gsl_fft_real_float.h>")
	 (cpheader "#include <gsl/gsl_fft_real.h>")
	 (cpheader "#include <gsl/gsl_fit.h>")
	 (cpheader "#include <gsl/gsl_heapsort.h>")
	 (cpheader "#include <gsl/gsl_histogram2d.h>")
	 (cpheader "#include <gsl/gsl_histogram.h>")

	 (cpheader "#include <gsl/gsl_integration.h>")
	 (cpheader "#include <gsl/gsl_interp.h>")
	 (cpheader "#include <gsl/gsl_linalg.h>")
	 (cpheader "#include <gsl/gsl_machine.h>")

	 (cpheader "#include <gsl/gsl_matrix.h>")
	 (cpheader "#include <gsl/gsl_message.h>")
	 (cpheader "#include <gsl/gsl_min.h>")
	 (cpheader "#include <gsl/gsl_mode.h>")
	 (cpheader "#include <gsl/gsl_monte.h>")
	 (cpheader "#include <gsl/gsl_monte_miser.h>")
	 (cpheader "#include <gsl/gsl_monte_plain.h>")
	 (cpheader "#include <gsl/gsl_monte_vegas.h>")
	 (cpheader "#include <gsl/gsl_multifit.h>")
	 (cpheader "#include <gsl/gsl_multifit_nlin.h>")
	 (cpheader "#include <gsl/gsl_multimin.h>")
	 (cpheader "#include <gsl/gsl_multiroots.h>")
	 (cpheader "#include <gsl/gsl_nan.h>")
	 (cpheader "#include <gsl/gsl_ntuple.h>")
	 (cpheader "#include <gsl/gsl_odeiv.h>")
	 (cpheader "#include <gsl/gsl_permutation.h>")
	 (cpheader "#include <gsl/gsl_permute.h>")
	 (cpheader "#include <gsl/gsl_permute_vector.h>")
	 (cpheader "#include <gsl/gsl_poly.h>")
	 (cpheader "#include <gsl/gsl_pow_int.h>")
	 (cpheader "#include <gsl/gsl_precision.h>")
	 (cpheader "#include <gsl/gsl_qrng.h>")
	 (cpheader "#include <gsl/gsl_randist.h>")
	 (cpheader "#include <gsl/gsl_rng.h>")
	 (cpheader "#include <gsl/gsl_roots.h>")
	 (cpheader "#include <gsl/gsl_siman.h>")
	 (cpheader "#include <gsl/gsl_sort.h>")
	 (cpheader "#include <gsl/gsl_sort_vector.h>")
	 (cpheader "#include <gsl/gsl_specfunc.h>")
	 (cpheader "#include <gsl/gsl_spline.h>")
	 (cpheader "#include <gsl/gsl_statistics.h>")
	 (cpheader "#include <gsl/gsl_sum.h>")
	 (cpheader "#include <gsl/gsl_sys.h>")
	 (cpheader "#include <gsl/gsl_test.h>")
	 (cpheader "#include <gsl/gsl_vector_complex.h>")
	 (cpheader "#include <gsl/gsl_vector.h>")
	 (cpheader "#include <gsl/gsl_version.h>")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; load libraries

(mod-load gsl-libgslcblas)
(mod-load gsl-libgsl)
(defvar gsl-libgsl-loaded t)

)