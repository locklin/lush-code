;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; LUSH Lisp Universal Shell
;;;   Copyright (C) 2002 Leon Bottou, Yann Le Cun, AT&T Corp, NECI.
;;; Includes parts of TL3:
;;;   Copyright (C) 1987-1999 Leon Bottou and Neuristique.
;;; Includes selected parts of SN3.2:
;;;   Copyright (C) 1991-2001 AT&T Corp.
;;;
;;; Includes information derived from the GSL (Gnu Scientific Library)
;;;   header files which are copyrighted and distributed under the GPL
;;;   by their respective authors.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 2 of the License, or
;;; (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with this program; if not, write to the Free Software
;;; Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111, USA
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; $Id: gsl_permutation.lsh,v 1.1 2002-09-03 04:56:04 profshadoko Exp $
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(libload "gsl-config")



#? *** gsl_permutation

;; dummy function that adds GSL C header files in C file
(eval `(de dummy_gsl_permutation () ,gsl-cpheader-cmd ()))

#? * (dummy_gsl_permutation)
#? * (gsl_permutation_alloc <n>)
#? * (gsl_permutation_calloc <n>)
#? * (gsl_permutation_init <p>)
#? * (gsl_permutation_free <p>)
#? * (gsl_permutation_memcpy <dest> <src>)
#? * (gsl_permutation_fread <stream> <p>)
#? * (gsl_permutation_fwrite <stream> <p>)
#? * (gsl_permutation_fscanf <stream> <p>)
#? * (gsl_permutation_fprintf <stream> <p> <format>)
#? * (gsl_permutation_size <p>)
#? * (gsl_permutation_data <p>)
#? * (gsl_permutation_get <p> <i>)
#? * (gsl_permutation_swap <p> <i> <j>)
#? * (gsl_permutation_valid <p>)
#? * (gsl_permutation_reverse <p>)
#? * (gsl_permutation_inverse <inv> <p>)
#? * (gsl_permutation_next <p>)
#? * (gsl_permutation_prev <p>)

;; ********************************************************



(de gsl_permutation_alloc (    n )
    ((-int-) n)                     ;; size_t -> int
    (gptr #{ gsl_permutation_alloc (  $n) #} )          ;; gsl_permutation  * -> gptr
)

(de gsl_permutation_calloc (    n )
    ((-int-) n)                     ;; size_t -> int
    (gptr #{ gsl_permutation_calloc (  $n) #} )          ;; gsl_permutation  * -> gptr
)

(de gsl_permutation_init (    p )
    ((-gptr- "gsl_permutation *") p) 
    #{ gsl_permutation_init (  $p) #} 
    ()
)

(de gsl_permutation_free (    p )
    ((-gptr- "gsl_permutation *") p) 
    #{ gsl_permutation_free (  $p) #} 
    ()
)

(if (>= gsl-version 1.2)
    (de gsl_permutation_memcpy (    dest  src )
      ((-gptr- "gsl_permutation *") dest) 
      ((-gptr- "const gsl_permutation *") src) 
      (int #{ gsl_permutation_memcpy (  $dest ,$src) #} )
      )
  (de gsl_permutation_memcpy (    dest  src )
    ((-gptr- "gsl_permutation *") dest) 
    ((-gptr- "const gsl_permutation *") src) 
    (error "this function is not available in this version of GSL") ()))


(de gsl_permutation_fread (    stream  p )
    ((-gptr- "FILE *") stream) 
    ((-gptr- "gsl_permutation *") p) 
    (int #{ gsl_permutation_fread (  $stream ,$p) #} )
)

(de gsl_permutation_fwrite (    stream  p )
    ((-gptr- "FILE *") stream) 
    ((-gptr- "const gsl_permutation *") p) 
    (int #{ gsl_permutation_fwrite (  $stream ,$p) #} )
)

(de gsl_permutation_fscanf (    stream  p )
    ((-gptr- "FILE *") stream) 
    ((-gptr- "gsl_permutation *") p) 
    (int #{ gsl_permutation_fscanf (  $stream ,$p) #} )
)

(de gsl_permutation_fprintf (    stream  p   format )
    ((-gptr- "FILE *") stream) 
    ((-gptr- "const gsl_permutation *") p) 
    ((-gptr- "const char *") format) 
    (int #{ gsl_permutation_fprintf (  $stream ,$p ,$format) #} )
)


(de gsl_permutation_size (    p )
    ((-gptr- "const gsl_permutation *") p) 
    (int #{ gsl_permutation_size (  $p) #} )                ;; size_t -> int
)

(de gsl_permutation_data (    p )
    ((-gptr- "const gsl_permutation *") p) 
    (gptr #{ gsl_permutation_data (  $p) #} )          ;; size_t * -> gptr
)


(de gsl_permutation_get (    p  i )
    ((-gptr- "const gsl_permutation *") p) 
    ((-int-) i)                     ;; size_t -> int
    (int #{ gsl_permutation_get (  $p ,$i) #} )                ;; size_t -> int
)

(de gsl_permutation_swap (    p  i  j )
    ((-gptr- "gsl_permutation *") p) 
    ((-int-) i)                     ;; size_t -> int
    ((-int-) j)                     ;; size_t -> int
    (int #{ gsl_permutation_swap (  $p ,$i ,$j) #} )
)


(de gsl_permutation_valid (    p )
    ((-gptr- "gsl_permutation *") p) 
    (int #{ gsl_permutation_valid (  $p) #} )
)

(de gsl_permutation_reverse (    p )
    ((-gptr- "gsl_permutation *") p) 
    #{ gsl_permutation_reverse (  $p) #} 
    ()
)

(de gsl_permutation_inverse (    inv  p )
    ((-gptr- "gsl_permutation *") inv) 
    ((-gptr- "const gsl_permutation *") p) 
    (int #{ gsl_permutation_inverse (  $inv ,$p) #} )
)

(de gsl_permutation_next (    p )
    ((-gptr- "gsl_permutation *") p) 
    (int #{ gsl_permutation_next (  $p) #} )
)

(de gsl_permutation_prev (    p )
    ((-gptr- "gsl_permutation *") p) 
    (int #{ gsl_permutation_prev (  $p) #} )
)


;; ********************************************************

(dhc-make ()
  dummy_gsl_permutation
  gsl_permutation_alloc
  gsl_permutation_calloc
  gsl_permutation_init
  gsl_permutation_free
  gsl_permutation_memcpy
  gsl_permutation_fread
  gsl_permutation_fwrite
  gsl_permutation_fscanf
  gsl_permutation_fprintf
  gsl_permutation_size
  gsl_permutation_data
  gsl_permutation_get
  gsl_permutation_swap
  gsl_permutation_valid
  gsl_permutation_reverse
  gsl_permutation_inverse
  gsl_permutation_next
  gsl_permutation_prev
)
