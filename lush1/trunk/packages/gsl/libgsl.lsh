;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; LUSH Lisp Universal Shell
;;;   Copyright (C) 2002 Leon Bottou, Yann Le Cun, AT&T Corp, NECI.
;;; Includes parts of TL3:
;;;   Copyright (C) 1987-1999 Leon Bottou and Neuristique.
;;; Includes selected parts of SN3.2:
;;;   Copyright (C) 1991-2001 AT&T Corp.
;;;
;;; Includes information derived from the GSL (Gnu Scientific Library)
;;;   header files which are copyrighted and distributed under the GPL
;;;   by their respective authors.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 2 of the License, or
;;; (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with this program; if not, write to the Free Software
;;; Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111, USA
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(libload "gsl/gsl-config")
(libload "gsl/gsl-idx")
(libload "gsl/eigen")
(libload "gsl/linalg")

;; dummy function that adds GSL C header files in C file
(eval `(de dummy_libgsl () ,gsl-cpheader-cmd ()))

#? (eigen-symm <m>)
;; Compute eigenvalues of symmetric real matrix <m>.
;; Vector of eigenvalues is returned. Input matrix is destroyed.
(de eigen-symm (m)
  ((-idx2- (-double-)) m)
  (let ((v (double-matrix (idx-dim m 0)))
	(p (gsl_eigen_symm_alloc (idx-dim m 0))))
    (idx2gsl (gsl-eigen-symm m v p))
    (gsl_eigen_symm_free p)
    v))

#? (eigen-symmv <m>)
;; Compute eigenvectors and eigenvalues of symmetric matrix <m>.
;; Eigenvectors are written into <m> (each column is an eigenvector).
;; Eigenvalues are returned in an idx1.
;; Eigenvalues and eigenvectors are sorted in descending order.
(de eigen-symmv (m)
  ((-idx2- (-double-)) m)
  (let ((v (double-matrix (idx-dim m 0)))
	(ev (double-matrix (idx-dim m 0) (idx-dim m 1)))
	(p (gsl_eigen_symmv_alloc (idx-dim m 0))))
    (idx2gsl (gsl-eigen-symmv m v ev p))
    (idx2gsl (gsl_eigen_symmv_sort v ev 1))
    (gsl_eigen_symmv_free p)
    (idx-copy ev m)
    v))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#? (svd <A> <V> <S>)
;; [from the GSL manual]: This function factorizes the M-by-N matrix A
;; into the singular value decomposition A = U S V^T. On output the
;; matrix A is replaced by U. The diagonal elements of the singular value
;; matrix S are stored in the vector S. The singular values are
;; non-negative and form a non-increasing sequence from S_1 to S_N. The
;; matrix V contains the elements of V in untransposed form. To form the
;; product U S V^T it is necessary to take the transpose of V. 
;; This routine uses the Golub-Reinsch SVD algorithm. Example:
;; {<code>
;;   (setq a [[1 2][3 4][5 6]])
;;   (setq v (double-matrix 2 2))
;;   (setq s (double-matrix 2))
;;   (svd a v s)
;; </code>}
(de svd (a v s)
  ((-idx2- (-double-)) a v)
  ((-idx1- (-double-)) s)
  (let ((n (idx-dim a 1)))
    (when (< (idx-dim a 0) n)
      (error "must have M>N for SVD of MxN matrix"))
    (when (or (<> n (idx-dim v 0))
	      (<> n (idx-dim v 1))
	      (<> n (idx-dim s 0)))
      (error "incompatible matrix sizes for SVD")))
  (let ((w (double-matrix (idx-dim a 1))))
    (idx2gsl (gsl_linalg_SV_decomp a v s w)))))

#? (lin-solve <A> <x>)
;; This function solves the system A x = b in-place using Householder
;; transformations. On input x should contain the right-hand side b,
;; which is replaced by the solution on output. The matrix A is destroyed
;; by the Householder transformations. Example:
;; {<code>
;; (setq a [[1 2][3 4]])
;; = [[ 1.00  2.00 ]
;;    [ 3.00  4.00 ]]
;; ? (setq b [4 4])
;; = [ 4.00  4.00 ]
;; ? (lin-solve a b)
;; = 0
;; ? b
;; = [-4.00  4.00 ]
;; </code>}
(de lin-solve (a x)
  ((-idx2- (-double-)) a)
  ((-idx1- (-double-)) x)
  (idx2gsl (gsl_linalg_HH_svx A x)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(dhc-make 
 ()
 dummy_libgsl
 eigen-symm
 eigen-symmv
 svd
 lin-solve
 )