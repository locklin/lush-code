;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; LUSH Lisp Universal Shell
;;;   Copyright (C) 2002 Leon Bottou, Yann Le Cun, AT&T Corp, NECI.
;;; Includes parts of TL3:
;;;   Copyright (C) 1987-1999 Leon Bottou and Neuristique.
;;; Includes selected parts of SN3.2:
;;;   Copyright (C) 1991-2001 AT&T Corp.
;;;
;;; Includes information derived from the GSL (Gnu Scientific Library)
;;;   header files which are copyrighted and distributed under the GPL
;;;   by their respective authors.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 2 of the License, or
;;; (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with this program; if not, write to the Free Software
;;; Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111, USA
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; $Id: gsl_fft_complex.lsh,v 1.1 2002-09-03 04:56:04 profshadoko Exp $
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(libload "gsl-config")



#? *** gsl_fft_complex

;; dummy function that adds GSL C header files in C file
(eval `(de dummy_gsl_fft_complex () ,gsl-cpheader-cmd ()))

#? * (dummy_gsl_fft_complex)
#? * (gsl_fft_complex_radix2_forward <data> <stride> <n>)
#? * (gsl_fft_complex_radix2_backward <data> <stride> <n>)
#? * (gsl_fft_complex_radix2_inverse <data> <stride> <n>)
#? * (gsl_fft_complex_radix2_transform <data> <stride> <n> <sign>)
#? * (gsl_fft_complex_radix2_dif_forward <data> <stride> <n>)
#? * (gsl_fft_complex_radix2_dif_backward <data> <stride> <n>)
#? * (gsl_fft_complex_radix2_dif_inverse <data> <stride> <n>)
#? * (gsl_fft_complex_radix2_dif_transform <data> <stride> <n> <sign>)
;; #? * (gsl_fft_complex_bitreverse_order <data> <stride> <n> <n_bits>)
#? * (gsl_fft_complex_wavetable_alloc <n>)
#? * (gsl_fft_complex_wavetable_free <wavetable>)
#? * (gsl_fft_complex_workspace_alloc <n>)
#? * (gsl_fft_complex_workspace_free <workspace>)
#? * (gsl_fft_complex_memcpy <dest> <src>)
#? * (gsl_fft_complex_forward <data> <stride> <n> <wavetable> <work>)
#? * (gsl_fft_complex_backward <data> <stride> <n> <wavetable> <work>)
#? * (gsl_fft_complex_inverse <data> <stride> <n> <wavetable> <work>)
#? * (gsl_fft_complex_transform <data> <stride> <n> <wavetable> <work> <sign>)

;; ********************************************************


(de gsl_fft_complex_radix2_forward (    data  stride  n )
    ((-gptr- "double *") data) 
    ((-int-) stride)                     ;; size_t -> int
    ((-int-) n)                     ;; size_t -> int
    (int #{ gsl_fft_complex_radix2_forward (  $data ,$stride ,$n) #} )
)


(de gsl_fft_complex_radix2_backward (    data  stride  n )
    ((-gptr- "double *") data) 
    ((-int-) stride)                     ;; size_t -> int
    ((-int-) n)                     ;; size_t -> int
    (int #{ gsl_fft_complex_radix2_backward (  $data ,$stride ,$n) #} )
)


(de gsl_fft_complex_radix2_inverse (    data  stride  n )
    ((-gptr- "double *") data) 
    ((-int-) stride)                     ;; size_t -> int
    ((-int-) n)                     ;; size_t -> int
    (int #{ gsl_fft_complex_radix2_inverse (  $data ,$stride ,$n) #} )
)


(de gsl_fft_complex_radix2_transform (    data  stride  n  sign )
    ((-gptr- "double *") data) 
    ((-int-) stride)                     ;; size_t -> int
    ((-int-) n)                     ;; size_t -> int
    ((-int-) sign)                     ;; gsl_fft_direction (enum) -> int
    (int #{ gsl_fft_complex_radix2_transform (  $data ,$stride ,$n ,$sign) #} )
)


(de gsl_fft_complex_radix2_dif_forward (    data  stride  n )
    ((-gptr- "double *") data) 
    ((-int-) stride)                     ;; size_t -> int
    ((-int-) n)                     ;; size_t -> int
    (int #{ gsl_fft_complex_radix2_dif_forward (  $data ,$stride ,$n) #} )
)


(de gsl_fft_complex_radix2_dif_backward (    data  stride  n )
    ((-gptr- "double *") data) 
    ((-int-) stride)                     ;; size_t -> int
    ((-int-) n)                     ;; size_t -> int
    (int #{ gsl_fft_complex_radix2_dif_backward (  $data ,$stride ,$n) #} )
)


(de gsl_fft_complex_radix2_dif_inverse (    data  stride  n )
    ((-gptr- "double *") data) 
    ((-int-) stride)                     ;; size_t -> int
    ((-int-) n)                     ;; size_t -> int
    (int #{ gsl_fft_complex_radix2_dif_inverse (  $data ,$stride ,$n) #} )
)


(de gsl_fft_complex_radix2_dif_transform (    data  stride  n  sign )
    ((-gptr- "double *") data) 
    ((-int-) stride)                     ;; size_t -> int
    ((-int-) n)                     ;; size_t -> int
    ((-int-) sign)                     ;; gsl_fft_direction (enum) -> int
    (int #{ gsl_fft_complex_radix2_dif_transform (  $data ,$stride ,$n ,$sign) #} )
)

(if (>= gsl-version 1.2)
  (de gsl_fft_complex_bitreverse_order (    data  stride  n  n_bits )
    ((-gptr- "double *") data) 
    ((-int-) stride) ;; size_t -> int
    ((-int-) n)	;; size_t -> int
    ((-int-) n_bits) ;; size_t -> int
    (int #{ gsl_fft_complex_bitreverse_order (  $data ,$stride ,$n ,$n_bits) #} )
    )
  (de gsl_fft_complex_bitreverse_order (    data  stride  n  n_bits )
    ((-gptr- "double *") data) 
    ((-int-) stride) ;; size_t -> int
    ((-int-) n)	;; size_t -> int
    ((-int-) n_bits) ;; size_t -> int
    (error "this function is not available in this version of GSL") ()))




(de gsl_fft_complex_wavetable_alloc (    n )
    ((-int-) n)                     ;; size_t -> int
    (gptr #{ gsl_fft_complex_wavetable_alloc (  $n) #} )          ;; gsl_fft_complex_wavetable * -> gptr
)


(de gsl_fft_complex_wavetable_free (    wavetable )
    ((-gptr- "gsl_fft_complex_wavetable *") wavetable) 
    #{ gsl_fft_complex_wavetable_free (  $wavetable) #} 
    ()
)


(de gsl_fft_complex_workspace_alloc (    n )
    ((-int-) n)                     ;; size_t -> int
    (gptr #{ gsl_fft_complex_workspace_alloc (  $n) #} )          ;; gsl_fft_complex_workspace * -> gptr
)


(de gsl_fft_complex_workspace_free (    workspace )
    ((-gptr- "gsl_fft_complex_workspace *") workspace) 
    #{ gsl_fft_complex_workspace_free (  $workspace) #} 
    ()
)


(de gsl_fft_complex_memcpy (    dest  src )
    ((-gptr- "gsl_fft_complex_wavetable *") dest) 
    ((-gptr- "gsl_fft_complex_wavetable *") src) 
    (int #{ gsl_fft_complex_memcpy (  $dest ,$src) #} )
)



(de gsl_fft_complex_forward (    data  stride  n  wavetable  work )
    ((-gptr- "double *") data) 
    ((-int-) stride)                     ;; size_t -> int
    ((-int-) n)                     ;; size_t -> int
    ((-gptr- "const gsl_fft_complex_wavetable *") wavetable) 
    ((-gptr- "gsl_fft_complex_workspace *") work) 
    (int #{ gsl_fft_complex_forward (  $data ,$stride ,$n ,$wavetable ,$work) #} )
)


(de gsl_fft_complex_backward (    data  stride  n  wavetable  work )
    ((-gptr- "double *") data) 
    ((-int-) stride)                     ;; size_t -> int
    ((-int-) n)                     ;; size_t -> int
    ((-gptr- "const gsl_fft_complex_wavetable *") wavetable) 
    ((-gptr- "gsl_fft_complex_workspace *") work) 
    (int #{ gsl_fft_complex_backward (  $data ,$stride ,$n ,$wavetable ,$work) #} )
)


(de gsl_fft_complex_inverse (    data  stride  n  wavetable  work )
    ((-gptr- "double *") data) 
    ((-int-) stride)                     ;; size_t -> int
    ((-int-) n)                     ;; size_t -> int
    ((-gptr- "const gsl_fft_complex_wavetable *") wavetable) 
    ((-gptr- "gsl_fft_complex_workspace *") work) 
    (int #{ gsl_fft_complex_inverse (  $data ,$stride ,$n ,$wavetable ,$work) #} )
)


(de gsl_fft_complex_transform (    data  stride  n  wavetable  work  sign )
    ((-gptr- "double *") data) 
    ((-int-) stride)                     ;; size_t -> int
    ((-int-) n)                     ;; size_t -> int
    ((-gptr- "const gsl_fft_complex_wavetable *") wavetable) 
    ((-gptr- "gsl_fft_complex_workspace *") work) 
    ((-int-) sign)                     ;; gsl_fft_direction (enum) -> int
    (int #{ gsl_fft_complex_transform (  $data ,$stride ,$n ,$wavetable ,$work ,$sign) #} )
)


;; ********************************************************

(dhc-make 
 ()
 dummy_gsl_fft_complex
 gsl_fft_complex_radix2_forward
 gsl_fft_complex_radix2_backward
 gsl_fft_complex_radix2_inverse
 gsl_fft_complex_radix2_transform
 gsl_fft_complex_radix2_dif_forward
 gsl_fft_complex_radix2_dif_backward
 gsl_fft_complex_radix2_dif_inverse
 gsl_fft_complex_radix2_dif_transform
 gsl_fft_complex_bitreverse_order
 gsl_fft_complex_wavetable_alloc
 gsl_fft_complex_wavetable_free
 gsl_fft_complex_workspace_alloc
 gsl_fft_complex_workspace_free
 gsl_fft_complex_memcpy
 gsl_fft_complex_forward
 gsl_fft_complex_backward
 gsl_fft_complex_inverse
 gsl_fft_complex_transform)


