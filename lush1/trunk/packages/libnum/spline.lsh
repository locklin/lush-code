
(libload "libnum-config")

#? **** Splines
;; Spline approximation functionality is provided through
;; the <gsl-pline> class. This is built on top of the spline
;; function in GSL.

#? * gsl-spline
;; a spline class. Create an instance with the coordinates
;; of the points to be interpolated, and call the <eval> method.
(defclass gsl-spline object
  ((-gptr-) gslspline)
  ((-gptr-) accel))

#? (new gsl-spline <xx> <yy>)
;; create a new <gsl-spline> object. <xx> and <yy> are a idx1 
;; of double containing the abscissas and ordinates of the control
;; points respectively.
(defmethod gsl-spline gsl-spline (xa ya)
  ((-idx1- (-double-)) xa)
  ((-idx1- (-double-)) ya)
  (cpheader "#include <gsl/gsl_spline.h>")
  (let ((n (idx-dim xa 0)))
    ((-int-) n)
    (setq accel (to-gptr #{ gsl_interp_accel_alloc() #}))
    (setq gslspline (to-gptr #{ gsl_spline_alloc(gsl_interp_cspline ,$n) #}))
    (int #{ gsl_spline_init( (gsl_spline *)($gslspline),IDX_PTR($xa,double) ,IDX_PTR($ya,double),$n) #} )))

(defmethod gsl-spline -destructor ()
  (when (<> (to-gptr ()) gslspline) #{ gsl_spline_free( (gsl_spline *)$gslspline) #})
  (when (<> (to-gptr ()) accel) #{ gsl_interp_accel_free( (gsl_interp_accel *)$accel) #})
  ())

#? (==> <gsl-spline> eval <x>)
;; evaluate the spline <gsl-spline> at point <x>.
(defmethod gsl-spline eval (x)
  ((-double-) x)
  (to-double #{ gsl_spline_eval( (gsl_spline *)$gslspline,$x, (gsl_interp_accel *)$accel) #}))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(dhc-make-with-libs
 ()
 (list libnum-libgslcblas libnum-libgsl )
 (gsl-spline gsl-spline -destructor eval))


