;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; LUSH Lisp Universal Shell
;;;   Copyright (C) 2002 Leon Bottou, Yann Le Cun, AT&T Corp, NECI.
;;; Includes parts of TL3:
;;;   Copyright (C) 1987-1999 Leon Bottou and Neuristique.
;;; Includes selected parts of SN3.2:
;;;   Copyright (C) 1991-2001 AT&T Corp.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 2 of the License, or
;;; (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with this program; if not, write to the Free Software
;;; Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111, USA
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; $Id: lasvmvector.lsh,v 1.4 2005-02-19 03:21:54 leonb Exp $
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(libload "libc/make")
(libload "libidx/idx-double")
(libload "libidx/idx-int")
(libload "dynamic")
(libload "kernel")
(libload "lasvmload")


;; -------------------------------- sparsevector

(defclass SparseVector Object
  ((-gptr-) p) )

(defmethod SparseVector SparseVector()
  #{ $p = lasvm_sparsevector_create(); #}
  () )

(defmethod SparseVector -destructor()
  #{ if ($p) lasvm_sparsevector_destroy($p); #}
  () )

(defmethod SparseVector get(i)
  ((-int-) i)
  (to-real #{ lasvm_sparsevector_get($p,$i) #}) )

(defmethod SparseVector set(i v)
  ((-int-) i)
  ((-double-) v)
  #{ lasvm_sparsevector_set($p,$i,$v); #}
  v )

(defmethod SparseVector size()
  (to-int #{ ((lasvm_sparsevector_t*)($p))->size #}) )

(defmethod SparseVector pairs()
  (to-int #{ ((lasvm_sparsevector_t*)($p))->npairs #}) )

(defmethod SparseVector contents(ivec dvec)
  ((-idx1- (-int-)) ivec)
  ((-idx1- (-double-)) dvec)
  (let* ((n (==> this pairs)))
    (idx-i1resize ivec (max 1 n))
    (idx-d1resize dvec (max 1 n))
    #{{
       int *iv = IDX_PTR($ivec, int);
       double *dv = IDX_PTR($dvec, double);
       lasvm_sparsevector_t *v = (lasvm_sparsevector_t*)$p;
       lasvm_sparsevector_pair_t *p = v->pairs;
       while (p)
       {  
         *iv = p->index;
         *dv = p->data;
         p = p->next;
         iv += $ivec->mod[0];
         dv += $dvec->mod[0];
       }
    }#}
    n ) )

(defmethod SparseVector unpack(n)
  ((-int-) n)
  (let ((m (double-matrix n)))
    #{{
       double *dv = IDX_PTR($m, double);
       lasvm_sparsevector_t *v = (lasvm_sparsevector_t*)$p;
       lasvm_sparsevector_pair_t *p = v->pairs;
       while (p && p->index < $n)
       {  
         dv[p->index] = p->data;
         p = p->next;
       }
    }#}
    m ) )

(de sparsevector-lincomb(v1 a1 v2 a2)
  ((-double-) a1 a2)
  ((-obj- (SparseVector)) v1 v2)
  (let ((v (new sparsevector)))
    #{{ lasvm_sparsevector_t *old = $v->p;
        $v->p = lasvm_sparsevector_combine($v1->p, $a1, $v2->p, $a2);
        lasvm_sparsevector_destroy(old);
    }#}
    v ) )

(de sparsevector-dot(v1 v2)
  ((-obj- (SparseVector)) v1 v2)
  (to-real #{ lasvm_sparsevector_dot_product($v1->p, $v2->p) #}) )

(de sparsevector-print(v)
  (printf ":sparsevector:%l"
	  (when (> (==> v pairs) 0)
	    (let ((n (==> v pairs))
		  (ivec (int-matrix 1))
		  (dvec (double-matrix 1)))
	      (==> v contents ivec dvec)
	      (mapfor (i 0 (1- n))
		(list (ivec i) (dvec i)) ) ) ) ) )

(defmethod SparseVector pretty()
  (sparsevector-print this)
  (print) )

(dm sparsevector-make(f . args)
  `(let ((|_SV_| (new sparsevector)))
     ,@(all (((i v) args)) `(==> |_SV_| set ,i ,v))
     |_SV_| ) )



;; -------------------------------- sparsevectorcollection



(defclass SparseVectorCollection Object
  ((-obj- (pool)) apool) 
  ((-idx1- (-gptr-)) arr) )

(defmethod SparseVectorCollection SparseVectorCollection(n)
  ((-int-) n)
  (setq arr (gptr-matrix n))
  (setq apool (new Pool))
  (for (i 0 (1- n))
       (let ((sv (in-pool apool (new SparseVector))))
	 (arr i (to-gptr sv)) ) )
  () )

(defmethod SparseVectorCollection vector(i)
  ((-int-) i)
  (to-obj SparseVector (arr i)) )


;; -------------------------------- sparsekernel


(defclass SVMSparseKernel SVMKernel
  ((-obj- (SparseVectorCollection)) vec)
  ((-idx1- (-double-)) lab)
  ((-bool-) changed) )

(defmethod SVMSparseKernel SVMSparseKernel(n)
  ((-int-) n)
  (setq vec (new SparseVectorCollection n))
  (setq lab (double-matrix n))
  (setq changed t)
  () )

(defmethod SVMSparseKernel set-label(i y)
  ((-int-) i)
  ((-double-) y)
  (lab i y) )

(defmethod SVMSparseKernel label(i)
  ((-int-) i)
  (lab i) )

(defmethod SVMSparseKernel set-data(i j x)
  ((-int-) i j)
  ((-double-) x)
  (let ((sv (==> vec vector i)))
    (==> sv set j x) )
  (setq changed t) )

(defmethod SVMSparseKernel data(i)
  ((-int-) i)
  (==> vec vector i) )

(defmethod SVMSparseKernel dot(i j)
  ((-int-) i j)
  (let ((sv1 (to-obj SparseVector (:vec:arr i)))
	(sv2 (to-obj SparseVector (:vec:arr j))) )
    (sparsevector-dot sv1 sv2) ) )

(defmethod SVMSparseKernel shuffle()
  (let* ((arr :vec:arr)
	 (n (idx-dim arr 0)))
    ((-int-) n)
    (when (>= n 2)
      (for (i 0 (- n 2))
	   (let ((j (+ 1 i (int (* (rand) (- n (1+ i)))))))
	     ((-int-) i j)
	     (let ((p (arr i))
		   (l (lab i)) )
	       (arr i (arr j))
	       (lab i (lab j))
	       (arr j p)
	       (lab j l) ) ) ) 
      (setq changed t) )
    n ) )


(defclass SVMSparseLinearKernel SVMSparseKernel)

(defmethod SVMSparseLinearKernel SVMSparseLinearKernel(n)
  ((-int-) n) 
  (setq vec (new SparseVectorCollection n))
  (setq lab (double-matrix n))
  (setq changed t)
  () )

(defmethod SVMSparseLinearKernel call(i j)
  ((-int-) i j)
  (==> this dot i j) )



(defclass SVMSparseRBFKernel SVMSparseKernel
  ((-idx1- (-double-)) norm) 
  ((-double-) gamma) )

(defmethod SVMSparseRBFKernel SVMSparseRBFKernel(n)
  ((-int-) n) 
  (setq vec (new SparseVectorCollection n))
  (setq lab (double-matrix n))
  (setq gamma 1)
  (setq norm (double-matrix n))
  (setq changed t) )

(defmethod SVMSparseRBFKernel prep()
  (for (i 0 (1- (idx-dim norm 0)))
       (norm i (==> this dot i i)) )
  (setq changed ()) )

(defmethod SVMSparseRBFKernel call(i j)
  ((-int-) i j)
  (when changed (==> this prep))
  (qexpmx (* gamma (+ (norm i) (norm j) (* -2 (==> this dot i j))))) )





;; ----------------------------------------
;; COMPILE

(let* ((lasvmdir (concat-fname (dirname file-being-loaded) "lasvm"))
       (dhc-make-lushflags (concat dhc-make-lushflags " -I" lasvmdir)))
  (dhc-make ()
	    #{ #include "vector.h" #}
	    (SparseVector sparsevector -destructor size pairs get set contents unpack)
	    sparsevector-lincomb sparsevector-dot 
	    (SparseVectorCollection SparseVectorCollection vector)
	    (SVMSparseKernel SVMSparseKernel set-label label set-data data dot shuffle)
	    (SVMSparseLinearKernel SVMSparseLinearKernel call)
	    (SVMSparseRBFKernel SVMSparseRBFKernel prep call) ) )
