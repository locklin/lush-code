;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; LUSH Lisp Universal Shell
;;;   Copyright (C) 2002 Leon Bottou, Yann Le Cun, AT&T Corp, NECI.
;;; Includes parts of TL3:
;;;   Copyright (C) 1987-1999 Leon Bottou and Neuristique.
;;; Includes selected parts of SN3.2:
;;;   Copyright (C) 1991-2001 AT&T Corp.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 2 of the License, or
;;; (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with this program; if not, write to the Free Software
;;; Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111, USA
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; $Id: sparsevector.lsh,v 1.1 2004-08-30 23:24:21 leonb Exp $
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(libload "libc/make")
(libload "libidx/idx-double")
(libload "libidx/idx-int")

(libload "mysvm")


(defclass SparseVector Object
  ((-gptr-) p) )

(defmethod SparseVector SparseVector()
  #{ $p = mysvm_sparsevector_create(); #}
  () )

(defmethod SparseVector -destructor()
  #{ if ($p) mysvm_sparsevector_destroy($p); #}
  () )

(defmethod SparseVector get(i)
  ((-int-) i)
  (to-real #{ mysvm_sparsevector_get($p,$i) #}) )

(defmethod SparseVector set(i v)
  ((-int-) i)
  ((-double-) v)
  #{ mysvm_sparsevector_set($p,$i,$v); #}
  v )

(defmethod SparseVector size()
  (to-int #{ ((mysvm_sparsevector_t*)($p))->size #}) )

(defmethod SparseVector pairs()
  (to-int #{ ((mysvm_sparsevector_t*)($p))->npairs #}) )

(defmethod SparseVector contents(ivec dvec)
  ((-idx1- (-int-)) ivec)
  ((-idx1- (-double-)) dvec)
  (let* ((n (==> this pairs)))
    (idx-i1resize ivec (max 1 n))
    (idx-d1resize dvec (max 1 n))
    #{{
       int *iv = IDX_PTR($ivec, int);
       double *dv = IDX_PTR($dvec, double);
       mysvm_sparsevector_t *v = (mysvm_sparsevector_t*)$p;
       mysvm_sparsevector_pair_t *p = v->pairs;
       while (p)
       {  
         *iv = p->index;
         *dv = p->data;
         p = p->next;
         iv += $ivec->mod[0];
         dv += $dvec->mod[0];
       }
    }#}
    n ) )

(defmethod SparseVector unpack(n)
  ((-int-) n)
  (let ((m (double-matrix n)))
    #{{
       double *dv = IDX_PTR($m, double);
       mysvm_sparsevector_t *v = (mysvm_sparsevector_t*)$p;
       mysvm_sparsevector_pair_t *p = v->pairs;
       while (p && p->index < $n)
       {  
         dv[p->index] = p->data;
         p = p->next;
       }
    }#}
    m ) )

(de sparsevector-lincomb(v1 a1 v2 a2)
  ((-double-) a1 a2)
  ((-obj- (SparseVector)) v1 v2)
  (let ((v (new sparsevector)))
    #{{ mysvm_sparsevector_t *old = $v->p;
        $v->p = mysvm_sparsevector_combine($v1->p, $a1, $v2->p, $a2);
        mysvm_sparsevector_destroy(old);
    }#}
    v ) )

(de sparsevector-dot(v1 v2)
  ((-obj- (SparseVector)) v1 v2)
  (to-real #{ mysvm_sparsevector_dot_product($v1->p, $v2->p) #}) )

(de sparsevector-print(v)
  (printf ":sparsevector:%l"
	  (when (> (==> v pairs) 0)
	    (let ((n (==> v pairs))
		  (ivec (int-matrix 1))
		  (dvec (double-matrix 1)))
	      (==> v contents ivec dvec)
	      (mapfor (i 0 (1- n))
		(list (ivec i) (dvec i)) ) ) ) ) )

(defmethod SparseVector pretty()
  (sparsevector-print this)
  (print) )

(dm sparsevector-make(f . args)
  `(let ((|_SV_| (new sparsevector)))
     ,@(all (((i v) args)) `(==> |_SV_| set ,i ,v))
     |_SV_| ) )



;; ----------------------------------------
;; COMPILE

(let* ((mysvmdir (concat-fname (dirname file-being-loaded) "mysvm"))
       (dhc-make-lushflags (concat dhc-make-lushflags " -I" mysvmdir)))
  (dhc-make ()
	    #{ #include "vector.h" #}
	    (SparseVector sparsevector -destructor size pairs get set contents unpack)
	    sparsevector-lincomb sparsevector-dot ) )

