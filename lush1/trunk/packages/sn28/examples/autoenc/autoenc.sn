(libload "oldplotenv")
(libload "sn28/sn28")

;;; Allocate memory for 40 cells and 1000 connections.
(alloc-net 40 1000)

;;; Create a three-layer network, fully connected
;;; with sizes 4, 2, and 4.
(build-net '((input 4) (hidden 2) (output 4))
           '((input hidden) (hidden output)))

;;; Create an array containing the patterns
;;; The symbols pattern-array and desired-array are those used
;;; by the standard library (renamed to ...-matrix long ago)
(setq pattern-matrix
      [[  1 -1 -1 -1 ]
       [ -1  1 -1 -1 ]
       [ -1 -1  1 -1 ]
       [ -1 -1 -1  1 ] ] )

;;; Working in auto-association.
(setq desired-matrix pattern-matrix)

;;; Specify the patterns to use for learning.
(ensemble 0 3)

;;; Definition of the transfer function.
;;; i.e., f(x) = 1.68tanh(2x/3) + 0.05x
(nlf-tanh 0.666 0.05)

;;; Random initialization of weights
;;; i.e., in [-2.38/sqrt(Fanin), 2.38/sqrt(Fanin)]
;;; This corresponds to framing the probability density of
;;; weighted sums between the points of maximum curvature
;;; of the transfer function.
(smartforget)


;;; Initialization of the learning rate
;;; For each connection, epsilon is 1.0/Fanin.
(epsi 0.3)

;;; The code to draw the network
(de draw-net(net-struc patt-num)
    (when (not :draw-net-window)
          (setq :draw-net-window (new-window 512 200)) )
    (let ((y 10)
	  (x (+ 10 (* patt-num 100)))
	  (window draw-net-window))
      (graphics-batch
       (each ((layer (reverse (car net-struc))))
             (draw-list x y (state layer) (length layer) 1 20 16)
             (incr y 30) ) ) )
    (sleep 0.025) ; otherwise it goes too fast
    () )

;;; Display mode during learning
;;; (set-disp-nil) ; silent.
;;; (set-disp-net-and-error)
(init-disp-error 50 1)
(set-disp-everything)

; Measurement criterion: A result is considered correct
; if the quadratic error is less than 0.2
; This criterion is used by the perf function.
(set-class-lms 0.2)

; Learn until a satisfactory rate is achieved.
(while (< (perf) 100)
  (learn 10) )
