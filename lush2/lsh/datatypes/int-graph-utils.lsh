;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; LUSH Lisp Universal Shell
;;;   Copyright (C) 2009 Leon Bottou, Yann Le Cun, Ralf Juengling.
;;;   Copyright (C) 2002 Leon Bottou, Yann Le Cun, AT&T Corp, NECI.
;;; Includes parts of TL3:
;;;   Copyright (C) 1987-1999 Leon Bottou and Neuristique.
;;; Includes selected parts of SN3.2:
;;;   Copyright (C) 1991-2001 AT&T Corp.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the Lesser GNU General Public License as 
;;; published by the Free Software Foundation; either version 2 of the
;;; License, or (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with this program; if not, write to the Free Software
;;; Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111, USA
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#? (do-vertices (<u> adjacent-to <v>) . <body>)
;; Iterate over adjacent vertices. 
(defmacro do-vertices ((u at v) . body)
  (when (not (symbolp u))
    (error "do-vertices: syntax error") )
  (when (<> at 'adjacent-to) 
    (error "do-vertices: syntax error") )
  (let (((vv a) (gensyms 2)))
    `(let ((,vv ,v))
       (declare (-int-) ,vv)
       (do-set (,a arcs (ipair ,vv +int-min+))
         (declare (-double-) ,a)
         (if (<> (ipi1 ,a) ,vv)
             (setq continue ())
           (let ((,u (ipi2 ,a)))
             ,@body))))
    ))

