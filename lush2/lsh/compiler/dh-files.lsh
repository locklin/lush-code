
;; compiler support for file handling routines
;; These functions simply call the lush C-API.

(dhm-t filep (source)
  (when (<> 2 (length source))
    (dhc-error "one argument expected"))
  (let ((tn (dhc-parse-expr-t (cadr source))))
    (when (not (==> :tn:type is-a-str))
      (dhc-error "argument must be an string") )
    (new t-node (list tn) (new dhc-type 'dht-bool)) ))

(dhm-c filep (source treetype retplace)
  (let ((exp (dhc-parse-expr-c (cadr source) (cadr :treetype:tn-list) ())))
    (sprintf "filep(%s)" exp) ))

(dhm-t-declare filep dirp unlink)

(dhm-c dirp (source treetype retplace)
  (let ((exp (dhc-parse-expr-c (cadr source) (cadr :treetype:tn-list) ())))
    (sprintf "filep(%s)" exp) ))

(dhm-c unlink (source treetype retplace)
  (let ((exp (dhc-parse-expr-c (cadr source) (cadr :treetype:tn-list) ())))
    (sprintf "deletefile(%s)" exp) ))


(dhm-t chdir (source)
  (when (> (length source) 2)
    (dhc-error "no or one argument expected"))
  (if (= (length source) 2)
      (let ((tn (dhc-parse-expr-t (cadr source))))
        (when (not (==> :tn:type is-a-str))
          (dhc-error "argument must be an string") )
        (new t-node (list tn) (new dhc-type 'dht-string)) )
    (new t-node () (new dhc-type 'dht-string)) ))

(dhm-c chdir (source treetype retplace)
  (if (= (length source) 2)
      (let ((exp (dhc-parse-expr-c (cadr source) (cadr :treetype:tn-list) ())))
        (sprintf "cwd(%s)" exp) )
    "cwd()"))

