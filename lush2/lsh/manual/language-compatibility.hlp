#? **** Language Compatibility 

#? *** Lush 2 vs Lush 1

Lush 2.x is not fully backward compatible to Lush 1.x. Here are
the main differences
{<ul>
  {<li> Lush 2 has a more logical and more consistently named set
        of array functions. See the help on "Arrays and Indexes".}        
  {<li> Type declarations require the <declare> keyword.}
  {<li> Strings in compiled code are plain C strings (not byte storages).}
  {<li> Lush 2 has a garbage collector, the <LOCK> and <UNLOCK> macros
        for reference counting are obsolete.}
}

To make porting Lush 1.x legacy code easy there is a compatibility
namespace <lush1-> containing obsolete function definitions.
See for example the code in <packages/libnum/linalgebra.lsh>.


#? *** Differences to Common Lisp

Lush is more similar to Scheme than to Common Lisp in many ways.
This section lists a couple of not so obvious differences between
Lush and Common Lisp.

#? ** NIL is not equivalent to ()

While both Lush and Lisp use <()> to represent falsity and the empty list, 
Lush has no synonym for it as Common Lisp has with <nil>. However, since unbound
symbols evaluate to <()> in Lush, writing <nil> instead of <()> will work as
expected most of the time, as long as the symbol <nil> is not bound. But there are
exceptions, the following example illustrates one:

{<code>
? nil
= ()

? (member nil '(1 nil 2))
= ()
</code>}

The second occurrence of <nil> in the above example is not evaluated and
thus is not equivalent to <()>. Since <nil> is just a symbol like any other,
it is recommended to always write <()> where in one might use <nil> in
Common Lisp.

       