;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; LUSH Lisp Universal Shell
;;;   Copyright (C) 2009 Leon Bottou, Yann Le Cun, Ralf Juengling.
;;;   Copyright (C) 2002 Leon Bottou, Yann Le Cun, AT&T Corp, NECI.
;;; Includes parts of TL3:
;;;   Copyright (C) 1987-1999 Leon Bottou and Neuristique.
;;; Includes selected parts of SN3.2:
;;;   Copyright (C) 1991-2001 AT&T Corp.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the Lesser GNU General Public License as 
;;; published by the Free Software Foundation; either version 2 of the
;;; License, or (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with this program; if not, write to the Free Software
;;; Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111, USA
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defclass FibonacciIterator iterator
  ((-int-) f)
  ((-int-) next-item) )

(defmethod FibonacciIterator FibonacciIterator ()
  (==> this iterator)
  (setq f 1  next-item 0  next-item-valid t) )

(defmethod FibonacciIterator -make-next ()
  (let ((g (+ next-item f)))
    (declare (-int-) g)
    (setq next-item f  next-item-valid t  f g)
    ()))


(defclass RangeShuffledIterator iterator
  ((-int-) next-item from to x N A B count) )

(defmethod RangeShuffledIterator RangeShuffledIterator (from to)
  (declare (-int-) from to)
  (==> this iterator)
  (setq :this:from from  :this:to to)
  (setq N (max 0 (- to from)))
  (setq count N)
  (let ((fib (new FibonacciIterator)))
    (iter-drop-while (lambda (x) (< x N)) fib)
    (setq B (next fib))
    (setq A (next fib)) )
  (setq x 0)
  ())

(defmethod RangeShuffledIterator -make-next ()
  (when (> count 0)
    (do-while (>= x N)
      (setq x (mod (+ x A) B)) )
    (setq next-item (+ x from)  next-item-valid t)
    (decr count) )
  ())

(dhc-make-class () 
                FibonacciIterator
                RangeShuffledIterator)

(in-namespace iter-

(defmacro range*/s args
  (selectq (length args)
    (1 (let (((to) args))
         `(iterate (new RangeShuffledIterator 0 ,to))
         ))
    (2 (let (((from to) args))
         `(iterate (new RangeShuffledIterator ,from ,to))
         ))
    (t
     (error "wrong number of arguments") )))

)

