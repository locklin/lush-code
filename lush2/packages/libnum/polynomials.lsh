;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; LUSH Lisp Universal Shell
;;;   Copyright (C) 2002 Leon Bottou, Yann Le Cun, AT&T Corp, NECI.
;;; Includes parts of TL3:
;;;   Copyright (C) 1987-1999 Leon Bottou and Neuristique.
;;; Includes selected parts of SN3.2:
;;;   Copyright (C) 1991-2001 AT&T Corp.
;;;
;;; Includes information derived from the GSL (Gnu Scientific Library)
;;;   header files which are copyrighted and distributed under the GPL
;;;   by their respective authors.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 2 of the License, or
;;; (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with this program; if not, write to the Free Software
;;; Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111, USA
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; $Id: polynomials.lsh,v 1.2 2005/10/14 05:51:07 profshadoko Exp $
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(libload "libnum-config")
(libload "overload")

#? *** Polynomials
;; Evaluating polynomials in various ways.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun -poly-number (p x)
  (declare (-idx1- (-double-)) p)
  (declare (-double-) x)
  (cpheader "#include <gsl/gsl_poly.h>")
  (to-double #{ gsl_poly_eval( IDX_PTR($p,double) ,$(idx-dim p 0) ,$x) #} ))

(defun -poly-vector (p xs)
  (declare (-idx1- (-double-)) p xs)
  (let ((l  (length p))
        (vs (clone-array xs)) )
    (declare (-int-) l)
    (idx-bloop ((x xs) (v vs))
      (v (to-double #{ gsl_poly_eval( IDX_PTR($p,double), $l, $(x)) #})) )
    vs))

(dhc-make-with-libs ()
                    (list libnum-libgslcblas libnum-libgsl)
                    -poly-number
                    -poly-vector)

#? (poly <p> <x>)
;; Evaluate polynomial <p> at <x>.
;;
;; Vector <p> holds the polynomial coefficients, <x>
;; may be a number or a double vector.
(defoverload poly -poly-number -poly-vector)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


