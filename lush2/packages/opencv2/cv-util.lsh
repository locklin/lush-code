;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; PSU Lush
;;;   Copyright (C) 2005 Ralf Juengling.
;;; Derived from LUSH Lisp Universal Shell
;;;   Copyright (C) 2002 Leon Bottou, Yann Le Cun, AT&T Corp, NECI.
;;; Includes parts of TL3:
;;;   Copyright (C) 1987-1999 Leon Bottou and Neuristique.
;;; Includes selected parts of SN3.2:
;;;   Copyright (C) 1991-2001 AT&T Corp.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 2 of the License, or
;;; (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with this program; if not, write to the Free Software
;;; Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111, USA
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(in-namespace cv-

;; Parse the #defines in file filename and return as htable
;; line-from and line-to are strings
(defun parse-defines (filename line-from line-to)
  (let* ((token "#define")
         (nc (length token))
         (ht-defs (htable 11 t t))
         (ls (iter-lines filename)) )
    (iter-drop-until line-from ls)
    (dolist (l (iter-take-until* line-to ls))
      (when (str-startswith l token)
        (reading-string (right l (- nc))
          (let ((sym (read)))
            (set sym sym)  ; bind symbol to itself since htable only holds weak refs
            (ht-defs sym (read) )
            ))))
    ht-defs))

;; make sure the mapping is from symbols to numbers
(defun normalize-constants (ht)
  (do (((sym . val) ht))
    ;; when sym maps to a symbol, update the mapping
    (when (symbolp val)
      (ht sym (ht val)) ))
  ht)

) ; in-namespace


        
      