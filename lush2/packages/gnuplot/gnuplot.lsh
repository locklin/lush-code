;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; PSU Lush
;;;   Copyright (C) 2005 Ralf Juengling
;;; Derived from LUSH Lisp Universal Shell
;;;   Copyright (C) 2002 Leon Bottou, Yann Le Cun, AT&T Corp, NECI.
;;; Includes parts of TL3:
;;;   Copyright (C) 1987-1999 Leon Bottou and Neuristique.
;;; Includes selected parts of SN3.2:
;;;   Copyright (C) 1991-2001 AT&T Corp.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 2 of the License, or
;;; (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with this program; if not, write to the Free Software
;;; Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111, USA
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; inspired by Yann LeCun's "gnuplotter.lsh"

(defvar *gnuplot-cmd* (reading "| which gnuplot" (read-string)))

(when (not (filep *gnuplot-cmd*))
  (error "Cannot find gnuplot") )

(let ((gp-version (reading "| gnuplot --version" (read-string))))
  (defparameter *gnuplot-version-string* gp-version)
  (when (< (val (cadr (str-split " " gp-version))) 4)
    (printf "*** Warning: Gnuplot interface has not been tested with gnuplot prior to version 4.0.\n")
    (printf "*** Warning: Version found is '%s'\n" gp-version)) )

#? (new-gnuplot [<x> <y>] <w> <h> [<title>])
;; Create <Gnuplot> instance with X11 terminal of size <w>x<h> to
;; appear at position (<x>,<y>).
(defun new-gnuplot (w h . args)
  (let ((x ()) (y ()) (title "gnuplot")
	(*gnuplot-cmd* *gnuplot-cmd*)
	(*gnuplot-preamble* 
	 (concat *gnuplot-preamble* "; set terminal x11")) )
    (selectq (length args)
      (0
       (setq *gnuplot-cmd*
	     (sprintf "%s -noraise -background white -tvtwm -geometry %dx%d -title \"%s\""
		      *gnuplot-cmd* w h title)))
      (1
       (setq title (car args))
       (setq *gnuplot-cmd*
	     (sprintf "%s -noraise -background white -tvtwm -geometry %dx%d -title \"%s\""
		      *gnuplot-cmd* w h title)))
      (2
       (let ((x w) (y h) (w (car args)) (h (cadr args)))
	 (setq *gnuplot-cmd*
	       (sprintf "%s -noraise -background white -tvtwm -geometry %dx%d+%d+%d -title \"%s\""
			*gnuplot-cmd* w h x y title))))
      (3
       (let ((x w) (y h) (w (car args)) (h (cadr args)) (title (caddr args)))
	 (setq *gnuplot-cmd*
	       (sprintf "%s -noraise -background white -tvtwm -geometry %dx%d+%d+%d -title \"%s\""
			*gnuplot-cmd* w h x y title))))
      (t 
       (error "invalid number of arguments") ))
    (let ((gp (new Gnuplot 'interactive ())))
      (gp "clear")
      gp)))

(defclass GnuplotBinary object
  data)

(defmethod GnuplotBinary GnuplotBinary (arg)
  (assert (numericp arg))
  (setq data arg) )

#? Class Gnuplot
;; Instances of class <Gnuplot> serve as proxies for external gnuplot 
;; processes. Creating a new <Gnuplot> involves starting a new external
;; gnuplot process. The external gnuplot process exists until the proxy
;; object gets deleted (that is, until its destructor is called).
;; A <Gnuplot> object may be "interactive" or "non-interactive", 
;; depending on the current state of the (boolean) instance variable 
;; <interactive>.
(defclass Gnuplot Object
  interactive    ; if true, object prints output received from gnuplot
  echo-on        ; when true, gnuplot prints echo (internal)
  logfile        ; if not nil, open log file and log gnuplot session 
  fd-from        ; file descriptor for receiving output from gnuplot
  fd-to          ; file descriptor for sending input to gnuplot
  )

(in-namespace (class Gnuplot)

(dm escape-%s (_ s)
  `(regex-subst "%" "%%%%" ,s))

(defalias str-val val)
(defalias str-index index)
(defalias prefix  left)
(defalias suffix  right)

;; auxiliary for method 'read-til-next-prompt'
;; remove suffix from txt if it is a gnuplot prompt
(defun remove-prompt (txt &optional (prompts ("gnuplot" "multiplot" "input data ('e' ends) ")) )
  (if (null prompts)
      ()
    (let* ((prompt (car prompts))
	   (lenp   (length prompt)) )
      (if (and (>= (length txt) lenp)  (= (suffix txt lenp) prompt))
	  (prefix txt (- lenp))
	(remove-prompt txt (cdr prompts)) ))))

(defmacro with-fd-log (fd-log . body)
  `(when ,fd-log
     (writing ,fd-log ,@body)) )

)
	      
(defmethod Gnuplot -read-til-next-prompt args
  (let ((txt ()) (cur ()))
    (reading fd-from (setq txt (read-string "~>:")))
    (reading fd-from (setq cur (read-string 2)))
    (when logfile
      (writing (open-append logfile) 
        (printf "%s" (concat txt cur)) (flush)) )
    
    (selectq (prefix cur 1)
      (":"  (cond 
             ((= (suffix txt 21) "Press return for more")
              ;; send carriage-return and remove prompt text
              (writing fd-to (printf "\n"))
              (concat (prefix txt -21) 
                      (==> this -read-til-next-prompt)))
             
             ((= (suffix txt 10) "Help topic")
              ;; send carriage-return and remove prompt text
              (writing fd-to (printf "\n"))
              (concat (prefix txt -10) 
                      (==> this -read-til-next-prompt)))
             
             ((regex-match ".+Subtopic of (.+)$" txt)
              ;; send carriage-return and remove prompt text
              (writing fd-to (printf "\n"))
              (concat (car (regex-extract "(.+)\nSubtopic of (.+)$" txt))
                      (==> this -read-til-next-prompt)) )
             (t 
              (concat txt cur (==> this -read-til-next-prompt)) )))
      
      (">" (let ((-txt (remove-prompt txt)))
             (if -txt
                 -txt
               (concat txt cur (==> this -read-til-next-prompt)) )))
      
      (t   (error "Don't know how I got here:" (concat txt cur)) ))) )

(defmethod Gnuplot read-til-next-prompt args
  (if (socketselect fd-from 100)
      (apply send this ''-read-til-next-prompt args) 
    ()))

(defmethod Gnuplot print-array (m fd-log)
  (let* ((elt     (idx-element-type m))
	 (pf-at   (lambda (i) (printf " ") (prin (m i)) ))
	 (pf-real (lambda (i) (printf "%10.8f\t" (m i))))
	 (pf-rest (lambda (i) (printf "%10d\t" (m i))))
	 (pf      (cond 
		   ((member elt '(atom gptr)) pf-at)
		   ((member elt '(float double)) pf-real)
		   (t pf-rest) )))
    (cond
     ((= 0 (idx-rank m))   ; scalar 
      (with-fd-log fd-log (prin (m)) (printf "\n"))
      (prin (m))
      (printf "\n") (flush)
      (==> this read-til-next-prompt) )

     ((= 1 (idx-rank m))   ; one dimensional
      (for (i 0 (- (idx-shape m 0) 1)) 
	(with-fd-log fd-log (pf i))
	(pf i))
      (with-fd-log fd-log (printf "\n"))
      (printf "\n") (flush)
      (==> this read-til-next-prompt) )
     
     (t                    ; all other
      (for (i 0 (- (idx-shape m 0) 1))
	   (==> this print-array (select m 0 i) fd-log) )
      (with-fd-log fd-log (printf "\n"))
      (printf "\n") (flush)
      (==> this read-til-next-prompt) ))))


#? (new Gnuplot)
;; Create new gnuplot process and an associated <Gnuplot> object.
;; {<pre>
;; Optional keyword arguments:
;; logfile     : name of log file for debugging (default is nil)
;; interactive : true triggers interactive mode (default is t)
;; </pre>}
(defmethod Gnuplot Gnuplot args
  (let ((option (parse-kwdargs args  'interactive t  'logfile ())))
    (setq logfile (option 'logfile))
    (setq interactive (option 'interactive))
    (let (((to . from) (filteropen (sprintf "%s - 2>&1" *gnuplot-cmd*))))
      (when logfile
	(writing (open-append logfile)
	  (printf "\n\n*** New gnuplot instance created (%s).\n" 
		  (date-to-string (now)))
	  (flush) ))
      (setq fd-to to) 
      (setq fd-from from)
      (when *gnuplot-preamble* (this *gnuplot-preamble*))
      (==> this read-til-next-prompt) )
    (setq echo-on *gnuplot-echo-on*) ))


#? (==> <Gnuplot> variables)
;; Return <Htable> of currently defined gnuplot variables.
(defmethod Gnuplot variables ()
  (let ((ia interactive)
        (vs (htable)) )
    (setq interactive ())
    (dolist (s (str-split "\n" (this "show variables all")))
      (let (((name val) (or (regex-extract "\t([^=]+) = (.+)" s)
                            '(() ()) )))
        (when name
          (if (str-startswith val "\"")
              (vs name (substring val 1 -1)) ; variable is a string
            (vs name (str-val val)) ))))     ; variable is a number
    (setq interactive ia)
    vs))

#? (==> <Gnuplot> colors)
;; Return <Htable> of named colors.
;; {<see> *gnuplot-colors*}
(defmethod Gnuplot colors ()
  (let ((ia interactive)
        (cs (htable)) )
    (setq interactive ())
    (dolist (s (str-split "\n" (this "show palette colornames")))
      (let (((name r g b) (or (regex-extract " +([^ ]+)[ #0-9a-f]+ = +([0-9]+) +([0-9]+) +([0-9]+)" s)
                              '(() () () ()) )))
        (when name
          (cs (make-symbol name) (list (val r) (val g) (val b))) )))
    (setq interactive ia)
    cs))


;; this requires gnuplot 4.4
;; #? (==> <Gnuplot> use-window <win>)
;; Have gnuplot use the X11 window <win> for terminal output. Return <win>.
(defmethod Gnuplot use-window (win)
  (if (not (and win (is-of-class win |WINDOW|) (x11-id win)))
      (error "argument not an X11 window" win)
    (this (sprintf "set terminal x11 window \"%s\"" (strhex (x11-id win))))
    (putp win 'client this)
    (this "clear")
    win))

(defmethod Gnuplot -listeval args
  (let ((arg (when args (car args)))
	(args (when args (cdr args)))
	(response ()))
    (cond
     ((null arg)
      (when (socketselect fd-from 0)
        (setq response (==> this -read-til-next-prompt)) ))

     ((stringp arg)
      (when logfile
	(writing (open-append logfile) (printf "%s\n" arg)) )
      (writing fd-to 
	(printf "%s\n" arg) (flush))
      (when (not (or (index "exit" arg) (index "quit" arg)))
	(setq response (==> this read-til-next-prompt))
        (when echo-on
          (setq response (suffix response 
                                (- (min (1+ (length arg))
                                        (length response)) ))) )))
     ((indexp arg)
      (let ((fd-log (if logfile (open-append logfile) ())))
	(writing fd-to
	  (setq response (==> this print-array arg fd-log)) ))
      (when (not (and args (indexp (car args))))
	(setq response (this "e")) ))
     
     ((isa arg GnuplotBinary)
      (export-raw-matrix :arg:data fd-to)
      (when (null args)
        (writing fd-to
          (printf "\n") (flush) )
        (while (null (socketselect fd-from 0)) ()) ; wait for gnuplot to respond
        (setq response (==> this -read-til-next-prompt)) ))

     (t
      (error "not a valid argument" arg) ))
     
    ;; print response if in interactive mode
    (when (and interactive response)
      (printf (escape-%s response))
      (setq response ()) )
    
    ;; process remaining arguments
    (if args 
	(apply this args)
      response) ))

(defmethod Gnuplot check-for-error (last-cmd last-ans)
  (let ((errno (val (this "print GPVAL_ERRNO"))))
    (when (<> errno 0)
      (printf "\n")
      (printf "*** An error occurred while processing gnuplot script:\n\n")
      (printf "gnuplot> %s\n" last-cmd)
      (printf "%s\n" last-ans)
      (error "error in gnuplot script") )))

(defmethod Gnuplot -destructor ()
  (when logfile
    (writing (open-append logfile)
      (printf "\n*** Terminating gnuplot instance (%s).\n" 
	      (date-to-string (now)) )))
  (this "exit")
  ())

(defmethod Gnuplot send-binary (cmd . arrays)
  ;; check input command
  (when (not (stringp cmd))
    (error "first argument not a command string" cmd) )
  (dolist (a arrays)
    (when (not (indexp a))
      (error "not an array" a) ))
  ;; send command
  (writing fd-to 
    (printf "%s\n" cmd) (flush))
  ;; send data
  (dolist (a arrays)
    (export-raw-matrix a fd-to) )
  ;; get ready for next input
  (writing fd-to
    (printf "\n") (flush))
  (==> this read-til-next-prompt) 
  (==> this read-til-next-prompt) )


(defun -mkfmt-4.2 (a)
  (str-join "x" (make-list (idx-rank a) "%d")) )
  
(defun -mkfmt (a)
  (concat "(" (str-join "," (make-list (idx-rank a) "%d")) ")") )

(defun -binary-descriptor arrays
  (let ((shps ()) (fmts ()) (mkfmt (if (= *gnuplot-version* 4.2) -mkfmt-4.2 -mkfmt)))
    (dolist (a arrays)
      (let ((shpfmt (mkfmt a))
	    (shp (idx-shape a))
	    (scs (storage-class-symbol (classof (idx-storage a)))) )
	(setq shps (cons (apply sprintf shpfmt (reverse shp)) shps))
	(setq fmts (cons
                    (selectq scs
                      ('float  "'%float'")
                      ('double "'%double'")
                      ('int    "'%int'")
                      ('short  "'%short'")
                      ('byte   "'%char'")
                      ('ubyte  "'%uchar'")
                      (t 
                       (error "not a supported binary type" scs)) )
		    fmts)) ))
    (sprintf "binary array=%s format=%s" 
	     (str-join "," shps) (str-join "," fmts)) ))

(defun test-gnuplot args
  ;; todo: add some examples, e.g. from http://www-106.ibm.com/developerworks/library/l-gnuplot/
  (let ((gp (new gnuplot 'interactive ())))
    (gp "set terminal x11 0" 
	"test")
    (sleep 2)
    (gp "set terminal x11 1"
	"test palette")
    (sleep 2)
    (gp "set terminal x11 0 close")
    (sleep 2)
    (gp "set terminal x11 1 close")
    (setq gp ()) ))


;; auxiliary definitions

(let ((gp (new Gnuplot 'interactive ())))

;; test if gnuplot echos
(let ((*gnuplot-echo-on* ())
      (r (gp "show terminal")))
  (defparameter *gnuplot-echo-on* (str-startswith r "show terminal")) )

#? *gnuplot-preamble*
;; A gnuplot command string that is sent to each new gnuplot instance upon
;; creation. You may customize this setting (e.g., in your lushrc.lsh file).
(defvar *gnuplot-preamble* "set mouse")

#? *gnuplot-version*
;; Version of gnuplot program.
(defparameter *gnuplot-version* 
  ((==> gp variables) "GPVAL_VERSION") )

#? *gnuplot-build-options*
;; String of gnuplot build options.
(defparameter *gnuplot-build-options*
  (str-join "" (str-split "\\\\n" ((==> gp variables) "GPVAL_COMPILE_OPTIONS"))) )

#? *gnuplot-version-string*
;; Fully qualified version of gnuplot program.

#? *gnuplot-colors*
;; <HTable> mapping color names to RGB triples.
(defparameter *gnuplot-colors* (==> gp colors))

#? *gnuplot-shape-to-pointtype*
;; <Htable> mapping shape names (symbols) to gnuplot pointtype codes.
(defvar *gnuplot-shape-to-pointtype*
  ((htable) 'dot 0  'cross 1  '+ 1  'x 2  'asterisk 3  '* 3  'square 4
   'filled-square 5  'circle 6  'filled-circle 7  'triangle 8 
   'filled-triangle 8  triangle-down 10  'filled-triangle-down 11
   'diamond 12  'filled-diamond 13))

) ; let
